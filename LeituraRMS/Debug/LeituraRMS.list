
LeituraRMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800be20  0800be20  0000ce20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c240  0800c240  0000e2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c240  0800c240  0000d240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c248  0800c248  0000e2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c248  0800c248  0000d248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c24c  0800c24c  0000d24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800c250  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000359c  200002c4  0800c514  0000e2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003860  0800c514  0000e860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa99  00000000  00000000  0000e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316e  00000000  00000000  0001dd8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00020f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cf  00000000  00000000  00021c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a563  00000000  00000000  00022627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128e5  00000000  00000000  0003cb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094bb8  00000000  00000000  0004f46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004914  00000000  00000000  000e406c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e8980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be08 	.word	0x0800be08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800be08 	.word	0x0800be08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <MX_ADC1_Init+0x98>)
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <MX_ADC1_Init+0x98>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fc6:	4a17      	ldr	r2, [pc, #92]	@ (8001024 <MX_ADC1_Init+0xa0>)
 8000fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe4:	480d      	ldr	r0, [pc, #52]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fe6:	f000 fbf1 	bl	80017cc <HAL_ADC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ff0:	f000 f9ec 	bl	80013cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <MX_ADC1_Init+0x98>)
 8001006:	f000 fda5 	bl	8001b54 <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001010:	f000 f9dc 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200002e0 	.word	0x200002e0
 8001020:	40012000 	.word	0x40012000
 8001024:	0f000001 	.word	0x0f000001

08001028 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <HAL_ADC_MspInit+0x7c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d127      	bne.n	800109a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <HAL_ADC_MspInit+0x80>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	4a15      	ldr	r2, [pc, #84]	@ (80010a8 <HAL_ADC_MspInit+0x80>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001058:	6453      	str	r3, [r2, #68]	@ 0x44
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <HAL_ADC_MspInit+0x80>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_ADC_MspInit+0x80>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <HAL_ADC_MspInit+0x80>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <HAL_ADC_MspInit+0x80>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001082:	2302      	movs	r3, #2
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <HAL_ADC_MspInit+0x84>)
 8001096:	f001 f88d 	bl	80021b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012000 	.word	0x40012000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000

080010b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <ler_sensor>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float analogico[amostras]; //alterar para 256 quando for usar normal


void ler_sensor(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	for(int i=0; i<amostras; i++){
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e019      	b.n	8001140 <ler_sensor+0x40>
		HAL_ADC_Start(&hadc1);
 800110c:	4811      	ldr	r0, [pc, #68]	@ (8001154 <ler_sensor+0x54>)
 800110e:	f000 fba1 	bl	8001854 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8001112:	2164      	movs	r1, #100	@ 0x64
 8001114:	480f      	ldr	r0, [pc, #60]	@ (8001154 <ler_sensor+0x54>)
 8001116:	f000 fc84 	bl	8001a22 <HAL_ADC_PollForConversion>
		analogico[i] = HAL_ADC_GetValue(&hadc1);
 800111a:	480e      	ldr	r0, [pc, #56]	@ (8001154 <ler_sensor+0x54>)
 800111c:	f000 fd0c 	bl	8001b38 <HAL_ADC_GetValue>
 8001120:	ee07 0a90 	vmov	s15, r0
 8001124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <ler_sensor+0x58>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 8001134:	4807      	ldr	r0, [pc, #28]	@ (8001154 <ler_sensor+0x54>)
 8001136:	f000 fc41 	bl	80019bc <HAL_ADC_Stop>
	for(int i=0; i<amostras; i++){
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001146:	dbe1      	blt.n	800110c <ler_sensor+0xc>
	}
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200002e0 	.word	0x200002e0
 8001158:	20000328 	.word	0x20000328
 800115c:	00000000 	.word	0x00000000

08001160 <converte_RMS>:

float converte_RMS(void){
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
	float v_adc= 0.0, acc=0.0, media=0.0, rms=0.0;
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<amostras; i++){
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	e047      	b.n	8001214 <converte_RMS+0xb4>
		v_adc = ((float)analogico[i]) * 3.3/4096.0;
 8001184:	4a3e      	ldr	r2, [pc, #248]	@ (8001280 <converte_RMS+0x120>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9e2 	bl	8000558 <__aeabi_f2d>
 8001194:	a334      	add	r3, pc, #208	@ (adr r3, 8001268 <converte_RMS+0x108>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff fa35 	bl	8000608 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b36      	ldr	r3, [pc, #216]	@ (8001284 <converte_RMS+0x124>)
 80011ac:	f7ff fb56 	bl	800085c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fcfe 	bl	8000bb8 <__aeabi_d2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	60fb      	str	r3, [r7, #12]
		acc += pow(v_adc - (3.3/2), 2);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff f9c9 	bl	8000558 <__aeabi_f2d>
 80011c6:	a32a      	add	r3, pc, #168	@ (adr r3, 8001270 <converte_RMS+0x110>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f864 	bl	8000298 <__aeabi_dsub>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	ec43 2b17 	vmov	d7, r2, r3
 80011d8:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001278 <converte_RMS+0x118>
 80011dc:	eeb0 0a47 	vmov.f32	s0, s14
 80011e0:	eef0 0a67 	vmov.f32	s1, s15
 80011e4:	f009 fe84 	bl	800aef0 <pow>
 80011e8:	ec55 4b10 	vmov	r4, r5, d0
 80011ec:	6978      	ldr	r0, [r7, #20]
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f84f 	bl	800029c <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fcd7 	bl	8000bb8 <__aeabi_d2f>
 800120a:	4603      	mov	r3, r0
 800120c:	617b      	str	r3, [r7, #20]
	for(int i = 0; i<amostras; i++){
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800121a:	dbb3      	blt.n	8001184 <converte_RMS+0x24>
	}

	media = acc/amostras;
 800121c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001220:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001288 <converte_RMS+0x128>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	edc7 7a02 	vstr	s15, [r7, #8]
	rms = sqrt(media);
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f7ff f993 	bl	8000558 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ec43 2b10 	vmov	d0, r2, r3
 800123a:	f009 fec9 	bl	800afd0 <sqrt>
 800123e:	ec53 2b10 	vmov	r2, r3, d0
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fcb7 	bl	8000bb8 <__aeabi_d2f>
 800124a:	4603      	mov	r3, r0
 800124c:	607b      	str	r3, [r7, #4]
	return rms * 778;
 800124e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001252:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800128c <converte_RMS+0x12c>
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bdb0      	pop	{r4, r5, r7, pc}
 8001264:	f3af 8000 	nop.w
 8001268:	66666666 	.word	0x66666666
 800126c:	400a6666 	.word	0x400a6666
 8001270:	66666666 	.word	0x66666666
 8001274:	3ffa6666 	.word	0x3ffa6666
 8001278:	00000000 	.word	0x00000000
 800127c:	40000000 	.word	0x40000000
 8001280:	20000328 	.word	0x20000328
 8001284:	40b00000 	.word	0x40b00000
 8001288:	45000000 	.word	0x45000000
 800128c:	44428000 	.word	0x44428000

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	@ 0x38
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001296:	f000 fa03 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f82b 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f7ff ff07 	bl	80010b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a2:	f7ff fe6f 	bl	8000f84 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80012a6:	f006 fac9 	bl	800783c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  float rms=0.0;
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //codigo usado com as conversoes

	  ler_sensor();
 80012b0:	f7ff ff26 	bl	8001100 <ler_sensor>
	  rms = converte_RMS();
 80012b4:	f7ff ff54 	bl	8001160 <converte_RMS>
 80012b8:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	  char buffer[50];
	  sprintf(buffer, "Valor = %f \n", rms);
 80012bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012be:	f7ff f94b 	bl	8000558 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4638      	mov	r0, r7
 80012c8:	4909      	ldr	r1, [pc, #36]	@ (80012f0 <main+0x60>)
 80012ca:	f007 fcdf 	bl	8008c8c <siprintf>
	  // Envia a mensagem pela USB CDC
	  CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80012ce:	463b      	mov	r3, r7
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7fe ffd5 	bl	8000280 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29a      	uxth	r2, r3
 80012da:	463b      	mov	r3, r7
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 fb6a 	bl	80079b8 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 80012e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012e8:	f000 fa4c 	bl	8001784 <HAL_Delay>
  {
 80012ec:	bf00      	nop
 80012ee:	e7df      	b.n	80012b0 <main+0x20>
 80012f0:	0800be20 	.word	0x0800be20

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	@ 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	@ 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f007 fd27 	bl	8008d56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b29      	ldr	r3, [pc, #164]	@ (80013c4 <SystemClock_Config+0xd0>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a28      	ldr	r2, [pc, #160]	@ (80013c4 <SystemClock_Config+0xd0>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <SystemClock_Config+0xd0>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <SystemClock_Config+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001340:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <SystemClock_Config+0xd4>)
 8001342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <SystemClock_Config+0xd4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001362:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001368:	2319      	movs	r3, #25
 800136a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800136c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001370:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001372:	2304      	movs	r3, #4
 8001374:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001376:	2307      	movs	r3, #7
 8001378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	4618      	mov	r0, r3
 8001380:	f002 faee 	bl	8003960 <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800138a:	f000 f81f 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2302      	movs	r3, #2
 8001394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800139a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2102      	movs	r1, #2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f002 fd50 	bl	8003e50 <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013b6:	f000 f809 	bl	80013cc <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	@ 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <Error_Handler+0x8>

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <HAL_MspInit+0x4c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_MspInit+0x4c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	@ (8001424 <HAL_MspInit+0x4c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_MspInit+0x4c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <NMI_Handler+0x4>

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <MemManage_Handler+0x4>

08001440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <UsageFault_Handler+0x4>

08001450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147e:	f000 f961 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <OTG_FS_IRQHandler+0x10>)
 800148e:	f001 f959 	bl	8002744 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20003010 	.word	0x20003010

0800149c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_kill>:

int _kill(int pid, int sig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b6:	f007 fca1 	bl	8008dfc <__errno>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2216      	movs	r2, #22
 80014be:	601a      	str	r2, [r3, #0]
  return -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_exit>:

void _exit (int status)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ffe7 	bl	80014ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80014de:	bf00      	nop
 80014e0:	e7fd      	b.n	80014de <_exit+0x12>

080014e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	60f8      	str	r0, [r7, #12]
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e00a      	b.n	800150a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f4:	f3af 8000 	nop.w
 80014f8:	4601      	mov	r1, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	60ba      	str	r2, [r7, #8]
 8001500:	b2ca      	uxtb	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	dbf0      	blt.n	80014f4 <_read+0x12>
  }

  return len;
 8001512:	687b      	ldr	r3, [r7, #4]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e009      	b.n	8001542 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	60ba      	str	r2, [r7, #8]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	dbf1      	blt.n	800152e <_write+0x12>
  }
  return len;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_close>:

int _close(int file)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157c:	605a      	str	r2, [r3, #4]
  return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_isatty>:

int _isatty(int file)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f007 fc06 	bl	8008dfc <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20010000 	.word	0x20010000
 800161c:	00000400 	.word	0x00000400
 8001620:	20002328 	.word	0x20002328
 8001624:	20003860 	.word	0x20003860

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <SystemInit+0x20>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <SystemInit+0x20>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001684 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001650:	f7ff ffea 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001656:	490d      	ldr	r1, [pc, #52]	@ (800168c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800166c:	4c0a      	ldr	r4, [pc, #40]	@ (8001698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167a:	f007 fbc5 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167e:	f7ff fe07 	bl	8001290 <main>
  bx  lr    
 8001682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001684:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001690:	0800c250 	.word	0x0800c250
  ldr r2, =_sbss
 8001694:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001698:	20003860 	.word	0x20003860

0800169c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <HAL_Init+0x40>)
 80016aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <HAL_Init+0x40>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <HAL_Init+0x40>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 fd31 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fe80 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fd49 	bl	800219a <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 fd11 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	2000232c 	.word	0x2000232c

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000232c 	.word	0x2000232c

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008

080017cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e033      	b.n	800184a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff fc1c 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001812:	f023 0302 	bic.w	r3, r3, #2
 8001816:	f043 0202 	orr.w	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 faba 	bl	8001d98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40
 800183a:	e001      	b.n	8001840 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADC_Start+0x1a>
 800186a:	2302      	movs	r3, #2
 800186c:	e097      	b.n	800199e <HAL_ADC_Start+0x14a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d018      	beq.n	80018b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001894:	4b45      	ldr	r3, [pc, #276]	@ (80019ac <HAL_ADC_Start+0x158>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a45      	ldr	r2, [pc, #276]	@ (80019b0 <HAL_ADC_Start+0x15c>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9a      	lsrs	r2, r3, #18
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d15f      	bne.n	8001984 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001902:	d106      	bne.n	8001912 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f023 0206 	bic.w	r2, r3, #6
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001910:	e002      	b.n	8001918 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <HAL_ADC_Start+0x160>)
 8001922:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800192c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d129      	bne.n	800199c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e020      	b.n	800199c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <HAL_ADC_Start+0x164>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d11b      	bne.n	800199c <HAL_ADC_Start+0x148>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d114      	bne.n	800199c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	e00b      	b.n	800199c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f043 0210 	orr.w	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	40012300 	.word	0x40012300
 80019b8:	40012000 	.word	0x40012000

080019bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Stop+0x16>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e021      	b.n	8001a16 <HAL_ADC_Stop+0x5a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3e:	d113      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a4e:	d10b      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e063      	b.n	8001b30 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a68:	f7ff fe80 	bl	800176c <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6e:	e021      	b.n	8001ab4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a76:	d01d      	beq.n	8001ab4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <HAL_ADC_PollForConversion+0x6c>
 8001a7e:	f7ff fe75 	bl	800176c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d212      	bcs.n	8001ab4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d00b      	beq.n	8001ab4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f043 0204 	orr.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e03d      	b.n	8001b30 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d1d6      	bne.n	8001a70 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f06f 0212 	mvn.w	r2, #18
 8001aca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d123      	bne.n	8001b2e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11f      	bne.n	8001b2e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d111      	bne.n	8001b2e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_ConfigChannel+0x1c>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e105      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x228>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d925      	bls.n	8001bcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68d9      	ldr	r1, [r3, #12]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	3b1e      	subs	r3, #30
 8001b96:	2207      	movs	r2, #7
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68d9      	ldr	r1, [r3, #12]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4403      	add	r3, r0
 8001bbe:	3b1e      	subs	r3, #30
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	e022      	b.n	8001c12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	2207      	movs	r2, #7
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	400a      	ands	r2, r1
 8001bee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6919      	ldr	r1, [r3, #16]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4403      	add	r3, r0
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d824      	bhi.n	8001c64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b05      	subs	r3, #5
 8001c2c:	221f      	movs	r2, #31
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	400a      	ands	r2, r1
 8001c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	3b05      	subs	r3, #5
 8001c56:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c62:	e04c      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d824      	bhi.n	8001cb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3b23      	subs	r3, #35	@ 0x23
 8001c7e:	221f      	movs	r2, #31
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43da      	mvns	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b23      	subs	r3, #35	@ 0x23
 8001ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb4:	e023      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b41      	subs	r3, #65	@ 0x41
 8001cc8:	221f      	movs	r2, #31
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b41      	subs	r3, #65	@ 0x41
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfe:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <HAL_ADC_ConfigChannel+0x234>)
 8001d00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <HAL_ADC_ConfigChannel+0x238>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1cc>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b12      	cmp	r3, #18
 8001d12:	d105      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <HAL_ADC_ConfigChannel+0x238>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d123      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x21e>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b10      	cmp	r3, #16
 8001d30:	d003      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x1e6>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b11      	cmp	r3, #17
 8001d38:	d11b      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d111      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <HAL_ADC_ConfigChannel+0x23c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <HAL_ADC_ConfigChannel+0x240>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c9a      	lsrs	r2, r3, #18
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40012300 	.word	0x40012300
 8001d8c:	40012000 	.word	0x40012000
 8001d90:	20000000 	.word	0x20000000
 8001d94:	431bde83 	.word	0x431bde83

08001d98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001da0:	4b79      	ldr	r3, [pc, #484]	@ (8001f88 <ADC_Init+0x1f0>)
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	021a      	lsls	r2, r3, #8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	4a58      	ldr	r2, [pc, #352]	@ (8001f8c <ADC_Init+0x1f4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d022      	beq.n	8001e76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6899      	ldr	r1, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	e00f      	b.n	8001e96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0202 	bic.w	r2, r2, #2
 8001ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7e1b      	ldrb	r3, [r3, #24]
 8001eb0:	005a      	lsls	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ed2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ee2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	035a      	lsls	r2, r3, #13
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	e007      	b.n	8001f0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	051a      	lsls	r2, r3, #20
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f4e:	025a      	lsls	r2, r3, #9
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	029a      	lsls	r2, r3, #10
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40012300 	.word	0x40012300
 8001f8c:	0f000001 	.word	0x0f000001

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	@ (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	@ (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	@ (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	@ (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff3e 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e159      	b.n	8002484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8148 	bne.w	800247e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a2 	beq.w	800247e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b57      	ldr	r3, [pc, #348]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a56      	ldr	r2, [pc, #344]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b54      	ldr	r3, [pc, #336]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a52      	ldr	r2, [pc, #328]	@ (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	@ (80024a4 <HAL_GPIO_Init+0x2f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x202>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x1fe>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	@ (80024ac <HAL_GPIO_Init+0x2f8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x1fa>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	@ (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x1f6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a45      	ldr	r2, [pc, #276]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x1f2>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	@ (80024a0 <HAL_GPIO_Init+0x2ec>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b38      	ldr	r3, [pc, #224]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a2f      	ldr	r2, [pc, #188]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b23      	ldr	r3, [pc, #140]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1a      	ldr	r2, [pc, #104]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a0f      	ldr	r2, [pc, #60]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f aea2 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e101      	b.n	80026d2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f005 fbad 	bl	8007c48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024fc:	d102      	bne.n	8002504 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f001 ff70 	bl	80043ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	7c1a      	ldrb	r2, [r3, #16]
 8002516:	f88d 2000 	strb.w	r2, [sp]
 800251a:	3304      	adds	r3, #4
 800251c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251e:	f001 fe4f 	bl	80041c0 <USB_CoreInit>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0ce      	b.n	80026d2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f001 ff68 	bl	8004410 <USB_SetCurrentMode>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0bf      	b.n	80026d2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e04a      	b.n	80025ee <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3315      	adds	r3, #21
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3314      	adds	r3, #20
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	b298      	uxth	r0, r3
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	332e      	adds	r3, #46	@ 0x2e
 8002594:	4602      	mov	r2, r0
 8002596:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3318      	adds	r3, #24
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025ac:	7bfa      	ldrb	r2, [r7, #15]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	331c      	adds	r3, #28
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3320      	adds	r3, #32
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3324      	adds	r3, #36	@ 0x24
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	3301      	adds	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	791b      	ldrb	r3, [r3, #4]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d3af      	bcc.n	8002558 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e044      	b.n	8002688 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	3301      	adds	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	791b      	ldrb	r3, [r3, #4]
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	429a      	cmp	r2, r3
 8002690:	d3b5      	bcc.n	80025fe <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7c1a      	ldrb	r2, [r3, #16]
 800269a:	f88d 2000 	strb.w	r2, [sp]
 800269e:	3304      	adds	r3, #4
 80026a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a2:	f001 ff01 	bl	80044a8 <USB_DevInit>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e00c      	b.n	80026d2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 ff4b 	bl	8005566 <USB_DevDisconnect>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_Start+0x1c>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e022      	b.n	800273c <HAL_PCD_Start+0x62>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002716:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f001 fe52 	bl	80043cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f002 fef9 	bl	8005524 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b08d      	sub	sp, #52	@ 0x34
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 ffb7 	bl	80056ce <USB_GetMode>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 848c 	bne.w	8003080 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f002 ff1b 	bl	80055a8 <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8482 	beq.w	800307e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f002 ff08 	bl	80055a8 <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 0202 	and.w	r2, r2, #2
 80027b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fef6 	bl	80055a8 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d161      	bne.n	800288a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0210 	bic.w	r2, r2, #16
 80027d4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80027fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002800:	d124      	bne.n	800284c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d035      	beq.n	800287a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	6a38      	ldr	r0, [r7, #32]
 8002822:	f002 fd2d 	bl	8005280 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002832:	441a      	add	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002844:	441a      	add	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	615a      	str	r2, [r3, #20]
 800284a:	e016      	b.n	800287a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002852:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002856:	d110      	bne.n	800287a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800285e:	2208      	movs	r2, #8
 8002860:	4619      	mov	r1, r3
 8002862:	6a38      	ldr	r0, [r7, #32]
 8002864:	f002 fd0c 	bl	8005280 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002874:	441a      	add	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0210 	orr.w	r2, r2, #16
 8002888:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fe8a 	bl	80055a8 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800289a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800289e:	f040 80a7 	bne.w	80029f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fe8f 	bl	80055ce <USB_ReadDevAllOutEpInterrupt>
 80028b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80028b2:	e099      	b.n	80029e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 808e 	beq.w	80029dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 feb3 	bl	8005636 <USB_ReadDevOutEPInterrupt>
 80028d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fea3 	bl	800363c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00c      	beq.n	800291a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800290c:	461a      	mov	r2, r3
 800290e:	2308      	movs	r3, #8
 8002910:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 ff79 	bl	800380c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002930:	461a      	mov	r2, r3
 8002932:	2310      	movs	r3, #16
 8002934:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d030      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002948:	2b80      	cmp	r3, #128	@ 0x80
 800294a:	d109      	bne.n	8002960 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800295a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800295e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	3304      	adds	r3, #4
 8002974:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f005 fa58 	bl	8007e40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	2302      	movs	r3, #2
 80029a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b8:	461a      	mov	r2, r3
 80029ba:	2320      	movs	r3, #32
 80029bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029d4:	461a      	mov	r2, r3
 80029d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	3301      	adds	r3, #1
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f47f af62 	bne.w	80028b4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fdd7 	bl	80055a8 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a04:	f040 80db 	bne.w	8002bbe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fdf8 	bl	8005602 <USB_ReadDevAllInEpInterrupt>
 8002a12:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a18:	e0cd      	b.n	8002bb6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80c2 	beq.w	8002baa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 fe1e 	bl	8005672 <USB_ReadDevInEPInterrupt>
 8002a36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d057      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	2201      	movs	r2, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69f9      	ldr	r1, [r7, #28]
 8002a5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a62:	4013      	ands	r3, r2
 8002a64:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a72:	461a      	mov	r2, r3
 8002a74:	2301      	movs	r3, #1
 8002a76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	799b      	ldrb	r3, [r3, #6]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d132      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3320      	adds	r3, #32
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4403      	add	r3, r0
 8002aa0:	331c      	adds	r3, #28
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4419      	add	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3320      	adds	r3, #32
 8002ab6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x3a2>
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3324      	adds	r3, #36	@ 0x24
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f002 fe25 	bl	8005730 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f005 f92c 	bl	8007d4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b40:	461a      	mov	r2, r3
 8002b42:	2340      	movs	r3, #64	@ 0x40
 8002b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b52:	6a38      	ldr	r0, [r7, #32]
 8002b54:	f001 fe0c 	bl	8004770 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	3310      	adds	r3, #16
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	78db      	ldrb	r3, [r3, #3]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d108      	bne.n	8002b86 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2200      	movs	r2, #0
 8002b78:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f005 f96f 	bl	8007e64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b92:	461a      	mov	r2, r3
 8002b94:	2302      	movs	r3, #2
 8002b96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ba2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fcbd 	bl	8003524 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	3301      	adds	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f af2e 	bne.w	8002a1a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 fcf0 	bl	80055a8 <USB_ReadInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bd2:	d122      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fea3 	bl	8003948 <HAL_PCDEx_LPM_Callback>
 8002c02:	e002      	b.n	8002c0a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f005 f90d 	bl	8007e24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 fcc2 	bl	80055a8 <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c2e:	d112      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f005 f8c9 	bl	8007dd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c54:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fca4 	bl	80055a8 <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6a:	f040 80b7 	bne.w	8002ddc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2110      	movs	r1, #16
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 fd71 	bl	8004770 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c92:	e046      	b.n	8002d22 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ca6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002cc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cda:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1e:	3301      	adds	r3, #1
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	461a      	mov	r2, r3
 8002d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d3b2      	bcc.n	8002c94 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d40:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7bdb      	ldrb	r3, [r3, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5a:	f043 030b 	orr.w	r3, r3, #11
 8002d5e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d70:	f043 030b 	orr.w	r3, r3, #11
 8002d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d76:	e015      	b.n	8002da4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d8a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d8e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9e:	f043 030b 	orr.w	r3, r3, #11
 8002da2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002db6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f002 fcb2 	bl	8005730 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fbe1 	bl	80055a8 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df0:	d123      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fc77 	bl	80056ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 fd2e 	bl	8004862 <USB_GetDevSpeed>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681c      	ldr	r4, [r3, #0]
 8002e12:	f001 f9c9 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 8002e16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f001 fa32 	bl	8004288 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f004 ffb8 	bl	8007d9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fbb2 	bl	80055a8 <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d10a      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f004 ff95 	bl	8007d7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f002 0208 	and.w	r2, r2, #8
 8002e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fb9d 	bl	80055a8 <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e74:	2b80      	cmp	r3, #128	@ 0x80
 8002e76:	d123      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e84:	2301      	movs	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	e014      	b.n	8002eb4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb0a 	bl	80034c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d3e4      	bcc.n	8002e8a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 fb6f 	bl	80055a8 <USB_ReadInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ed4:	d13c      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eda:	e02b      	b.n	8002f34 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3318      	adds	r3, #24
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d115      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da12      	bge.n	8002f2e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3317      	adds	r3, #23
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 faca 	bl	80034c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	3301      	adds	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	791b      	ldrb	r3, [r3, #4]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d3cd      	bcc.n	8002edc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 fb27 	bl	80055a8 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f64:	d156      	bne.n	8003014 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f66:	2301      	movs	r3, #1
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6a:	e045      	b.n	8002ff8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d12e      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	da2b      	bge.n	8002ff2 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	0c1a      	lsrs	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002fa4:	4053      	eors	r3, r2
 8002fa6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d121      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fee:	6053      	str	r3, [r2, #4]
            break;
 8002ff0:	e008      	b.n	8003004 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	791b      	ldrb	r3, [r3, #4]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	4293      	cmp	r3, r2
 8003002:	d3b3      	bcc.n	8002f6c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003012:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f002 fac5 	bl	80055a8 <USB_ReadInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003028:	d10a      	bne.n	8003040 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f004 ff2c 	bl	8007e88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800303e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f002 faaf 	bl	80055a8 <USB_ReadInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d115      	bne.n	8003080 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f004 ff1c 	bl	8007ea4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	e000      	b.n	8003080 <HAL_PCD_IRQHandler+0x93c>
      return;
 800307e:	bf00      	nop
    }
  }
}
 8003080:	3734      	adds	r7, #52	@ 0x34
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}

08003086 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_PCD_SetAddress+0x1a>
 800309c:	2302      	movs	r3, #2
 800309e:	e012      	b.n	80030c6 <HAL_PCD_SetAddress+0x40>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f002 fa0e 	bl	80054d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	461a      	mov	r2, r3
 80030dc:	4603      	mov	r3, r0
 80030de:	70fb      	strb	r3, [r7, #3]
 80030e0:	460b      	mov	r3, r1
 80030e2:	803b      	strh	r3, [r7, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da0f      	bge.n	8003114 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 020f 	and.w	r2, r3, #15
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	3310      	adds	r3, #16
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	3304      	adds	r3, #4
 800310a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
 8003112:	e00f      	b.n	8003134 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	b2da      	uxtb	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003140:	883b      	ldrh	r3, [r7, #0]
 8003142:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	78ba      	ldrb	r2, [r7, #2]
 800314e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003162:	78bb      	ldrb	r3, [r7, #2]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d102      	bne.n	800316e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_PCD_EP_Open+0xae>
 8003178:	2302      	movs	r3, #2
 800317a:	e00e      	b.n	800319a <HAL_PCD_EP_Open+0xcc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68f9      	ldr	r1, [r7, #12]
 800318a:	4618      	mov	r0, r3
 800318c:	f001 fb8e 	bl	80048ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003198:	7afb      	ldrb	r3, [r7, #11]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da0f      	bge.n	80031d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	f003 020f 	and.w	r2, r3, #15
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3310      	adds	r3, #16
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	705a      	strb	r2, [r3, #1]
 80031d4:	e00f      	b.n	80031f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	f003 020f 	and.w	r2, r3, #15
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_PCD_EP_Close+0x6e>
 800320c:	2302      	movs	r3, #2
 800320e:	e00e      	b.n	800322e <HAL_PCD_EP_Close+0x8c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	4618      	mov	r0, r3
 8003220:	f001 fbcc 	bl	80049bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	460b      	mov	r3, r1
 8003244:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	b2da      	uxtb	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	799b      	ldrb	r3, [r3, #6]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	799b      	ldrb	r3, [r3, #6]
 800329a:	461a      	mov	r2, r3
 800329c:	6979      	ldr	r1, [r7, #20]
 800329e:	f001 fc69 	bl	8004b74 <USB_EPStartXfer>

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	460b      	mov	r3, r1
 80032ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3310      	adds	r3, #16
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2200      	movs	r2, #0
 8003314:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2201      	movs	r2, #1
 800331a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	b2da      	uxtb	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	799b      	ldrb	r3, [r3, #6]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	799b      	ldrb	r3, [r3, #6]
 800333e:	461a      	mov	r2, r3
 8003340:	6979      	ldr	r1, [r7, #20]
 8003342:	f001 fc17 	bl	8004b74 <USB_EPStartXfer>

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	7912      	ldrb	r2, [r2, #4]
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e04f      	b.n	800340e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800336e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003372:	2b00      	cmp	r3, #0
 8003374:	da0f      	bge.n	8003396 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 020f 	and.w	r2, r3, #15
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	3310      	adds	r3, #16
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	3304      	adds	r3, #4
 800338c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	705a      	strb	r2, [r3, #1]
 8003394:	e00d      	b.n	80033b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_PCD_EP_SetStall+0x82>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e01d      	b.n	800340e <HAL_PCD_EP_SetStall+0xbe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68f9      	ldr	r1, [r7, #12]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 ffa5 	bl	8005330 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7999      	ldrb	r1, [r3, #6]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033fe:	461a      	mov	r2, r3
 8003400:	f002 f996 	bl	8005730 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	7912      	ldrb	r2, [r2, #4]
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e042      	b.n	80034ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003438:	2b00      	cmp	r3, #0
 800343a:	da0f      	bge.n	800345c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3310      	adds	r3, #16
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	3304      	adds	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	705a      	strb	r2, [r3, #1]
 800345a:	e00f      	b.n	800347c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 020f 	and.w	r2, r3, #15
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	3304      	adds	r3, #4
 8003474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_PCD_EP_ClrStall+0x86>
 8003498:	2302      	movs	r3, #2
 800349a:	e00e      	b.n	80034ba <HAL_PCD_EP_ClrStall+0xa4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 ffae 	bl	800540c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da0c      	bge.n	80034f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	3310      	adds	r3, #16
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	3304      	adds	r3, #4
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e00c      	b.n	800350a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	4618      	mov	r0, r3
 8003512:	f001 fdcd 	bl	80050b0 <USB_EPStopXfer>
 8003516:	4603      	mov	r3, r0
 8003518:	72fb      	strb	r3, [r7, #11]

  return ret;
 800351a:	7afb      	ldrb	r3, [r7, #11]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	@ 0x28
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	3310      	adds	r3, #16
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	3304      	adds	r3, #4
 800354a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	429a      	cmp	r2, r3
 8003556:	d901      	bls.n	800355c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e06b      	b.n	8003634 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	429a      	cmp	r2, r3
 8003570:	d902      	bls.n	8003578 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3303      	adds	r3, #3
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003580:	e02a      	b.n	80035d8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	d902      	bls.n	800359e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3303      	adds	r3, #3
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	68d9      	ldr	r1, [r3, #12]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4603      	mov	r3, r0
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f001 fe22 	bl	8005204 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	441a      	add	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	441a      	add	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d809      	bhi.n	8003602 <PCD_WriteEmptyTxFifo+0xde>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d203      	bcs.n	8003602 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1bf      	bne.n	8003582 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	429a      	cmp	r2, r3
 800360c:	d811      	bhi.n	8003632 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	2201      	movs	r2, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	43db      	mvns	r3, r3
 8003628:	6939      	ldr	r1, [r7, #16]
 800362a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800362e:	4013      	ands	r3, r2
 8003630:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	333c      	adds	r3, #60	@ 0x3c
 8003654:	3304      	adds	r3, #4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	799b      	ldrb	r3, [r3, #6]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d17b      	bne.n	800376a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4a61      	ldr	r2, [pc, #388]	@ (8003804 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	f240 80b9 	bls.w	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80b3 	beq.w	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800369e:	461a      	mov	r2, r3
 80036a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036a4:	6093      	str	r3, [r2, #8]
 80036a6:	e0a7      	b.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036be:	461a      	mov	r2, r3
 80036c0:	2320      	movs	r3, #32
 80036c2:	6093      	str	r3, [r2, #8]
 80036c4:	e098      	b.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f040 8093 	bne.w	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003804 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d90f      	bls.n	80036fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036f6:	6093      	str	r3, [r2, #8]
 80036f8:	e07e      	b.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4413      	add	r3, r2
 800370c:	3304      	adds	r3, #4
 800370e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1a      	ldr	r2, [r3, #32]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	0159      	lsls	r1, r3, #5
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	440b      	add	r3, r1
 800371c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003726:	1ad2      	subs	r2, r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d114      	bne.n	800375c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003744:	461a      	mov	r2, r3
 8003746:	2101      	movs	r1, #1
 8003748:	f001 fff2 	bl	8005730 <USB_EP0_OutStart>
 800374c:	e006      	b.n	800375c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	441a      	add	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f004 fad6 	bl	8007d14 <HAL_PCD_DataOutStageCallback>
 8003768:	e046      	b.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	4a26      	ldr	r2, [pc, #152]	@ (8003808 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d124      	bne.n	80037bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003788:	461a      	mov	r2, r3
 800378a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378e:	6093      	str	r3, [r2, #8]
 8003790:	e032      	b.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a8:	461a      	mov	r2, r3
 80037aa:	2320      	movs	r3, #32
 80037ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f004 faad 	bl	8007d14 <HAL_PCD_DataOutStageCallback>
 80037ba:	e01d      	b.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d114      	bne.n	80037ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4413      	add	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d108      	bne.n	80037ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037e4:	461a      	mov	r2, r3
 80037e6:	2100      	movs	r1, #0
 80037e8:	f001 ffa2 	bl	8005730 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f004 fa8e 	bl	8007d14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	4f54300a 	.word	0x4f54300a
 8003808:	4f54310a 	.word	0x4f54310a

0800380c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	333c      	adds	r3, #60	@ 0x3c
 8003824:	3304      	adds	r3, #4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a15      	ldr	r2, [pc, #84]	@ (8003894 <PCD_EP_OutSetupPacket_int+0x88>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d90e      	bls.n	8003860 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003858:	461a      	mov	r2, r3
 800385a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800385e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f004 fa45 	bl	8007cf0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <PCD_EP_OutSetupPacket_int+0x88>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d90c      	bls.n	8003888 <PCD_EP_OutSetupPacket_int+0x7c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	799b      	ldrb	r3, [r3, #6]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d108      	bne.n	8003888 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003880:	461a      	mov	r2, r3
 8003882:	2101      	movs	r1, #1
 8003884:	f001 ff54 	bl	8005730 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	4f54300a 	.word	0x4f54300a

08003898 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	70fb      	strb	r3, [r7, #3]
 80038a4:	4613      	mov	r3, r2
 80038a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d107      	bne.n	80038c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038b6:	883b      	ldrh	r3, [r7, #0]
 80038b8:	0419      	lsls	r1, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038c4:	e028      	b.n	8003918 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4413      	add	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e00d      	b.n	80038f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3340      	adds	r3, #64	@ 0x40
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4413      	add	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	3301      	adds	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3ec      	bcc.n	80038da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003900:	883b      	ldrh	r3, [r7, #0]
 8003902:	0418      	lsls	r0, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	3b01      	subs	r3, #1
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	4302      	orrs	r2, r0
 8003910:	3340      	adds	r3, #64	@ 0x40
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e267      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d075      	beq.n	8003a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800397e:	4b88      	ldr	r3, [pc, #544]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b85      	ldr	r3, [pc, #532]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003992:	2b08      	cmp	r3, #8
 8003994:	d112      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b82      	ldr	r3, [pc, #520]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039a2:	d10b      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d05b      	beq.n	8003a68 <HAL_RCC_OscConfig+0x108>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d157      	bne.n	8003a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e242      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x74>
 80039c6:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x98>
 80039de:	4b70      	ldr	r3, [pc, #448]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6f      	ldr	r2, [pc, #444]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6c      	ldr	r2, [pc, #432]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039f8:	4b69      	ldr	r3, [pc, #420]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b66      	ldr	r3, [pc, #408]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd fea8 	bl	800176c <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fd fea4 	bl	800176c <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e207      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b5b      	ldr	r3, [pc, #364]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0xc0>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fd fe94 	bl	800176c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fd fe90 	bl	800176c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1f3      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	4b51      	ldr	r3, [pc, #324]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0xe8>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b47      	ldr	r3, [pc, #284]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1c7      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4937      	ldr	r1, [pc, #220]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b34      	ldr	r3, [pc, #208]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd fe49 	bl	800176c <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fd fe45 	bl	800176c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1a8      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4925      	ldr	r1, [pc, #148]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fd fe28 	bl	800176c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fd fe24 	bl	800176c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e187      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd fe08 	bl	800176c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fd fe04 	bl	800176c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e167      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x200>
 8003b7e:	e01b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	@ (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fd fdf1 	bl	800176c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e00e      	b.n	8003bac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fd fded 	bl	800176c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d907      	bls.n	8003bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e150      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b88      	ldr	r3, [pc, #544]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ea      	bne.n	8003b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8097 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b81      	ldr	r3, [pc, #516]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b7d      	ldr	r3, [pc, #500]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be6:	4b7a      	ldr	r3, [pc, #488]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b77      	ldr	r3, [pc, #476]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b74      	ldr	r3, [pc, #464]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a73      	ldr	r2, [pc, #460]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd fdad 	bl	800176c <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fd fda9 	bl	800176c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e10c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2ea>
 8003c3c:	4b64      	ldr	r3, [pc, #400]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a63      	ldr	r2, [pc, #396]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x30c>
 8003c52:	4b5f      	ldr	r3, [pc, #380]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4a5e      	ldr	r2, [pc, #376]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c6c:	4b58      	ldr	r3, [pc, #352]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a57      	ldr	r2, [pc, #348]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	4b55      	ldr	r3, [pc, #340]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a54      	ldr	r2, [pc, #336]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fd fd6e 	bl	800176c <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd fd6a 	bl	800176c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0cb      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b49      	ldr	r3, [pc, #292]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x334>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fd58 	bl	800176c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd fd54 	bl	800176c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0b5      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	4a38      	ldr	r2, [pc, #224]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a1 	beq.w	8003e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfe:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d05c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d141      	bne.n	8003d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b31      	ldr	r3, [pc, #196]	@ (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd fd28 	bl	800176c <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd fd24 	bl	800176c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e087      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b27      	ldr	r3, [pc, #156]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	491b      	ldr	r1, [pc, #108]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fcfd 	bl	800176c <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd fcf9 	bl	800176c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e05c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x416>
 8003d94:	e054      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b10      	ldr	r3, [pc, #64]	@ (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fce6 	bl	800176c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fd fce2 	bl	800176c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e045      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x444>
 8003dc2:	e03d      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e038      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d028      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d121      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cc      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b68      	ldr	r3, [pc, #416]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90c      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b65      	ldr	r3, [pc, #404]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e067      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4934      	ldr	r1, [pc, #208]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fd fc14 	bl	800176c <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd fc10 	bl	800176c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e04f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d20c      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f821 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	@ (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	@ (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fd fb74 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	0800be78 	.word	0x0800be78
 8004014:	20000000 	.word	0x20000000
 8004018:	20000004 	.word	0x20000004

0800401c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b090      	sub	sp, #64	@ 0x40
 8004022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004034:	4b59      	ldr	r3, [pc, #356]	@ (800419c <HAL_RCC_GetSysClockFreq+0x180>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d00d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x40>
 8004040:	2b08      	cmp	r3, #8
 8004042:	f200 80a1 	bhi.w	8004188 <HAL_RCC_GetSysClockFreq+0x16c>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x34>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x3a>
 800404e:	e09b      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004052:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004054:	e09b      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004056:	4b53      	ldr	r3, [pc, #332]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004058:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800405a:	e098      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800405c:	4b4f      	ldr	r3, [pc, #316]	@ (800419c <HAL_RCC_GetSysClockFreq+0x180>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004064:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004066:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <HAL_RCC_GetSysClockFreq+0x180>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d028      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b4a      	ldr	r3, [pc, #296]	@ (800419c <HAL_RCC_GetSysClockFreq+0x180>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	2200      	movs	r2, #0
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	627a      	str	r2, [r7, #36]	@ 0x24
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004084:	2100      	movs	r1, #0
 8004086:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004088:	fb03 f201 	mul.w	r2, r3, r1
 800408c:	2300      	movs	r3, #0
 800408e:	fb00 f303 	mul.w	r3, r0, r3
 8004092:	4413      	add	r3, r2
 8004094:	4a43      	ldr	r2, [pc, #268]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004096:	fba0 1202 	umull	r1, r2, r0, r2
 800409a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800409c:	460a      	mov	r2, r1
 800409e:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a2:	4413      	add	r3, r2
 80040a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	2200      	movs	r2, #0
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	61fa      	str	r2, [r7, #28]
 80040ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040b6:	f7fc fdcf 	bl	8000c58 <__aeabi_uldivmod>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4613      	mov	r3, r2
 80040c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c2:	e053      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c4:	4b35      	ldr	r3, [pc, #212]	@ (800419c <HAL_RCC_GetSysClockFreq+0x180>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	2200      	movs	r2, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	617a      	str	r2, [r7, #20]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040d6:	f04f 0b00 	mov.w	fp, #0
 80040da:	4652      	mov	r2, sl
 80040dc:	465b      	mov	r3, fp
 80040de:	f04f 0000 	mov.w	r0, #0
 80040e2:	f04f 0100 	mov.w	r1, #0
 80040e6:	0159      	lsls	r1, r3, #5
 80040e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ec:	0150      	lsls	r0, r2, #5
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	ebb2 080a 	subs.w	r8, r2, sl
 80040f6:	eb63 090b 	sbc.w	r9, r3, fp
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004106:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800410a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800410e:	ebb2 0408 	subs.w	r4, r2, r8
 8004112:	eb63 0509 	sbc.w	r5, r3, r9
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	00eb      	lsls	r3, r5, #3
 8004120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004124:	00e2      	lsls	r2, r4, #3
 8004126:	4614      	mov	r4, r2
 8004128:	461d      	mov	r5, r3
 800412a:	eb14 030a 	adds.w	r3, r4, sl
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	eb45 030b 	adc.w	r3, r5, fp
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004142:	4629      	mov	r1, r5
 8004144:	028b      	lsls	r3, r1, #10
 8004146:	4621      	mov	r1, r4
 8004148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800414c:	4621      	mov	r1, r4
 800414e:	028a      	lsls	r2, r1, #10
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	2200      	movs	r2, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	60fa      	str	r2, [r7, #12]
 800415c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004160:	f7fc fd7a 	bl	8000c58 <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4613      	mov	r3, r2
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800416c:	4b0b      	ldr	r3, [pc, #44]	@ (800419c <HAL_RCC_GetSysClockFreq+0x180>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	3301      	adds	r3, #1
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800417c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004186:	e002      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800418a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800418c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004190:	4618      	mov	r0, r3
 8004192:	3740      	adds	r7, #64	@ 0x40
 8004194:	46bd      	mov	sp, r7
 8004196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	017d7840 	.word	0x017d7840

080041a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ac:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000000 	.word	0x20000000

080041c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c0:	b084      	sub	sp, #16
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	f107 001c 	add.w	r0, r7, #28
 80041ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d123      	bne.n	8004222 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80041ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004202:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f001 fae8 	bl	80057ec <USB_CoreReset>
 800421c:	4603      	mov	r3, r0
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e01b      	b.n	800425a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f001 fadc 	bl	80057ec <USB_CoreReset>
 8004234:	4603      	mov	r3, r0
 8004236:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004238:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	639a      	str	r2, [r3, #56]	@ 0x38
 800424c:	e005      	b.n	800425a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004252:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800425a:	7fbb      	ldrb	r3, [r7, #30]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10b      	bne.n	8004278 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f043 0206 	orr.w	r2, r3, #6
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004284:	b004      	add	sp, #16
 8004286:	4770      	bx	lr

08004288 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d165      	bne.n	8004368 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a41      	ldr	r2, [pc, #260]	@ (80043a4 <USB_SetTurnaroundTime+0x11c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d906      	bls.n	80042b2 <USB_SetTurnaroundTime+0x2a>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a40      	ldr	r2, [pc, #256]	@ (80043a8 <USB_SetTurnaroundTime+0x120>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d202      	bcs.n	80042b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042ac:	230f      	movs	r3, #15
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e062      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4a3c      	ldr	r2, [pc, #240]	@ (80043a8 <USB_SetTurnaroundTime+0x120>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d306      	bcc.n	80042c8 <USB_SetTurnaroundTime+0x40>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4a3b      	ldr	r2, [pc, #236]	@ (80043ac <USB_SetTurnaroundTime+0x124>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d202      	bcs.n	80042c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042c2:	230e      	movs	r3, #14
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e057      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4a38      	ldr	r2, [pc, #224]	@ (80043ac <USB_SetTurnaroundTime+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d306      	bcc.n	80042de <USB_SetTurnaroundTime+0x56>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4a37      	ldr	r2, [pc, #220]	@ (80043b0 <USB_SetTurnaroundTime+0x128>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d202      	bcs.n	80042de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042d8:	230d      	movs	r3, #13
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e04c      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4a33      	ldr	r2, [pc, #204]	@ (80043b0 <USB_SetTurnaroundTime+0x128>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d306      	bcc.n	80042f4 <USB_SetTurnaroundTime+0x6c>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4a32      	ldr	r2, [pc, #200]	@ (80043b4 <USB_SetTurnaroundTime+0x12c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d802      	bhi.n	80042f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80042ee:	230c      	movs	r3, #12
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e041      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	@ (80043b4 <USB_SetTurnaroundTime+0x12c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d906      	bls.n	800430a <USB_SetTurnaroundTime+0x82>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4a2e      	ldr	r2, [pc, #184]	@ (80043b8 <USB_SetTurnaroundTime+0x130>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d802      	bhi.n	800430a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004304:	230b      	movs	r3, #11
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e036      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <USB_SetTurnaroundTime+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d906      	bls.n	8004320 <USB_SetTurnaroundTime+0x98>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <USB_SetTurnaroundTime+0x134>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d802      	bhi.n	8004320 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800431a:	230a      	movs	r3, #10
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	e02b      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4a26      	ldr	r2, [pc, #152]	@ (80043bc <USB_SetTurnaroundTime+0x134>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d906      	bls.n	8004336 <USB_SetTurnaroundTime+0xae>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4a25      	ldr	r2, [pc, #148]	@ (80043c0 <USB_SetTurnaroundTime+0x138>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d202      	bcs.n	8004336 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004330:	2309      	movs	r3, #9
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	e020      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4a21      	ldr	r2, [pc, #132]	@ (80043c0 <USB_SetTurnaroundTime+0x138>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d306      	bcc.n	800434c <USB_SetTurnaroundTime+0xc4>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4a20      	ldr	r2, [pc, #128]	@ (80043c4 <USB_SetTurnaroundTime+0x13c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d802      	bhi.n	800434c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004346:	2308      	movs	r3, #8
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	e015      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4a1d      	ldr	r2, [pc, #116]	@ (80043c4 <USB_SetTurnaroundTime+0x13c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d906      	bls.n	8004362 <USB_SetTurnaroundTime+0xda>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <USB_SetTurnaroundTime+0x140>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d202      	bcs.n	8004362 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800435c:	2307      	movs	r3, #7
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e00a      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004362:	2306      	movs	r3, #6
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e007      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800436e:	2309      	movs	r3, #9
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e001      	b.n	8004378 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004374:	2309      	movs	r3, #9
 8004376:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	029b      	lsls	r3, r3, #10
 800438c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004390:	431a      	orrs	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	00d8acbf 	.word	0x00d8acbf
 80043a8:	00e4e1c0 	.word	0x00e4e1c0
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	01067380 	.word	0x01067380
 80043b4:	011a499f 	.word	0x011a499f
 80043b8:	01312cff 	.word	0x01312cff
 80043bc:	014ca43f 	.word	0x014ca43f
 80043c0:	016e3600 	.word	0x016e3600
 80043c4:	01a6ab1f 	.word	0x01a6ab1f
 80043c8:	01e84800 	.word	0x01e84800

080043cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f043 0201 	orr.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f023 0201 	bic.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d115      	bne.n	800445e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800443e:	200a      	movs	r0, #10
 8004440:	f7fd f9a0 	bl	8001784 <HAL_Delay>
      ms += 10U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	330a      	adds	r3, #10
 8004448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f001 f93f 	bl	80056ce <USB_GetMode>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d01e      	beq.n	8004494 <USB_SetCurrentMode+0x84>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2bc7      	cmp	r3, #199	@ 0xc7
 800445a:	d9f0      	bls.n	800443e <USB_SetCurrentMode+0x2e>
 800445c:	e01a      	b.n	8004494 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d115      	bne.n	8004490 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004470:	200a      	movs	r0, #10
 8004472:	f7fd f987 	bl	8001784 <HAL_Delay>
      ms += 10U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	330a      	adds	r3, #10
 800447a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f001 f926 	bl	80056ce <USB_GetMode>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <USB_SetCurrentMode+0x84>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2bc7      	cmp	r3, #199	@ 0xc7
 800448c:	d9f0      	bls.n	8004470 <USB_SetCurrentMode+0x60>
 800448e:	e001      	b.n	8004494 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e005      	b.n	80044a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2bc8      	cmp	r3, #200	@ 0xc8
 8004498:	d101      	bne.n	800449e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044a8:	b084      	sub	sp, #16
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e009      	b.n	80044dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	3340      	adds	r3, #64	@ 0x40
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	2200      	movs	r2, #0
 80044d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3301      	adds	r3, #1
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b0e      	cmp	r3, #14
 80044e0:	d9f2      	bls.n	80044c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11c      	bne.n	8004524 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38
 8004522:	e00b      	b.n	800453c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004548:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10d      	bne.n	800456c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004558:	2100      	movs	r1, #0
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f968 	bl	8004830 <USB_SetDevSpeed>
 8004560:	e008      	b.n	8004574 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004562:	2101      	movs	r1, #1
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f963 	bl	8004830 <USB_SetDevSpeed>
 800456a:	e003      	b.n	8004574 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800456c:	2103      	movs	r1, #3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f95e 	bl	8004830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004574:	2110      	movs	r1, #16
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8fa 	bl	8004770 <USB_FlushTxFifo>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f924 	bl	80047d4 <USB_FlushRxFifo>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459c:	461a      	mov	r2, r3
 800459e:	2300      	movs	r3, #0
 80045a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a8:	461a      	mov	r2, r3
 80045aa:	2300      	movs	r3, #0
 80045ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	e043      	b.n	8004648 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d6:	d118      	bne.n	800460a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ea:	461a      	mov	r2, r3
 80045ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e013      	b.n	800461c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	e008      	b.n	800461c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004616:	461a      	mov	r2, r3
 8004618:	2300      	movs	r3, #0
 800461a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004640:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3301      	adds	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800464c:	461a      	mov	r2, r3
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4293      	cmp	r3, r2
 8004652:	d3b5      	bcc.n	80045c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e043      	b.n	80046e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800466c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004670:	d118      	bne.n	80046a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e013      	b.n	80046b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e008      	b.n	80046b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	3301      	adds	r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046e6:	461a      	mov	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d3b5      	bcc.n	800465a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004700:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800470e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f043 0210 	orr.w	r2, r3, #16
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	4b10      	ldr	r3, [pc, #64]	@ (800476c <USB_DevInit+0x2c4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004730:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f043 0208 	orr.w	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004744:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004768:	b004      	add	sp, #16
 800476a:	4770      	bx	lr
 800476c:	803c3800 	.word	0x803c3800

08004770 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800478a:	d901      	bls.n	8004790 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e01b      	b.n	80047c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	daf2      	bge.n	800477e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	019b      	lsls	r3, r3, #6
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047b4:	d901      	bls.n	80047ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e006      	b.n	80047c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d0f0      	beq.n	80047a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ec:	d901      	bls.n	80047f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e018      	b.n	8004824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	daf2      	bge.n	80047e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2210      	movs	r2, #16
 8004802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004810:	d901      	bls.n	8004816 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e006      	b.n	8004824 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	f003 0310 	and.w	r3, r3, #16
 800481e:	2b10      	cmp	r3, #16
 8004820:	d0f0      	beq.n	8004804 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0306 	and.w	r3, r3, #6
 800487a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
 8004886:	e00a      	b.n	800489e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d002      	beq.n	8004894 <USB_GetDevSpeed+0x32>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b06      	cmp	r3, #6
 8004892:	d102      	bne.n	800489a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004894:	2302      	movs	r3, #2
 8004896:	75fb      	strb	r3, [r7, #23]
 8004898:	e001      	b.n	800489e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800489a:	230f      	movs	r3, #15
 800489c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800489e:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d13a      	bne.n	800493e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d155      	bne.n	80049ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	791b      	ldrb	r3, [r3, #4]
 800491a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800491c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	059b      	lsls	r3, r3, #22
 8004922:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004924:	4313      	orrs	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e036      	b.n	80049ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800495c:	4313      	orrs	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11a      	bne.n	80049ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	791b      	ldrb	r3, [r3, #4]
 8004990:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004992:	430b      	orrs	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d161      	bne.n	8004a9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049ee:	d11f      	bne.n	8004a30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a50:	4013      	ands	r3, r2
 8004a52:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a74:	4013      	ands	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0159      	lsls	r1, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a92:	4619      	mov	r1, r3
 8004a94:	4b35      	ldr	r3, [pc, #212]	@ (8004b6c <USB_DeactivateEndpoint+0x1b0>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
 8004a9a:	e060      	b.n	8004b5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ab2:	d11f      	bne.n	8004af4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ace:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ad2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004af2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b14:	4013      	ands	r3, r2
 8004b16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	43db      	mvns	r3, r3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	0159      	lsls	r1, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b56:	4619      	mov	r1, r3
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <USB_DeactivateEndpoint+0x1b4>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	ec337800 	.word	0xec337800
 8004b70:	eff37800 	.word	0xeff37800

08004b74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	@ 0x28
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 817f 	bne.w	8004e94 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d132      	bne.n	8004c04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bb8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bbc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	0151      	lsls	r1, r2, #5
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bfc:	0cdb      	lsrs	r3, r3, #19
 8004bfe:	04db      	lsls	r3, r3, #19
 8004c00:	6113      	str	r3, [r2, #16]
 8004c02:	e097      	b.n	8004d34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c1e:	0cdb      	lsrs	r3, r3, #19
 8004c20:	04db      	lsls	r3, r3, #19
 8004c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c46:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11a      	bne.n	8004c84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d903      	bls.n	8004c62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c80:	6113      	str	r3, [r2, #16]
 8004c82:	e044      	b.n	8004d0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	1e5a      	subs	r2, r3, #1
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	8afb      	ldrh	r3, [r7, #22]
 8004caa:	04d9      	lsls	r1, r3, #19
 8004cac:	4ba4      	ldr	r3, [pc, #656]	@ (8004f40 <USB_EPStartXfer+0x3cc>)
 8004cae:	400b      	ands	r3, r1
 8004cb0:	69b9      	ldr	r1, [r7, #24]
 8004cb2:	0148      	lsls	r0, r1, #5
 8004cb4:	69f9      	ldr	r1, [r7, #28]
 8004cb6:	4401      	add	r1, r0
 8004cb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	791b      	ldrb	r3, [r3, #4]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d122      	bne.n	8004d0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004ce6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	8afb      	ldrh	r3, [r7, #22]
 8004cf8:	075b      	lsls	r3, r3, #29
 8004cfa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004cfe:	69b9      	ldr	r1, [r7, #24]
 8004d00:	0148      	lsls	r0, r1, #5
 8004d02:	69f9      	ldr	r1, [r7, #28]
 8004d04:	4401      	add	r1, r0
 8004d06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d24:	69b9      	ldr	r1, [r7, #24]
 8004d26:	0148      	lsls	r0, r1, #5
 8004d28:	69f9      	ldr	r1, [r7, #28]
 8004d2a:	4401      	add	r1, r0
 8004d2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d30:	4313      	orrs	r3, r2
 8004d32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d14b      	bne.n	8004dd2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	791b      	ldrb	r3, [r3, #4]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d128      	bne.n	8004db0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e00f      	b.n	8004db0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e166      	b.n	80050a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004df0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	791b      	ldrb	r3, [r3, #4]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d015      	beq.n	8004e26 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 814e 	beq.w	80050a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	69f9      	ldr	r1, [r7, #28]
 8004e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e20:	4313      	orrs	r3, r2
 8004e22:	634b      	str	r3, [r1, #52]	@ 0x34
 8004e24:	e13c      	b.n	80050a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d110      	bne.n	8004e58 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	0151      	lsls	r1, r2, #5
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e00f      	b.n	8004e78 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	68d9      	ldr	r1, [r3, #12]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	b298      	uxth	r0, r3
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f9b9 	bl	8005204 <USB_WritePacket>
 8004e92:	e105      	b.n	80050a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eae:	0cdb      	lsrs	r3, r3, #19
 8004eb0:	04db      	lsls	r3, r3, #19
 8004eb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ece:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ed2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ed6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d132      	bne.n	8004f44 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	0148      	lsls	r0, r1, #5
 8004f10:	69f9      	ldr	r1, [r7, #28]
 8004f12:	4401      	add	r1, r0
 8004f14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f3a:	6113      	str	r3, [r2, #16]
 8004f3c:	e062      	b.n	8005004 <USB_EPStartXfer+0x490>
 8004f3e:	bf00      	nop
 8004f40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d123      	bne.n	8004f94 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f62:	69b9      	ldr	r1, [r7, #24]
 8004f64:	0148      	lsls	r0, r1, #5
 8004f66:	69f9      	ldr	r1, [r7, #28]
 8004f68:	4401      	add	r1, r0
 8004f6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f90:	6113      	str	r3, [r2, #16]
 8004f92:	e037      	b.n	8005004 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	8afa      	ldrh	r2, [r7, #22]
 8004fb0:	fb03 f202 	mul.w	r2, r3, r2
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	8afb      	ldrh	r3, [r7, #22]
 8004fc8:	04d9      	lsls	r1, r3, #19
 8004fca:	4b38      	ldr	r3, [pc, #224]	@ (80050ac <USB_EPStartXfer+0x538>)
 8004fcc:	400b      	ands	r3, r1
 8004fce:	69b9      	ldr	r1, [r7, #24]
 8004fd0:	0148      	lsls	r0, r1, #5
 8004fd2:	69f9      	ldr	r1, [r7, #28]
 8004fd4:	4401      	add	r1, r0
 8004fd6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff4:	69b9      	ldr	r1, [r7, #24]
 8004ff6:	0148      	lsls	r0, r1, #5
 8004ff8:	69f9      	ldr	r1, [r7, #28]
 8004ffa:	4401      	add	r1, r0
 8004ffc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005000:	4313      	orrs	r3, r2
 8005002:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d10d      	bne.n	8005026 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68d9      	ldr	r1, [r3, #12]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005022:	460a      	mov	r2, r1
 8005024:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	791b      	ldrb	r3, [r3, #4]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d128      	bne.n	8005080 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d110      	bne.n	8005060 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005058:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e00f      	b.n	8005080 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800507a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800509a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800509e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	1ff80000 	.word	0x1ff80000

080050b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d14a      	bne.n	8005164 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e6:	f040 8086 	bne.w	80051f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005108:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800510c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800512c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005130:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3301      	adds	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800513e:	4293      	cmp	r3, r2
 8005140:	d902      	bls.n	8005148 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
          break;
 8005146:	e056      	b.n	80051f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800515c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005160:	d0e7      	beq.n	8005132 <USB_EPStopXfer+0x82>
 8005162:	e048      	b.n	80051f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800517c:	d13b      	bne.n	80051f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	440a      	add	r2, r1
 8005198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800519c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	7812      	ldrb	r2, [r2, #0]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	3301      	adds	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d902      	bls.n	80051dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
          break;
 80051da:	e00c      	b.n	80051f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051f4:	d0e7      	beq.n	80051c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005204:	b480      	push	{r7}
 8005206:	b089      	sub	sp, #36	@ 0x24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	460b      	mov	r3, r1
 8005214:	71fb      	strb	r3, [r7, #7]
 8005216:	4613      	mov	r3, r2
 8005218:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005222:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d123      	bne.n	8005272 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800522a:	88bb      	ldrh	r3, [r7, #4]
 800522c:	3303      	adds	r3, #3
 800522e:	089b      	lsrs	r3, r3, #2
 8005230:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e018      	b.n	800526a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	031a      	lsls	r2, r3, #12
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005244:	461a      	mov	r2, r3
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3301      	adds	r3, #1
 8005256:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	3301      	adds	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	3301      	adds	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	3301      	adds	r3, #1
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	429a      	cmp	r2, r3
 8005270:	d3e2      	bcc.n	8005238 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3724      	adds	r7, #36	@ 0x24
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005280:	b480      	push	{r7}
 8005282:	b08b      	sub	sp, #44	@ 0x2c
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	089b      	lsrs	r3, r3, #2
 800529a:	b29b      	uxth	r3, r3
 800529c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	e014      	b.n	80052d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	3301      	adds	r3, #1
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	3301      	adds	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	3301      	adds	r3, #1
 80052c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	3301      	adds	r3, #1
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	3301      	adds	r3, #1
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	6a3a      	ldr	r2, [r7, #32]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3e6      	bcc.n	80052ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052de:	8bfb      	ldrh	r3, [r7, #30]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01e      	beq.n	8005322 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ee:	461a      	mov	r2, r3
 80052f0:	f107 0310 	add.w	r3, r7, #16
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
 8005304:	b2da      	uxtb	r2, r3
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	701a      	strb	r2, [r3, #0]
      i++;
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	3301      	adds	r3, #1
 800530e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	3301      	adds	r3, #1
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005316:	8bfb      	ldrh	r3, [r7, #30]
 8005318:	3b01      	subs	r3, #1
 800531a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800531c:	8bfb      	ldrh	r3, [r7, #30]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ea      	bne.n	80052f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005324:	4618      	mov	r0, r3
 8005326:	372c      	adds	r7, #44	@ 0x2c
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d12c      	bne.n	80053a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	db12      	blt.n	8005384 <USB_EPSetStall+0x54>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00f      	beq.n	8005384 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005382:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e02b      	b.n	80053fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	db12      	blt.n	80053de <USB_EPSetStall+0xae>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00f      	beq.n	80053de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d128      	bne.n	800547a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005446:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	791b      	ldrb	r3, [r3, #4]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d003      	beq.n	8005458 <USB_EPClearStall+0x4c>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	791b      	ldrb	r3, [r3, #4]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d138      	bne.n	80054ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e027      	b.n	80054ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	0151      	lsls	r1, r2, #5
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	440a      	add	r2, r1
 8005490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005494:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005498:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	791b      	ldrb	r3, [r3, #4]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d003      	beq.n	80054aa <USB_EPClearStall+0x9e>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d10f      	bne.n	80054ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80054fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800550c:	68f9      	ldr	r1, [r7, #12]
 800550e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005552:	f023 0302 	bic.w	r3, r3, #2
 8005556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005580:	f023 0303 	bic.w	r3, r3, #3
 8005584:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005594:	f043 0302 	orr.w	r3, r3, #2
 8005598:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4013      	ands	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055c0:	68fb      	ldr	r3, [r7, #12]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	0c1b      	lsrs	r3, r3, #16
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	b29b      	uxth	r3, r3
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005664:	68bb      	ldr	r3, [r7, #8]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	460b      	mov	r3, r1
 800567c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	01db      	lsls	r3, r3, #7
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4013      	ands	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c0:	68bb      	ldr	r3, [r7, #8]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0301 	and.w	r3, r3, #1
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005704:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005708:	f023 0307 	bic.w	r3, r3, #7
 800570c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800571c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	460b      	mov	r3, r1
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	333c      	adds	r3, #60	@ 0x3c
 8005746:	3304      	adds	r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4a26      	ldr	r2, [pc, #152]	@ (80057e8 <USB_EP0_OutStart+0xb8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d90a      	bls.n	800576a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005764:	d101      	bne.n	800576a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	e037      	b.n	80057da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005770:	461a      	mov	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005784:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005798:	f043 0318 	orr.w	r3, r3, #24
 800579c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80057b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057b2:	7afb      	ldrb	r3, [r7, #11]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d10f      	bne.n	80057d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80057d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	4f54300a 	.word	0x4f54300a

080057ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005804:	d901      	bls.n	800580a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e022      	b.n	8005850 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	daf2      	bge.n	80057f8 <USB_CoreReset+0xc>

  count = 10U;
 8005812:	230a      	movs	r3, #10
 8005814:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005816:	e002      	b.n	800581e <USB_CoreReset+0x32>
  {
    count--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3b01      	subs	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f9      	bne.n	8005818 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f043 0201 	orr.w	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800583c:	d901      	bls.n	8005842 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e006      	b.n	8005850 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	d0f0      	beq.n	8005830 <USB_CoreReset+0x44>

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005868:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800586c:	f002 fcb2 	bl	80081d4 <USBD_static_malloc>
 8005870:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	32b0      	adds	r2, #176	@ 0xb0
 8005882:	2100      	movs	r1, #0
 8005884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005888:	2302      	movs	r3, #2
 800588a:	e0d4      	b.n	8005a36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800588c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005890:	2100      	movs	r1, #0
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f003 fa5f 	bl	8008d56 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	32b0      	adds	r2, #176	@ 0xb0
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	32b0      	adds	r2, #176	@ 0xb0
 80058b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7c1b      	ldrb	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d138      	bne.n	8005936 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058c4:	4b5e      	ldr	r3, [pc, #376]	@ (8005a40 <USBD_CDC_Init+0x1e4>)
 80058c6:	7819      	ldrb	r1, [r3, #0]
 80058c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058cc:	2202      	movs	r2, #2
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f002 fb5d 	bl	8007f8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a40 <USBD_CDC_Init+0x1e4>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	3323      	adds	r3, #35	@ 0x23
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058ee:	4b55      	ldr	r3, [pc, #340]	@ (8005a44 <USBD_CDC_Init+0x1e8>)
 80058f0:	7819      	ldrb	r1, [r3, #0]
 80058f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058f6:	2202      	movs	r2, #2
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 fb48 	bl	8007f8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058fe:	4b51      	ldr	r3, [pc, #324]	@ (8005a44 <USBD_CDC_Init+0x1e8>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005916:	2201      	movs	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800591a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a48 <USBD_CDC_Init+0x1ec>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	331c      	adds	r3, #28
 8005930:	2210      	movs	r2, #16
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e035      	b.n	80059a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005936:	4b42      	ldr	r3, [pc, #264]	@ (8005a40 <USBD_CDC_Init+0x1e4>)
 8005938:	7819      	ldrb	r1, [r3, #0]
 800593a:	2340      	movs	r3, #64	@ 0x40
 800593c:	2202      	movs	r2, #2
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f002 fb25 	bl	8007f8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005944:	4b3e      	ldr	r3, [pc, #248]	@ (8005a40 <USBD_CDC_Init+0x1e4>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f003 020f 	and.w	r2, r3, #15
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	3323      	adds	r3, #35	@ 0x23
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800595e:	4b39      	ldr	r3, [pc, #228]	@ (8005a44 <USBD_CDC_Init+0x1e8>)
 8005960:	7819      	ldrb	r1, [r3, #0]
 8005962:	2340      	movs	r3, #64	@ 0x40
 8005964:	2202      	movs	r2, #2
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f002 fb11 	bl	8007f8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800596c:	4b35      	ldr	r3, [pc, #212]	@ (8005a44 <USBD_CDC_Init+0x1e8>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005984:	2201      	movs	r2, #1
 8005986:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005988:	4b2f      	ldr	r3, [pc, #188]	@ (8005a48 <USBD_CDC_Init+0x1ec>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	331c      	adds	r3, #28
 800599e:	2210      	movs	r2, #16
 80059a0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059a2:	4b29      	ldr	r3, [pc, #164]	@ (8005a48 <USBD_CDC_Init+0x1ec>)
 80059a4:	7819      	ldrb	r1, [r3, #0]
 80059a6:	2308      	movs	r3, #8
 80059a8:	2203      	movs	r2, #3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f002 faef 	bl	8007f8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059b0:	4b25      	ldr	r3, [pc, #148]	@ (8005a48 <USBD_CDC_Init+0x1ec>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3323      	adds	r3, #35	@ 0x23
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	33b0      	adds	r3, #176	@ 0xb0
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a00:	2302      	movs	r3, #2
 8005a02:	e018      	b.n	8005a36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7c1b      	ldrb	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <USBD_CDC_Init+0x1e8>)
 8005a0e:	7819      	ldrb	r1, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f002 fba6 	bl	800816c <USBD_LL_PrepareReceive>
 8005a20:	e008      	b.n	8005a34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a22:	4b08      	ldr	r3, [pc, #32]	@ (8005a44 <USBD_CDC_Init+0x1e8>)
 8005a24:	7819      	ldrb	r1, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a2c:	2340      	movs	r3, #64	@ 0x40
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f002 fb9c 	bl	800816c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000093 	.word	0x20000093
 8005a44:	20000094 	.word	0x20000094
 8005a48:	20000095 	.word	0x20000095

08005a4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a58:	4b3a      	ldr	r3, [pc, #232]	@ (8005b44 <USBD_CDC_DeInit+0xf8>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f002 fabb 	bl	8007fda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a64:	4b37      	ldr	r3, [pc, #220]	@ (8005b44 <USBD_CDC_DeInit+0xf8>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3323      	adds	r3, #35	@ 0x23
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005a7e:	4b32      	ldr	r3, [pc, #200]	@ (8005b48 <USBD_CDC_DeInit+0xfc>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f002 faa8 	bl	8007fda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b48 <USBD_CDC_DeInit+0xfc>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005aa6:	4b29      	ldr	r3, [pc, #164]	@ (8005b4c <USBD_CDC_DeInit+0x100>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f002 fa94 	bl	8007fda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ab2:	4b26      	ldr	r3, [pc, #152]	@ (8005b4c <USBD_CDC_DeInit+0x100>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	3323      	adds	r3, #35	@ 0x23
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005acc:	4b1f      	ldr	r3, [pc, #124]	@ (8005b4c <USBD_CDC_DeInit+0x100>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	331c      	adds	r3, #28
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	32b0      	adds	r2, #176	@ 0xb0
 8005af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01f      	beq.n	8005b38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	33b0      	adds	r3, #176	@ 0xb0
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	32b0      	adds	r2, #176	@ 0xb0
 8005b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 fb68 	bl	80081f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	32b0      	adds	r2, #176	@ 0xb0
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000093 	.word	0x20000093
 8005b48:	20000094 	.word	0x20000094
 8005b4c:	20000095 	.word	0x20000095

08005b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	32b0      	adds	r2, #176	@ 0xb0
 8005b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e0bf      	b.n	8005d00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d050      	beq.n	8005c2e <USBD_CDC_Setup+0xde>
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	f040 80af 	bne.w	8005cf0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	88db      	ldrh	r3, [r3, #6]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d03a      	beq.n	8005c10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b25b      	sxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da1b      	bge.n	8005bdc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	33b0      	adds	r3, #176	@ 0xb0
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005bba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	88d2      	ldrh	r2, [r2, #6]
 8005bc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	88db      	ldrh	r3, [r3, #6]
 8005bc6:	2b07      	cmp	r3, #7
 8005bc8:	bf28      	it	cs
 8005bca:	2307      	movcs	r3, #7
 8005bcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	89fa      	ldrh	r2, [r7, #14]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fda9 	bl	800772c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005bda:	e090      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	785a      	ldrb	r2, [r3, #1]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	88db      	ldrh	r3, [r3, #6]
 8005bea:	2b3f      	cmp	r3, #63	@ 0x3f
 8005bec:	d803      	bhi.n	8005bf6 <USBD_CDC_Setup+0xa6>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	88db      	ldrh	r3, [r3, #6]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	e000      	b.n	8005bf8 <USBD_CDC_Setup+0xa8>
 8005bf6:	2240      	movs	r2, #64	@ 0x40
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005bfe:	6939      	ldr	r1, [r7, #16]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005c06:	461a      	mov	r2, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fdbe 	bl	800778a <USBD_CtlPrepareRx>
      break;
 8005c0e:	e076      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	33b0      	adds	r3, #176	@ 0xb0
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	7850      	ldrb	r0, [r2, #1]
 8005c26:	2200      	movs	r2, #0
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	4798      	blx	r3
      break;
 8005c2c:	e067      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	d851      	bhi.n	8005cda <USBD_CDC_Setup+0x18a>
 8005c36:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <USBD_CDC_Setup+0xec>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c6d 	.word	0x08005c6d
 8005c40:	08005ce9 	.word	0x08005ce9
 8005c44:	08005cdb 	.word	0x08005cdb
 8005c48:	08005cdb 	.word	0x08005cdb
 8005c4c:	08005cdb 	.word	0x08005cdb
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005cdb 	.word	0x08005cdb
 8005c58:	08005cdb 	.word	0x08005cdb
 8005c5c:	08005cdb 	.word	0x08005cdb
 8005c60:	08005cdb 	.word	0x08005cdb
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005cc1 	.word	0x08005cc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d107      	bne.n	8005c88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c78:	f107 030a 	add.w	r3, r7, #10
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fd53 	bl	800772c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c86:	e032      	b.n	8005cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fcd1 	bl	8007632 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	75fb      	strb	r3, [r7, #23]
          break;
 8005c94:	e02b      	b.n	8005cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d107      	bne.n	8005cb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ca2:	f107 030d 	add.w	r3, r7, #13
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fd3e 	bl	800772c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cb0:	e01d      	b.n	8005cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fcbc 	bl	8007632 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005cbe:	e016      	b.n	8005cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d00f      	beq.n	8005cec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 fcaf 	bl	8007632 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cd8:	e008      	b.n	8005cec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fca8 	bl	8007632 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ce6:	e002      	b.n	8005cee <USBD_CDC_Setup+0x19e>
          break;
 8005ce8:	bf00      	nop
 8005cea:	e008      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>
          break;
 8005cec:	bf00      	nop
      }
      break;
 8005cee:	e006      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 fc9d 	bl	8007632 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfc:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005d1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	32b0      	adds	r2, #176	@ 0xb0
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e065      	b.n	8005dfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	32b0      	adds	r2, #176	@ 0xb0
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	f003 020f 	and.w	r2, r3, #15
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3314      	adds	r3, #20
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02f      	beq.n	8005dbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	f003 020f 	and.w	r2, r3, #15
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3314      	adds	r3, #20
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 010f 	and.w	r1, r3, #15
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	440b      	add	r3, r1
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4403      	add	r3, r0
 8005d84:	331c      	adds	r3, #28
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d112      	bne.n	8005dbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	f003 020f 	and.w	r2, r3, #15
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3314      	adds	r3, #20
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dae:	78f9      	ldrb	r1, [r7, #3]
 8005db0:	2300      	movs	r3, #0
 8005db2:	2200      	movs	r2, #0
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 f9b8 	bl	800812a <USBD_LL_Transmit>
 8005dba:	e01f      	b.n	8005dfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	33b0      	adds	r3, #176	@ 0xb0
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	33b0      	adds	r3, #176	@ 0xb0
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	32b0      	adds	r2, #176	@ 0xb0
 8005e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32b0      	adds	r2, #176	@ 0xb0
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e01a      	b.n	8005e6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f002 f9b6 	bl	80081ae <USBD_LL_GetRxDataSize>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	33b0      	adds	r3, #176	@ 0xb0
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005e68:	4611      	mov	r1, r2
 8005e6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	32b0      	adds	r2, #176	@ 0xb0
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e024      	b.n	8005ee2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	33b0      	adds	r3, #176	@ 0xb0
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d019      	beq.n	8005ee0 <USBD_CDC_EP0_RxReady+0x6a>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005eb2:	2bff      	cmp	r3, #255	@ 0xff
 8005eb4:	d014      	beq.n	8005ee0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	33b0      	adds	r3, #176	@ 0xb0
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005ece:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ed6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	22ff      	movs	r2, #255	@ 0xff
 8005edc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ef4:	2182      	movs	r1, #130	@ 0x82
 8005ef6:	4818      	ldr	r0, [pc, #96]	@ (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ef8:	f000 fd62 	bl	80069c0 <USBD_GetEpDesc>
 8005efc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005efe:	2101      	movs	r1, #1
 8005f00:	4815      	ldr	r0, [pc, #84]	@ (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f02:	f000 fd5d 	bl	80069c0 <USBD_GetEpDesc>
 8005f06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f08:	2181      	movs	r1, #129	@ 0x81
 8005f0a:	4813      	ldr	r0, [pc, #76]	@ (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f0c:	f000 fd58 	bl	80069c0 <USBD_GetEpDesc>
 8005f10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d006      	beq.n	8005f32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f2c:	711a      	strb	r2, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d006      	beq.n	8005f46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f40:	711a      	strb	r2, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2243      	movs	r2, #67	@ 0x43
 8005f4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f4c:	4b02      	ldr	r3, [pc, #8]	@ (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000050 	.word	0x20000050

08005f5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f64:	2182      	movs	r1, #130	@ 0x82
 8005f66:	4818      	ldr	r0, [pc, #96]	@ (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f68:	f000 fd2a 	bl	80069c0 <USBD_GetEpDesc>
 8005f6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4815      	ldr	r0, [pc, #84]	@ (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f72:	f000 fd25 	bl	80069c0 <USBD_GetEpDesc>
 8005f76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f78:	2181      	movs	r1, #129	@ 0x81
 8005f7a:	4813      	ldr	r0, [pc, #76]	@ (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f7c:	f000 fd20 	bl	80069c0 <USBD_GetEpDesc>
 8005f80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d006      	beq.n	8005fa2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2200      	movs	r2, #0
 8005f98:	711a      	strb	r2, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f042 0202 	orr.w	r2, r2, #2
 8005fa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d006      	beq.n	8005fb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	711a      	strb	r2, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f042 0202 	orr.w	r2, r2, #2
 8005fb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2243      	movs	r2, #67	@ 0x43
 8005fba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fbc:	4b02      	ldr	r3, [pc, #8]	@ (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000050 	.word	0x20000050

08005fcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fd4:	2182      	movs	r1, #130	@ 0x82
 8005fd6:	4818      	ldr	r0, [pc, #96]	@ (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fd8:	f000 fcf2 	bl	80069c0 <USBD_GetEpDesc>
 8005fdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4815      	ldr	r0, [pc, #84]	@ (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fe2:	f000 fced 	bl	80069c0 <USBD_GetEpDesc>
 8005fe6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fe8:	2181      	movs	r1, #129	@ 0x81
 8005fea:	4813      	ldr	r0, [pc, #76]	@ (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fec:	f000 fce8 	bl	80069c0 <USBD_GetEpDesc>
 8005ff0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2200      	movs	r2, #0
 8006008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800600c:	711a      	strb	r2, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006020:	711a      	strb	r2, [r3, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2243      	movs	r2, #67	@ 0x43
 800602a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800602c:	4b02      	ldr	r3, [pc, #8]	@ (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000050 	.word	0x20000050

0800603c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	220a      	movs	r2, #10
 8006048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800604a:	4b03      	ldr	r3, [pc, #12]	@ (8006058 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	2000000c 	.word	0x2000000c

0800605c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800606c:	2303      	movs	r3, #3
 800606e:	e009      	b.n	8006084 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	33b0      	adds	r3, #176	@ 0xb0
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	32b0      	adds	r2, #176	@ 0xb0
 80060a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e008      	b.n	80060c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	32b0      	adds	r2, #176	@ 0xb0
 80060e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e004      	b.n	8006102 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32b0      	adds	r2, #176	@ 0xb0
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006132:	2303      	movs	r3, #3
 8006134:	e025      	b.n	8006182 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800613c:	2b00      	cmp	r3, #0
 800613e:	d11f      	bne.n	8006180 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2201      	movs	r2, #1
 8006144:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006148:	4b10      	ldr	r3, [pc, #64]	@ (800618c <USBD_CDC_TransmitPacket+0x7c>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4403      	add	r3, r0
 8006162:	3314      	adds	r3, #20
 8006164:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006166:	4b09      	ldr	r3, [pc, #36]	@ (800618c <USBD_CDC_TransmitPacket+0x7c>)
 8006168:	7819      	ldrb	r1, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 ffd7 	bl	800812a <USBD_LL_Transmit>

    ret = USBD_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000093 	.word	0x20000093

08006190 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	32b0      	adds	r2, #176	@ 0xb0
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	32b0      	adds	r2, #176	@ 0xb0
 80061b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e018      	b.n	80061f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7c1b      	ldrb	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061c6:	4b0c      	ldr	r3, [pc, #48]	@ (80061f8 <USBD_CDC_ReceivePacket+0x68>)
 80061c8:	7819      	ldrb	r1, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 ffc9 	bl	800816c <USBD_LL_PrepareReceive>
 80061da:	e008      	b.n	80061ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061dc:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <USBD_CDC_ReceivePacket+0x68>)
 80061de:	7819      	ldrb	r1, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061e6:	2340      	movs	r3, #64	@ 0x40
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 ffbf 	bl	800816c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000094 	.word	0x20000094

080061fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006210:	2303      	movs	r3, #3
 8006212:	e01f      	b.n	8006254 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	79fa      	ldrb	r2, [r7, #7]
 8006246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f001 fe39 	bl	8007ec0 <USBD_LL_Init>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	e025      	b.n	80062c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32ae      	adds	r2, #174	@ 0xae
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00f      	beq.n	80062b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	32ae      	adds	r2, #174	@ 0xae
 800629a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	f107 020e 	add.w	r2, r7, #14
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	4602      	mov	r2, r0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fe41 	bl	8007f58 <USBD_LL_Start>
 80062d6:	4603      	mov	r3, r0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	4611      	mov	r1, r2
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	78fa      	ldrb	r2, [r7, #3]
 8006348:	4611      	mov	r1, r2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f001 f922 	bl	80075be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b02      	cmp	r3, #2
 800639c:	d01a      	beq.n	80063d4 <USBD_LL_SetupStage+0x72>
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d822      	bhi.n	80063e8 <USBD_LL_SetupStage+0x86>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <USBD_LL_SetupStage+0x4a>
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d00a      	beq.n	80063c0 <USBD_LL_SetupStage+0x5e>
 80063aa:	e01d      	b.n	80063e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fb77 	bl	8006aa8 <USBD_StdDevReq>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]
      break;
 80063be:	e020      	b.n	8006402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fbdf 	bl	8006b8c <USBD_StdItfReq>
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]
      break;
 80063d2:	e016      	b.n	8006402 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fc41 	bl	8006c64 <USBD_StdEPReq>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73fb      	strb	r3, [r7, #15]
      break;
 80063e6:	e00c      	b.n	8006402 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fe0e 	bl	8008018 <USBD_LL_StallEP>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	bf00      	nop
  }

  return ret;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	460b      	mov	r3, r1
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d177      	bne.n	8006514 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800642a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006432:	2b03      	cmp	r3, #3
 8006434:	f040 80a1 	bne.w	800657a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	8992      	ldrh	r2, [r2, #12]
 8006440:	4293      	cmp	r3, r2
 8006442:	d91c      	bls.n	800647e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	8992      	ldrh	r2, [r2, #12]
 800644c:	1a9a      	subs	r2, r3, r2
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	8992      	ldrh	r2, [r2, #12]
 800645a:	441a      	add	r2, r3
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	6919      	ldr	r1, [r3, #16]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	899b      	ldrh	r3, [r3, #12]
 8006468:	461a      	mov	r2, r3
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4293      	cmp	r3, r2
 8006470:	bf38      	it	cc
 8006472:	4613      	movcc	r3, r2
 8006474:	461a      	mov	r2, r3
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f001 f9a8 	bl	80077cc <USBD_CtlContinueRx>
 800647c:	e07d      	b.n	800657a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2b02      	cmp	r3, #2
 800648a:	d014      	beq.n	80064b6 <USBD_LL_DataOutStage+0xaa>
 800648c:	2b02      	cmp	r3, #2
 800648e:	d81d      	bhi.n	80064cc <USBD_LL_DataOutStage+0xc0>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <USBD_LL_DataOutStage+0x8e>
 8006494:	2b01      	cmp	r3, #1
 8006496:	d003      	beq.n	80064a0 <USBD_LL_DataOutStage+0x94>
 8006498:	e018      	b.n	80064cc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	75bb      	strb	r3, [r7, #22]
            break;
 800649e:	e018      	b.n	80064d2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fa6e 	bl	800698c <USBD_CoreFindIF>
 80064b0:	4603      	mov	r3, r0
 80064b2:	75bb      	strb	r3, [r7, #22]
            break;
 80064b4:	e00d      	b.n	80064d2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fa70 	bl	80069a6 <USBD_CoreFindEP>
 80064c6:	4603      	mov	r3, r0
 80064c8:	75bb      	strb	r3, [r7, #22]
            break;
 80064ca:	e002      	b.n	80064d2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	75bb      	strb	r3, [r7, #22]
            break;
 80064d0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80064d2:	7dbb      	ldrb	r3, [r7, #22]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d119      	bne.n	800650c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d113      	bne.n	800650c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80064e4:	7dba      	ldrb	r2, [r7, #22]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	32ae      	adds	r2, #174	@ 0xae
 80064ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80064f4:	7dba      	ldrb	r2, [r7, #22]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80064fc:	7dba      	ldrb	r2, [r7, #22]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	32ae      	adds	r2, #174	@ 0xae
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 f96e 	bl	80077ee <USBD_CtlSendStatus>
 8006512:	e032      	b.n	800657a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800651a:	b2db      	uxtb	r3, r3
 800651c:	4619      	mov	r1, r3
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fa41 	bl	80069a6 <USBD_CoreFindEP>
 8006524:	4603      	mov	r3, r0
 8006526:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006528:	7dbb      	ldrb	r3, [r7, #22]
 800652a:	2bff      	cmp	r3, #255	@ 0xff
 800652c:	d025      	beq.n	800657a <USBD_LL_DataOutStage+0x16e>
 800652e:	7dbb      	ldrb	r3, [r7, #22]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d122      	bne.n	800657a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b03      	cmp	r3, #3
 800653e:	d117      	bne.n	8006570 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006540:	7dba      	ldrb	r2, [r7, #22]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	32ae      	adds	r2, #174	@ 0xae
 8006546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00f      	beq.n	8006570 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006550:	7dba      	ldrb	r2, [r7, #22]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006558:	7dba      	ldrb	r2, [r7, #22]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	32ae      	adds	r2, #174	@ 0xae
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	7afa      	ldrb	r2, [r7, #11]
 8006566:	4611      	mov	r1, r2
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	4798      	blx	r3
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
 8006578:	e000      	b.n	800657c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	460b      	mov	r3, r1
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d178      	bne.n	800668a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3314      	adds	r3, #20
 800659c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d163      	bne.n	8006670 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	8992      	ldrh	r2, [r2, #12]
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d91c      	bls.n	80065ee <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	8992      	ldrh	r2, [r2, #12]
 80065bc:	1a9a      	subs	r2, r3, r2
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	8992      	ldrh	r2, [r2, #12]
 80065ca:	441a      	add	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	6919      	ldr	r1, [r3, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	461a      	mov	r2, r3
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f001 f8c4 	bl	8007768 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065e0:	2300      	movs	r3, #0
 80065e2:	2200      	movs	r2, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f001 fdc0 	bl	800816c <USBD_LL_PrepareReceive>
 80065ec:	e040      	b.n	8006670 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	899b      	ldrh	r3, [r3, #12]
 80065f2:	461a      	mov	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d11c      	bne.n	8006636 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006604:	4293      	cmp	r3, r2
 8006606:	d316      	bcc.n	8006636 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006612:	429a      	cmp	r2, r3
 8006614:	d20f      	bcs.n	8006636 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006616:	2200      	movs	r2, #0
 8006618:	2100      	movs	r1, #0
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f001 f8a4 	bl	8007768 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006628:	2300      	movs	r3, #0
 800662a:	2200      	movs	r2, #0
 800662c:	2100      	movs	r1, #0
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f001 fd9c 	bl	800816c <USBD_LL_PrepareReceive>
 8006634:	e01c      	b.n	8006670 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b03      	cmp	r3, #3
 8006640:	d10f      	bne.n	8006662 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006662:	2180      	movs	r1, #128	@ 0x80
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f001 fcd7 	bl	8008018 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f001 f8d2 	bl	8007814 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d03a      	beq.n	80066f0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff fe30 	bl	80062e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006688:	e032      	b.n	80066f0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f986 	bl	80069a6 <USBD_CoreFindEP>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	2bff      	cmp	r3, #255	@ 0xff
 80066a2:	d025      	beq.n	80066f0 <USBD_LL_DataInStage+0x16c>
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d122      	bne.n	80066f0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d11c      	bne.n	80066f0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066b6:	7dfa      	ldrb	r2, [r7, #23]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	32ae      	adds	r2, #174	@ 0xae
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d014      	beq.n	80066f0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80066c6:	7dfa      	ldrb	r2, [r7, #23]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80066ce:	7dfa      	ldrb	r2, [r7, #23]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	32ae      	adds	r2, #174	@ 0xae
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	7afa      	ldrb	r2, [r7, #11]
 80066dc:	4611      	mov	r1, r2
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	4798      	blx	r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80066e6:	7dbb      	ldrb	r3, [r7, #22]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80066ec:	7dbb      	ldrb	r3, [r7, #22]
 80066ee:	e000      	b.n	80066f2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d014      	beq.n	8006760 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00e      	beq.n	8006760 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6852      	ldr	r2, [r2, #4]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	4611      	mov	r1, r2
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006760:	2340      	movs	r3, #64	@ 0x40
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fc11 	bl	8007f8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2240      	movs	r2, #64	@ 0x40
 8006778:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800677c:	2340      	movs	r3, #64	@ 0x40
 800677e:	2200      	movs	r2, #0
 8006780:	2180      	movs	r1, #128	@ 0x80
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fc03 	bl	8007f8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2240      	movs	r2, #64	@ 0x40
 8006794:	841a      	strh	r2, [r3, #32]

  return ret;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d006      	beq.n	80067e2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2204      	movs	r2, #4
 80067e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b04      	cmp	r3, #4
 800680a:	d106      	bne.n	800681a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006812:	b2da      	uxtb	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b03      	cmp	r3, #3
 800683a:	d110      	bne.n	800685e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	32ae      	adds	r2, #174	@ 0xae
 800687e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006886:	2303      	movs	r3, #3
 8006888:	e01c      	b.n	80068c4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b03      	cmp	r3, #3
 8006894:	d115      	bne.n	80068c2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	32ae      	adds	r2, #174	@ 0xae
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32ae      	adds	r2, #174	@ 0xae
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	4611      	mov	r1, r2
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	32ae      	adds	r2, #174	@ 0xae
 80068e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e01c      	b.n	8006928 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d115      	bne.n	8006926 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	32ae      	adds	r2, #174	@ 0xae
 8006904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	32ae      	adds	r2, #174	@ 0xae
 8006918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	4611      	mov	r1, r2
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00e      	beq.n	8006982 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6852      	ldr	r2, [r2, #4]
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	4611      	mov	r1, r2
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800697e:	2303      	movs	r3, #3
 8006980:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006998:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	885b      	ldrh	r3, [r3, #2]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d91f      	bls.n	8006a26 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80069ec:	e013      	b.n	8006a16 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80069ee:	f107 030a 	add.w	r3, r7, #10
 80069f2:	4619      	mov	r1, r3
 80069f4:	6978      	ldr	r0, [r7, #20]
 80069f6:	f000 f81b 	bl	8006a30 <USBD_GetNextDesc>
 80069fa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	d108      	bne.n	8006a16 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	789b      	ldrb	r3, [r3, #2]
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d008      	beq.n	8006a24 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	885b      	ldrh	r3, [r3, #2]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	897b      	ldrh	r3, [r7, #10]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d8e5      	bhi.n	80069ee <USBD_GetEpDesc+0x2e>
 8006a22:	e000      	b.n	8006a26 <USBD_GetEpDesc+0x66>
          break;
 8006a24:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a26:	693b      	ldr	r3, [r7, #16]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	7812      	ldrb	r2, [r2, #0]
 8006a46:	4413      	add	r3, r2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4413      	add	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	b21a      	sxth	r2, r3
 8006a8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	b21b      	sxth	r3, r3
 8006a96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a98:	89fb      	ldrh	r3, [r7, #14]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006abe:	2b40      	cmp	r3, #64	@ 0x40
 8006ac0:	d005      	beq.n	8006ace <USBD_StdDevReq+0x26>
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d857      	bhi.n	8006b76 <USBD_StdDevReq+0xce>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00f      	beq.n	8006aea <USBD_StdDevReq+0x42>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d153      	bne.n	8006b76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	32ae      	adds	r2, #174	@ 0xae
 8006ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae8:	e04a      	b.n	8006b80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2b09      	cmp	r3, #9
 8006af0:	d83b      	bhi.n	8006b6a <USBD_StdDevReq+0xc2>
 8006af2:	a201      	add	r2, pc, #4	@ (adr r2, 8006af8 <USBD_StdDevReq+0x50>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006b61 	.word	0x08006b61
 8006b00:	08006b6b 	.word	0x08006b6b
 8006b04:	08006b57 	.word	0x08006b57
 8006b08:	08006b6b 	.word	0x08006b6b
 8006b0c:	08006b2b 	.word	0x08006b2b
 8006b10:	08006b21 	.word	0x08006b21
 8006b14:	08006b6b 	.word	0x08006b6b
 8006b18:	08006b43 	.word	0x08006b43
 8006b1c:	08006b35 	.word	0x08006b35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa3e 	bl	8006fa4 <USBD_GetDescriptor>
          break;
 8006b28:	e024      	b.n	8006b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fba3 	bl	8007278 <USBD_SetAddress>
          break;
 8006b32:	e01f      	b.n	8006b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fbe2 	bl	8007300 <USBD_SetConfig>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
          break;
 8006b40:	e018      	b.n	8006b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fc85 	bl	8007454 <USBD_GetConfig>
          break;
 8006b4a:	e013      	b.n	8006b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fcb6 	bl	80074c0 <USBD_GetStatus>
          break;
 8006b54:	e00e      	b.n	8006b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fce5 	bl	8007528 <USBD_SetFeature>
          break;
 8006b5e:	e009      	b.n	8006b74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fd09 	bl	800757a <USBD_ClrFeature>
          break;
 8006b68:	e004      	b.n	8006b74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fd60 	bl	8007632 <USBD_CtlError>
          break;
 8006b72:	bf00      	nop
      }
      break;
 8006b74:	e004      	b.n	8006b80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fd5a 	bl	8007632 <USBD_CtlError>
      break;
 8006b7e:	bf00      	nop
  }

  return ret;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop

08006b8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ba2:	2b40      	cmp	r3, #64	@ 0x40
 8006ba4:	d005      	beq.n	8006bb2 <USBD_StdItfReq+0x26>
 8006ba6:	2b40      	cmp	r3, #64	@ 0x40
 8006ba8:	d852      	bhi.n	8006c50 <USBD_StdItfReq+0xc4>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <USBD_StdItfReq+0x26>
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d14e      	bne.n	8006c50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d840      	bhi.n	8006c42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	889b      	ldrh	r3, [r3, #4]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d836      	bhi.n	8006c38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	889b      	ldrh	r3, [r3, #4]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff feda 	bl	800698c <USBD_CoreFindIF>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2bff      	cmp	r3, #255	@ 0xff
 8006be0:	d01d      	beq.n	8006c1e <USBD_StdItfReq+0x92>
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11a      	bne.n	8006c1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006be8:	7bba      	ldrb	r2, [r7, #14]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	32ae      	adds	r2, #174	@ 0xae
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00f      	beq.n	8006c18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006bf8:	7bba      	ldrb	r2, [r7, #14]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c00:	7bba      	ldrb	r2, [r7, #14]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	32ae      	adds	r2, #174	@ 0xae
 8006c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c16:	e004      	b.n	8006c22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c1c:	e001      	b.n	8006c22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	88db      	ldrh	r3, [r3, #6]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d110      	bne.n	8006c4c <USBD_StdItfReq+0xc0>
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10d      	bne.n	8006c4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fddc 	bl	80077ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c36:	e009      	b.n	8006c4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fcf9 	bl	8007632 <USBD_CtlError>
          break;
 8006c40:	e004      	b.n	8006c4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fcf4 	bl	8007632 <USBD_CtlError>
          break;
 8006c4a:	e000      	b.n	8006c4e <USBD_StdItfReq+0xc2>
          break;
 8006c4c:	bf00      	nop
      }
      break;
 8006c4e:	e004      	b.n	8006c5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fced 	bl	8007632 <USBD_CtlError>
      break;
 8006c58:	bf00      	nop
  }

  return ret;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	889b      	ldrh	r3, [r3, #4]
 8006c76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006c80:	2b40      	cmp	r3, #64	@ 0x40
 8006c82:	d007      	beq.n	8006c94 <USBD_StdEPReq+0x30>
 8006c84:	2b40      	cmp	r3, #64	@ 0x40
 8006c86:	f200 8181 	bhi.w	8006f8c <USBD_StdEPReq+0x328>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d02a      	beq.n	8006ce4 <USBD_StdEPReq+0x80>
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	f040 817c 	bne.w	8006f8c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff fe84 	bl	80069a6 <USBD_CoreFindEP>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ca2:	7b7b      	ldrb	r3, [r7, #13]
 8006ca4:	2bff      	cmp	r3, #255	@ 0xff
 8006ca6:	f000 8176 	beq.w	8006f96 <USBD_StdEPReq+0x332>
 8006caa:	7b7b      	ldrb	r3, [r7, #13]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 8172 	bne.w	8006f96 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006cb2:	7b7a      	ldrb	r2, [r7, #13]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cba:	7b7a      	ldrb	r2, [r7, #13]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	32ae      	adds	r2, #174	@ 0xae
 8006cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 8165 	beq.w	8006f96 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ccc:	7b7a      	ldrb	r2, [r7, #13]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	32ae      	adds	r2, #174	@ 0xae
 8006cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ce2:	e158      	b.n	8006f96 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d008      	beq.n	8006cfe <USBD_StdEPReq+0x9a>
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	f300 8147 	bgt.w	8006f80 <USBD_StdEPReq+0x31c>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 809b 	beq.w	8006e2e <USBD_StdEPReq+0x1ca>
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d03c      	beq.n	8006d76 <USBD_StdEPReq+0x112>
 8006cfc:	e140      	b.n	8006f80 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d002      	beq.n	8006d10 <USBD_StdEPReq+0xac>
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d016      	beq.n	8006d3c <USBD_StdEPReq+0xd8>
 8006d0e:	e02c      	b.n	8006d6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00d      	beq.n	8006d32 <USBD_StdEPReq+0xce>
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	2b80      	cmp	r3, #128	@ 0x80
 8006d1a:	d00a      	beq.n	8006d32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f979 	bl	8008018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d26:	2180      	movs	r1, #128	@ 0x80
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 f975 	bl	8008018 <USBD_LL_StallEP>
 8006d2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d30:	e020      	b.n	8006d74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fc7c 	bl	8007632 <USBD_CtlError>
              break;
 8006d3a:	e01b      	b.n	8006d74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	885b      	ldrh	r3, [r3, #2]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10e      	bne.n	8006d62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00b      	beq.n	8006d62 <USBD_StdEPReq+0xfe>
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b80      	cmp	r3, #128	@ 0x80
 8006d4e:	d008      	beq.n	8006d62 <USBD_StdEPReq+0xfe>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	88db      	ldrh	r3, [r3, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d104      	bne.n	8006d62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 f95b 	bl	8008018 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fd43 	bl	80077ee <USBD_CtlSendStatus>

              break;
 8006d68:	e004      	b.n	8006d74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fc60 	bl	8007632 <USBD_CtlError>
              break;
 8006d72:	bf00      	nop
          }
          break;
 8006d74:	e109      	b.n	8006f8a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d002      	beq.n	8006d88 <USBD_StdEPReq+0x124>
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d016      	beq.n	8006db4 <USBD_StdEPReq+0x150>
 8006d86:	e04b      	b.n	8006e20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00d      	beq.n	8006daa <USBD_StdEPReq+0x146>
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b80      	cmp	r3, #128	@ 0x80
 8006d92:	d00a      	beq.n	8006daa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 f93d 	bl	8008018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f939 	bl	8008018 <USBD_LL_StallEP>
 8006da6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006da8:	e040      	b.n	8006e2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fc40 	bl	8007632 <USBD_CtlError>
              break;
 8006db2:	e03b      	b.n	8006e2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	885b      	ldrh	r3, [r3, #2]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d136      	bne.n	8006e2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 f943 	bl	8008056 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fd0c 	bl	80077ee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fde3 	bl	80069a6 <USBD_CoreFindEP>
 8006de0:	4603      	mov	r3, r0
 8006de2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006de4:	7b7b      	ldrb	r3, [r7, #13]
 8006de6:	2bff      	cmp	r3, #255	@ 0xff
 8006de8:	d01f      	beq.n	8006e2a <USBD_StdEPReq+0x1c6>
 8006dea:	7b7b      	ldrb	r3, [r7, #13]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11c      	bne.n	8006e2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006df0:	7b7a      	ldrb	r2, [r7, #13]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006df8:	7b7a      	ldrb	r2, [r7, #13]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32ae      	adds	r2, #174	@ 0xae
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e08:	7b7a      	ldrb	r2, [r7, #13]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	32ae      	adds	r2, #174	@ 0xae
 8006e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e1e:	e004      	b.n	8006e2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fc05 	bl	8007632 <USBD_CtlError>
              break;
 8006e28:	e000      	b.n	8006e2c <USBD_StdEPReq+0x1c8>
              break;
 8006e2a:	bf00      	nop
          }
          break;
 8006e2c:	e0ad      	b.n	8006f8a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d002      	beq.n	8006e40 <USBD_StdEPReq+0x1dc>
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d033      	beq.n	8006ea6 <USBD_StdEPReq+0x242>
 8006e3e:	e099      	b.n	8006f74 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <USBD_StdEPReq+0x1f2>
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	2b80      	cmp	r3, #128	@ 0x80
 8006e4a:	d004      	beq.n	8006e56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fbef 	bl	8007632 <USBD_CtlError>
                break;
 8006e54:	e093      	b.n	8006f7e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	da0b      	bge.n	8006e76 <USBD_StdEPReq+0x212>
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	3310      	adds	r3, #16
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	3304      	adds	r3, #4
 8006e74:	e00b      	b.n	8006e8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	330e      	adds	r3, #14
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fc44 	bl	800772c <USBD_CtlSendData>
              break;
 8006ea4:	e06b      	b.n	8006f7e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da11      	bge.n	8006ed2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3323      	adds	r3, #35	@ 0x23
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d117      	bne.n	8006ef8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fbb1 	bl	8007632 <USBD_CtlError>
                  break;
 8006ed0:	e055      	b.n	8006f7e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	f003 020f 	and.w	r2, r3, #15
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fb9e 	bl	8007632 <USBD_CtlError>
                  break;
 8006ef6:	e042      	b.n	8006f7e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da0b      	bge.n	8006f18 <USBD_StdEPReq+0x2b4>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	3310      	adds	r3, #16
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	3304      	adds	r3, #4
 8006f16:	e00b      	b.n	8006f30 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3304      	adds	r3, #4
 8006f30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <USBD_StdEPReq+0x2da>
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	2b80      	cmp	r3, #128	@ 0x80
 8006f3c:	d103      	bne.n	8006f46 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2200      	movs	r2, #0
 8006f42:	739a      	strb	r2, [r3, #14]
 8006f44:	e00e      	b.n	8006f64 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 f8a2 	bl	8008094 <USBD_LL_IsStallEP>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	739a      	strb	r2, [r3, #14]
 8006f5c:	e002      	b.n	8006f64 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	330e      	adds	r3, #14
 8006f68:	2202      	movs	r2, #2
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fbdd 	bl	800772c <USBD_CtlSendData>
              break;
 8006f72:	e004      	b.n	8006f7e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fb5b 	bl	8007632 <USBD_CtlError>
              break;
 8006f7c:	bf00      	nop
          }
          break;
 8006f7e:	e004      	b.n	8006f8a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fb55 	bl	8007632 <USBD_CtlError>
          break;
 8006f88:	bf00      	nop
      }
      break;
 8006f8a:	e005      	b.n	8006f98 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fb4f 	bl	8007632 <USBD_CtlError>
      break;
 8006f94:	e000      	b.n	8006f98 <USBD_StdEPReq+0x334>
      break;
 8006f96:	bf00      	nop
  }

  return ret;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	885b      	ldrh	r3, [r3, #2]
 8006fbe:	0a1b      	lsrs	r3, r3, #8
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b06      	cmp	r3, #6
 8006fc6:	f200 8128 	bhi.w	800721a <USBD_GetDescriptor+0x276>
 8006fca:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <USBD_GetDescriptor+0x2c>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006fed 	.word	0x08006fed
 8006fd4:	08007005 	.word	0x08007005
 8006fd8:	08007045 	.word	0x08007045
 8006fdc:	0800721b 	.word	0x0800721b
 8006fe0:	0800721b 	.word	0x0800721b
 8006fe4:	080071bb 	.word	0x080071bb
 8006fe8:	080071e7 	.word	0x080071e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7c12      	ldrb	r2, [r2, #16]
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
 8007000:	60f8      	str	r0, [r7, #12]
      break;
 8007002:	e112      	b.n	800722a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7c1b      	ldrb	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	f107 0208 	add.w	r2, r7, #8
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	2202      	movs	r2, #2
 8007024:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007026:	e100      	b.n	800722a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007030:	f107 0208 	add.w	r2, r7, #8
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	2202      	movs	r2, #2
 8007040:	701a      	strb	r2, [r3, #0]
      break;
 8007042:	e0f2      	b.n	800722a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	885b      	ldrh	r3, [r3, #2]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b05      	cmp	r3, #5
 800704c:	f200 80ac 	bhi.w	80071a8 <USBD_GetDescriptor+0x204>
 8007050:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <USBD_GetDescriptor+0xb4>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	08007071 	.word	0x08007071
 800705c:	080070a5 	.word	0x080070a5
 8007060:	080070d9 	.word	0x080070d9
 8007064:	0800710d 	.word	0x0800710d
 8007068:	08007141 	.word	0x08007141
 800706c:	08007175 	.word	0x08007175
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00b      	beq.n	8007094 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7c12      	ldrb	r2, [r2, #16]
 8007088:	f107 0108 	add.w	r1, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007092:	e091      	b.n	80071b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 facb 	bl	8007632 <USBD_CtlError>
            err++;
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	3301      	adds	r3, #1
 80070a0:	72fb      	strb	r3, [r7, #11]
          break;
 80070a2:	e089      	b.n	80071b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	7c12      	ldrb	r2, [r2, #16]
 80070bc:	f107 0108 	add.w	r1, r7, #8
 80070c0:	4610      	mov	r0, r2
 80070c2:	4798      	blx	r3
 80070c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070c6:	e077      	b.n	80071b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fab1 	bl	8007632 <USBD_CtlError>
            err++;
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	3301      	adds	r3, #1
 80070d4:	72fb      	strb	r3, [r7, #11]
          break;
 80070d6:	e06f      	b.n	80071b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00b      	beq.n	80070fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	7c12      	ldrb	r2, [r2, #16]
 80070f0:	f107 0108 	add.w	r1, r7, #8
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
 80070f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070fa:	e05d      	b.n	80071b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa97 	bl	8007632 <USBD_CtlError>
            err++;
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	3301      	adds	r3, #1
 8007108:	72fb      	strb	r3, [r7, #11]
          break;
 800710a:	e055      	b.n	80071b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7c12      	ldrb	r2, [r2, #16]
 8007124:	f107 0108 	add.w	r1, r7, #8
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
 800712c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712e:	e043      	b.n	80071b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fa7d 	bl	8007632 <USBD_CtlError>
            err++;
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	3301      	adds	r3, #1
 800713c:	72fb      	strb	r3, [r7, #11]
          break;
 800713e:	e03b      	b.n	80071b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7c12      	ldrb	r2, [r2, #16]
 8007158:	f107 0108 	add.w	r1, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007162:	e029      	b.n	80071b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa63 	bl	8007632 <USBD_CtlError>
            err++;
 800716c:	7afb      	ldrb	r3, [r7, #11]
 800716e:	3301      	adds	r3, #1
 8007170:	72fb      	strb	r3, [r7, #11]
          break;
 8007172:	e021      	b.n	80071b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	7c12      	ldrb	r2, [r2, #16]
 800718c:	f107 0108 	add.w	r1, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007196:	e00f      	b.n	80071b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fa49 	bl	8007632 <USBD_CtlError>
            err++;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	3301      	adds	r3, #1
 80071a4:	72fb      	strb	r3, [r7, #11]
          break;
 80071a6:	e007      	b.n	80071b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa41 	bl	8007632 <USBD_CtlError>
          err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071b6:	bf00      	nop
      }
      break;
 80071b8:	e037      	b.n	800722a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7c1b      	ldrb	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ca:	f107 0208 	add.w	r2, r7, #8
 80071ce:	4610      	mov	r0, r2
 80071d0:	4798      	blx	r3
 80071d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071d4:	e029      	b.n	800722a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fa2a 	bl	8007632 <USBD_CtlError>
        err++;
 80071de:	7afb      	ldrb	r3, [r7, #11]
 80071e0:	3301      	adds	r3, #1
 80071e2:	72fb      	strb	r3, [r7, #11]
      break;
 80071e4:	e021      	b.n	800722a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7c1b      	ldrb	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10d      	bne.n	800720a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	f107 0208 	add.w	r2, r7, #8
 80071fa:	4610      	mov	r0, r2
 80071fc:	4798      	blx	r3
 80071fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3301      	adds	r3, #1
 8007204:	2207      	movs	r2, #7
 8007206:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007208:	e00f      	b.n	800722a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fa10 	bl	8007632 <USBD_CtlError>
        err++;
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	3301      	adds	r3, #1
 8007216:	72fb      	strb	r3, [r7, #11]
      break;
 8007218:	e007      	b.n	800722a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fa08 	bl	8007632 <USBD_CtlError>
      err++;
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	3301      	adds	r3, #1
 8007226:	72fb      	strb	r3, [r7, #11]
      break;
 8007228:	bf00      	nop
  }

  if (err != 0U)
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11e      	bne.n	800726e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	88db      	ldrh	r3, [r3, #6]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d016      	beq.n	8007266 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007238:	893b      	ldrh	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00e      	beq.n	800725c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	88da      	ldrh	r2, [r3, #6]
 8007242:	893b      	ldrh	r3, [r7, #8]
 8007244:	4293      	cmp	r3, r2
 8007246:	bf28      	it	cs
 8007248:	4613      	movcs	r3, r2
 800724a:	b29b      	uxth	r3, r3
 800724c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800724e:	893b      	ldrh	r3, [r7, #8]
 8007250:	461a      	mov	r2, r3
 8007252:	68f9      	ldr	r1, [r7, #12]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fa69 	bl	800772c <USBD_CtlSendData>
 800725a:	e009      	b.n	8007270 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f9e7 	bl	8007632 <USBD_CtlError>
 8007264:	e004      	b.n	8007270 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fac1 	bl	80077ee <USBD_CtlSendStatus>
 800726c:	e000      	b.n	8007270 <USBD_GetDescriptor+0x2cc>
    return;
 800726e:	bf00      	nop
  }
}
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop

08007278 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	889b      	ldrh	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d131      	bne.n	80072ee <USBD_SetAddress+0x76>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88db      	ldrh	r3, [r3, #6]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d12d      	bne.n	80072ee <USBD_SetAddress+0x76>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	885b      	ldrh	r3, [r3, #2]
 8007296:	2b7f      	cmp	r3, #127	@ 0x7f
 8007298:	d829      	bhi.n	80072ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	885b      	ldrh	r3, [r3, #2]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d104      	bne.n	80072bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f9bc 	bl	8007632 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ba:	e01d      	b.n	80072f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	7bfa      	ldrb	r2, [r7, #15]
 80072c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 ff0f 	bl	80080ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa8d 	bl	80077ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2202      	movs	r2, #2
 80072de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e2:	e009      	b.n	80072f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ec:	e004      	b.n	80072f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f99e 	bl	8007632 <USBD_CtlError>
  }
}
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	4b4e      	ldr	r3, [pc, #312]	@ (8007450 <USBD_SetConfig+0x150>)
 8007316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007318:	4b4d      	ldr	r3, [pc, #308]	@ (8007450 <USBD_SetConfig+0x150>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d905      	bls.n	800732c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f985 	bl	8007632 <USBD_CtlError>
    return USBD_FAIL;
 8007328:	2303      	movs	r3, #3
 800732a:	e08c      	b.n	8007446 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d002      	beq.n	800733e <USBD_SetConfig+0x3e>
 8007338:	2b03      	cmp	r3, #3
 800733a:	d029      	beq.n	8007390 <USBD_SetConfig+0x90>
 800733c:	e075      	b.n	800742a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800733e:	4b44      	ldr	r3, [pc, #272]	@ (8007450 <USBD_SetConfig+0x150>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d020      	beq.n	8007388 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007346:	4b42      	ldr	r3, [pc, #264]	@ (8007450 <USBD_SetConfig+0x150>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007350:	4b3f      	ldr	r3, [pc, #252]	@ (8007450 <USBD_SetConfig+0x150>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7fe ffcd 	bl	80062f6 <USBD_SetClassConfig>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f962 	bl	8007632 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007376:	e065      	b.n	8007444 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa38 	bl	80077ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2203      	movs	r2, #3
 8007382:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007386:	e05d      	b.n	8007444 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fa30 	bl	80077ee <USBD_CtlSendStatus>
      break;
 800738e:	e059      	b.n	8007444 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007390:	4b2f      	ldr	r3, [pc, #188]	@ (8007450 <USBD_SetConfig+0x150>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d112      	bne.n	80073be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80073a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007450 <USBD_SetConfig+0x150>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073aa:	4b29      	ldr	r3, [pc, #164]	@ (8007450 <USBD_SetConfig+0x150>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fe ffbc 	bl	800632e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa19 	bl	80077ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073bc:	e042      	b.n	8007444 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073be:	4b24      	ldr	r3, [pc, #144]	@ (8007450 <USBD_SetConfig+0x150>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d02a      	beq.n	8007422 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fe ffaa 	bl	800632e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073da:	4b1d      	ldr	r3, [pc, #116]	@ (8007450 <USBD_SetConfig+0x150>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007450 <USBD_SetConfig+0x150>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fe ff83 	bl	80062f6 <USBD_SetClassConfig>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f918 	bl	8007632 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fe ff8f 	bl	800632e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007418:	e014      	b.n	8007444 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f9e7 	bl	80077ee <USBD_CtlSendStatus>
      break;
 8007420:	e010      	b.n	8007444 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f9e3 	bl	80077ee <USBD_CtlSendStatus>
      break;
 8007428:	e00c      	b.n	8007444 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f900 	bl	8007632 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007432:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <USBD_SetConfig+0x150>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7fe ff78 	bl	800632e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800743e:	2303      	movs	r3, #3
 8007440:	73fb      	strb	r3, [r7, #15]
      break;
 8007442:	bf00      	nop
  }

  return ret;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20002330 	.word	0x20002330

08007454 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88db      	ldrh	r3, [r3, #6]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d004      	beq.n	8007470 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8e2 	bl	8007632 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800746e:	e023      	b.n	80074b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	dc02      	bgt.n	8007482 <USBD_GetConfig+0x2e>
 800747c:	2b00      	cmp	r3, #0
 800747e:	dc03      	bgt.n	8007488 <USBD_GetConfig+0x34>
 8007480:	e015      	b.n	80074ae <USBD_GetConfig+0x5a>
 8007482:	2b03      	cmp	r3, #3
 8007484:	d00b      	beq.n	800749e <USBD_GetConfig+0x4a>
 8007486:	e012      	b.n	80074ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3308      	adds	r3, #8
 8007492:	2201      	movs	r2, #1
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f948 	bl	800772c <USBD_CtlSendData>
        break;
 800749c:	e00c      	b.n	80074b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3304      	adds	r3, #4
 80074a2:	2201      	movs	r2, #1
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f940 	bl	800772c <USBD_CtlSendData>
        break;
 80074ac:	e004      	b.n	80074b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f8be 	bl	8007632 <USBD_CtlError>
        break;
 80074b6:	bf00      	nop
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d81e      	bhi.n	8007516 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	88db      	ldrh	r3, [r3, #6]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d004      	beq.n	80074ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8a5 	bl	8007632 <USBD_CtlError>
        break;
 80074e8:	e01a      	b.n	8007520 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f043 0202 	orr.w	r2, r3, #2
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	330c      	adds	r3, #12
 800750a:	2202      	movs	r2, #2
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f90c 	bl	800772c <USBD_CtlSendData>
      break;
 8007514:	e004      	b.n	8007520 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f88a 	bl	8007632 <USBD_CtlError>
      break;
 800751e:	bf00      	nop
  }
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	885b      	ldrh	r3, [r3, #2]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d107      	bne.n	800754a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f953 	bl	80077ee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007548:	e013      	b.n	8007572 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	885b      	ldrh	r3, [r3, #2]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d10b      	bne.n	800756a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	889b      	ldrh	r3, [r3, #4]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	b29b      	uxth	r3, r3
 800755a:	b2da      	uxtb	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f943 	bl	80077ee <USBD_CtlSendStatus>
}
 8007568:	e003      	b.n	8007572 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f860 	bl	8007632 <USBD_CtlError>
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800758a:	b2db      	uxtb	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	2b02      	cmp	r3, #2
 8007590:	d80b      	bhi.n	80075aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	885b      	ldrh	r3, [r3, #2]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10c      	bne.n	80075b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f923 	bl	80077ee <USBD_CtlSendStatus>
      }
      break;
 80075a8:	e004      	b.n	80075b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f840 	bl	8007632 <USBD_CtlError>
      break;
 80075b2:	e000      	b.n	80075b6 <USBD_ClrFeature+0x3c>
      break;
 80075b4:	bf00      	nop
  }
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff fa3d 	bl	8006a68 <SWAPBYTE>
 80075ee:	4603      	mov	r3, r0
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff fa30 	bl	8006a68 <SWAPBYTE>
 8007608:	4603      	mov	r3, r0
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3301      	adds	r3, #1
 800761a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff fa23 	bl	8006a68 <SWAPBYTE>
 8007622:	4603      	mov	r3, r0
 8007624:	461a      	mov	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	80da      	strh	r2, [r3, #6]
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800763c:	2180      	movs	r1, #128	@ 0x80
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fcea 	bl	8008018 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007644:	2100      	movs	r1, #0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fce6 	bl	8008018 <USBD_LL_StallEP>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d042      	beq.n	80076f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800766e:	6938      	ldr	r0, [r7, #16]
 8007670:	f000 f842 	bl	80076f8 <USBD_GetLen>
 8007674:	4603      	mov	r3, r0
 8007676:	3301      	adds	r3, #1
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800767e:	d808      	bhi.n	8007692 <USBD_GetString+0x3e>
 8007680:	6938      	ldr	r0, [r7, #16]
 8007682:	f000 f839 	bl	80076f8 <USBD_GetLen>
 8007686:	4603      	mov	r3, r0
 8007688:	3301      	adds	r3, #1
 800768a:	b29b      	uxth	r3, r3
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	e001      	b.n	8007696 <USBD_GetString+0x42>
 8007692:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	4413      	add	r3, r2
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	7812      	ldrb	r2, [r2, #0]
 80076a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	3301      	adds	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4413      	add	r3, r2
 80076b2:	2203      	movs	r2, #3
 80076b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	3301      	adds	r3, #1
 80076ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076bc:	e013      	b.n	80076e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	4413      	add	r3, r2
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	7812      	ldrb	r2, [r2, #0]
 80076c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3301      	adds	r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
    idx++;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	3301      	adds	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4413      	add	r3, r2
 80076dc:	2200      	movs	r2, #0
 80076de:	701a      	strb	r2, [r3, #0]
    idx++;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	3301      	adds	r3, #1
 80076e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e7      	bne.n	80076be <USBD_GetString+0x6a>
 80076ee:	e000      	b.n	80076f2 <USBD_GetString+0x9e>
    return;
 80076f0:	bf00      	nop
  }
}
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007708:	e005      	b.n	8007716 <USBD_GetLen+0x1e>
  {
    len++;
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	3301      	adds	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3301      	adds	r3, #1
 8007714:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f5      	bne.n	800770a <USBD_GetLen+0x12>
  }

  return len;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2202      	movs	r2, #2
 800773c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	2100      	movs	r1, #0
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fce6 	bl	800812a <USBD_LL_Transmit>

  return USBD_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	2100      	movs	r1, #0
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fcd5 	bl	800812a <USBD_LL_Transmit>

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2203      	movs	r2, #3
 800779a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	2100      	movs	r1, #0
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 fcd5 	bl	800816c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	2100      	movs	r1, #0
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 fcc4 	bl	800816c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2204      	movs	r2, #4
 80077fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077fe:	2300      	movs	r3, #0
 8007800:	2200      	movs	r2, #0
 8007802:	2100      	movs	r1, #0
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fc90 	bl	800812a <USBD_LL_Transmit>

  return USBD_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2205      	movs	r2, #5
 8007820:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007824:	2300      	movs	r3, #0
 8007826:	2200      	movs	r2, #0
 8007828:	2100      	movs	r1, #0
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fc9e 	bl	800816c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007840:	2200      	movs	r2, #0
 8007842:	4912      	ldr	r1, [pc, #72]	@ (800788c <MX_USB_DEVICE_Init+0x50>)
 8007844:	4812      	ldr	r0, [pc, #72]	@ (8007890 <MX_USB_DEVICE_Init+0x54>)
 8007846:	f7fe fcd9 	bl	80061fc <USBD_Init>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007850:	f7f9 fdbc 	bl	80013cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007854:	490f      	ldr	r1, [pc, #60]	@ (8007894 <MX_USB_DEVICE_Init+0x58>)
 8007856:	480e      	ldr	r0, [pc, #56]	@ (8007890 <MX_USB_DEVICE_Init+0x54>)
 8007858:	f7fe fd00 	bl	800625c <USBD_RegisterClass>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007862:	f7f9 fdb3 	bl	80013cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007866:	490c      	ldr	r1, [pc, #48]	@ (8007898 <MX_USB_DEVICE_Init+0x5c>)
 8007868:	4809      	ldr	r0, [pc, #36]	@ (8007890 <MX_USB_DEVICE_Init+0x54>)
 800786a:	f7fe fbf7 	bl	800605c <USBD_CDC_RegisterInterface>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007874:	f7f9 fdaa 	bl	80013cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007878:	4805      	ldr	r0, [pc, #20]	@ (8007890 <MX_USB_DEVICE_Init+0x54>)
 800787a:	f7fe fd25 	bl	80062c8 <USBD_Start>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007884:	f7f9 fda2 	bl	80013cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007888:	bf00      	nop
 800788a:	bd80      	pop	{r7, pc}
 800788c:	200000ac 	.word	0x200000ac
 8007890:	20002334 	.word	0x20002334
 8007894:	20000018 	.word	0x20000018
 8007898:	20000098 	.word	0x20000098

0800789c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078a0:	2200      	movs	r2, #0
 80078a2:	4905      	ldr	r1, [pc, #20]	@ (80078b8 <CDC_Init_FS+0x1c>)
 80078a4:	4805      	ldr	r0, [pc, #20]	@ (80078bc <CDC_Init_FS+0x20>)
 80078a6:	f7fe fbf3 	bl	8006090 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078aa:	4905      	ldr	r1, [pc, #20]	@ (80078c0 <CDC_Init_FS+0x24>)
 80078ac:	4803      	ldr	r0, [pc, #12]	@ (80078bc <CDC_Init_FS+0x20>)
 80078ae:	f7fe fc11 	bl	80060d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20002a10 	.word	0x20002a10
 80078bc:	20002334 	.word	0x20002334
 80078c0:	20002610 	.word	0x20002610

080078c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	6039      	str	r1, [r7, #0]
 80078de:	71fb      	strb	r3, [r7, #7]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	2b23      	cmp	r3, #35	@ 0x23
 80078e8:	d84a      	bhi.n	8007980 <CDC_Control_FS+0xac>
 80078ea:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <CDC_Control_FS+0x1c>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007981 	.word	0x08007981
 80078f4:	08007981 	.word	0x08007981
 80078f8:	08007981 	.word	0x08007981
 80078fc:	08007981 	.word	0x08007981
 8007900:	08007981 	.word	0x08007981
 8007904:	08007981 	.word	0x08007981
 8007908:	08007981 	.word	0x08007981
 800790c:	08007981 	.word	0x08007981
 8007910:	08007981 	.word	0x08007981
 8007914:	08007981 	.word	0x08007981
 8007918:	08007981 	.word	0x08007981
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	08007981 	.word	0x08007981
 8007928:	08007981 	.word	0x08007981
 800792c:	08007981 	.word	0x08007981
 8007930:	08007981 	.word	0x08007981
 8007934:	08007981 	.word	0x08007981
 8007938:	08007981 	.word	0x08007981
 800793c:	08007981 	.word	0x08007981
 8007940:	08007981 	.word	0x08007981
 8007944:	08007981 	.word	0x08007981
 8007948:	08007981 	.word	0x08007981
 800794c:	08007981 	.word	0x08007981
 8007950:	08007981 	.word	0x08007981
 8007954:	08007981 	.word	0x08007981
 8007958:	08007981 	.word	0x08007981
 800795c:	08007981 	.word	0x08007981
 8007960:	08007981 	.word	0x08007981
 8007964:	08007981 	.word	0x08007981
 8007968:	08007981 	.word	0x08007981
 800796c:	08007981 	.word	0x08007981
 8007970:	08007981 	.word	0x08007981
 8007974:	08007981 	.word	0x08007981
 8007978:	08007981 	.word	0x08007981
 800797c:	08007981 	.word	0x08007981
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007980:	bf00      	nop
  }

  return (USBD_OK);
 8007982:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4805      	ldr	r0, [pc, #20]	@ (80079b4 <CDC_Receive_FS+0x24>)
 800799e:	f7fe fb99 	bl	80060d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079a2:	4804      	ldr	r0, [pc, #16]	@ (80079b4 <CDC_Receive_FS+0x24>)
 80079a4:	f7fe fbf4 	bl	8006190 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20002334 	.word	0x20002334

080079b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80079c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007a00 <CDC_Transmit_FS+0x48>)
 80079ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80079ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80079da:	2301      	movs	r3, #1
 80079dc:	e00b      	b.n	80079f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80079de:	887b      	ldrh	r3, [r7, #2]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	4806      	ldr	r0, [pc, #24]	@ (8007a00 <CDC_Transmit_FS+0x48>)
 80079e6:	f7fe fb53 	bl	8006090 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079ea:	4805      	ldr	r0, [pc, #20]	@ (8007a00 <CDC_Transmit_FS+0x48>)
 80079ec:	f7fe fb90 	bl	8006110 <USBD_CDC_TransmitPacket>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20002334 	.word	0x20002334

08007a04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
	...

08007a28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2212      	movs	r2, #18
 8007a38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a3a:	4b03      	ldr	r3, [pc, #12]	@ (8007a48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	200000c8 	.word	0x200000c8

08007a4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	@ (8007a6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	200000dc 	.word	0x200000dc

08007a70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	6039      	str	r1, [r7, #0]
 8007a7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	4907      	ldr	r1, [pc, #28]	@ (8007aa4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a86:	4808      	ldr	r0, [pc, #32]	@ (8007aa8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a88:	f7ff fde4 	bl	8007654 <USBD_GetString>
 8007a8c:	e004      	b.n	8007a98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	4904      	ldr	r1, [pc, #16]	@ (8007aa4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a92:	4805      	ldr	r0, [pc, #20]	@ (8007aa8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a94:	f7ff fdde 	bl	8007654 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a98:	4b02      	ldr	r3, [pc, #8]	@ (8007aa4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20002e10 	.word	0x20002e10
 8007aa8:	0800be30 	.word	0x0800be30

08007aac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	4904      	ldr	r1, [pc, #16]	@ (8007acc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007abc:	4804      	ldr	r0, [pc, #16]	@ (8007ad0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007abe:	f7ff fdc9 	bl	8007654 <USBD_GetString>
  return USBD_StrDesc;
 8007ac2:	4b02      	ldr	r3, [pc, #8]	@ (8007acc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20002e10 	.word	0x20002e10
 8007ad0:	0800be48 	.word	0x0800be48

08007ad4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	221a      	movs	r2, #26
 8007ae4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ae6:	f000 f843 	bl	8007b70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007aea:	4b02      	ldr	r3, [pc, #8]	@ (8007af4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	200000e0 	.word	0x200000e0

08007af8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4907      	ldr	r1, [pc, #28]	@ (8007b2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b0e:	4808      	ldr	r0, [pc, #32]	@ (8007b30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b10:	f7ff fda0 	bl	8007654 <USBD_GetString>
 8007b14:	e004      	b.n	8007b20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	4904      	ldr	r1, [pc, #16]	@ (8007b2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b1a:	4805      	ldr	r0, [pc, #20]	@ (8007b30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b1c:	f7ff fd9a 	bl	8007654 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b20:	4b02      	ldr	r3, [pc, #8]	@ (8007b2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20002e10 	.word	0x20002e10
 8007b30:	0800be5c 	.word	0x0800be5c

08007b34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4907      	ldr	r1, [pc, #28]	@ (8007b68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b4a:	4808      	ldr	r0, [pc, #32]	@ (8007b6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b4c:	f7ff fd82 	bl	8007654 <USBD_GetString>
 8007b50:	e004      	b.n	8007b5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4904      	ldr	r1, [pc, #16]	@ (8007b68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b56:	4805      	ldr	r0, [pc, #20]	@ (8007b6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b58:	f7ff fd7c 	bl	8007654 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b5c:	4b02      	ldr	r3, [pc, #8]	@ (8007b68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20002e10 	.word	0x20002e10
 8007b6c:	0800be68 	.word	0x0800be68

08007b70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b76:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <Get_SerialNum+0x44>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb8 <Get_SerialNum+0x48>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b82:	4b0e      	ldr	r3, [pc, #56]	@ (8007bbc <Get_SerialNum+0x4c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d009      	beq.n	8007baa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b96:	2208      	movs	r2, #8
 8007b98:	4909      	ldr	r1, [pc, #36]	@ (8007bc0 <Get_SerialNum+0x50>)
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f814 	bl	8007bc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	4908      	ldr	r1, [pc, #32]	@ (8007bc4 <Get_SerialNum+0x54>)
 8007ba4:	68b8      	ldr	r0, [r7, #8]
 8007ba6:	f000 f80f 	bl	8007bc8 <IntToUnicode>
  }
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	1fff7a10 	.word	0x1fff7a10
 8007bb8:	1fff7a14 	.word	0x1fff7a14
 8007bbc:	1fff7a18 	.word	0x1fff7a18
 8007bc0:	200000e2 	.word	0x200000e2
 8007bc4:	200000f2 	.word	0x200000f2

08007bc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007bda:	2300      	movs	r3, #0
 8007bdc:	75fb      	strb	r3, [r7, #23]
 8007bde:	e027      	b.n	8007c30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	0f1b      	lsrs	r3, r3, #28
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d80b      	bhi.n	8007c00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	0f1b      	lsrs	r3, r3, #28
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	440b      	add	r3, r1
 8007bf8:	3230      	adds	r2, #48	@ 0x30
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	e00a      	b.n	8007c16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	0f1b      	lsrs	r3, r3, #28
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	440b      	add	r3, r1
 8007c10:	3237      	adds	r2, #55	@ 0x37
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	3301      	adds	r3, #1
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	4413      	add	r3, r2
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	75fb      	strb	r3, [r7, #23]
 8007c30:	7dfa      	ldrb	r2, [r7, #23]
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d3d3      	bcc.n	8007be0 <IntToUnicode+0x18>
  }
}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
	...

08007c48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	@ 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c50:	f107 0314 	add.w	r3, r7, #20
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	60da      	str	r2, [r3, #12]
 8007c5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c68:	d13a      	bne.n	8007ce0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	613b      	str	r3, [r7, #16]
 8007c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007c74:	f043 0301 	orr.w	r3, r3, #1
 8007c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	613b      	str	r3, [r7, #16]
 8007c84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c94:	2303      	movs	r3, #3
 8007c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c98:	230a      	movs	r3, #10
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c9c:	f107 0314 	add.w	r3, r7, #20
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4812      	ldr	r0, [pc, #72]	@ (8007cec <HAL_PCD_MspInit+0xa4>)
 8007ca4:	f7fa fa86 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cac:	4a0e      	ldr	r2, [pc, #56]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb2:	6353      	str	r3, [r2, #52]	@ 0x34
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cc4:	4b08      	ldr	r3, [pc, #32]	@ (8007ce8 <HAL_PCD_MspInit+0xa0>)
 8007cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	2043      	movs	r0, #67	@ 0x43
 8007cd6:	f7fa fa36 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007cda:	2043      	movs	r0, #67	@ 0x43
 8007cdc:	f7fa fa4f 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ce0:	bf00      	nop
 8007ce2:	3728      	adds	r7, #40	@ 0x28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	40020000 	.word	0x40020000

08007cf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7fe fb2b 	bl	8006362 <USBD_LL_SetupStage>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	440b      	add	r3, r1
 8007d34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	f7fe fb65 	bl	800640c <USBD_LL_DataOutStage>
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	3320      	adds	r3, #32
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	4619      	mov	r1, r3
 8007d72:	f7fe fc07 	bl	8006584 <USBD_LL_DataInStage>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fd4b 	bl	8006828 <USBD_LL_SOF>
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007da2:	2301      	movs	r3, #1
 8007da4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	79db      	ldrb	r3, [r3, #7]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d001      	beq.n	8007db2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dae:	f7f9 fb0d 	bl	80013cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007db8:	7bfa      	ldrb	r2, [r7, #15]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fcef 	bl	80067a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe fc96 	bl	80066fa <USBD_LL_Reset>
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fcea 	bl	80067c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6812      	ldr	r2, [r2, #0]
 8007dfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7adb      	ldrb	r3, [r3, #11]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e0c:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <HAL_PCD_SuspendCallback+0x48>)
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	4a03      	ldr	r2, [pc, #12]	@ (8007e20 <HAL_PCD_SuspendCallback+0x48>)
 8007e12:	f043 0306 	orr.w	r3, r3, #6
 8007e16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	e000ed00 	.word	0xe000ed00

08007e24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fce0 	bl	80067f8 <USBD_LL_Resume>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e52:	78fa      	ldrb	r2, [r7, #3]
 8007e54:	4611      	mov	r1, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fd38 	bl	80068cc <USBD_LL_IsoOUTIncomplete>
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fcf4 	bl	8006868 <USBD_LL_IsoINIncomplete>
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fd4a 	bl	8006930 <USBD_LL_DevConnected>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fd47 	bl	8006946 <USBD_LL_DevDisconnected>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d13c      	bne.n	8007f4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ed0:	4a20      	ldr	r2, [pc, #128]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a1e      	ldr	r2, [pc, #120]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007edc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007ee2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ee6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007eea:	2204      	movs	r2, #4
 8007eec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007eee:	4b19      	ldr	r3, [pc, #100]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ef4:	4b17      	ldr	r3, [pc, #92]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007efa:	4b16      	ldr	r3, [pc, #88]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007efc:	2202      	movs	r2, #2
 8007efe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f00:	4b14      	ldr	r3, [pc, #80]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f06:	4b13      	ldr	r3, [pc, #76]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f0c:	4b11      	ldr	r3, [pc, #68]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f12:	4b10      	ldr	r3, [pc, #64]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f18:	4b0e      	ldr	r3, [pc, #56]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f1e:	480d      	ldr	r0, [pc, #52]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f20:	f7fa facc 	bl	80024bc <HAL_PCD_Init>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f2a:	f7f9 fa4f 	bl	80013cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f2e:	2180      	movs	r1, #128	@ 0x80
 8007f30:	4808      	ldr	r0, [pc, #32]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f32:	f7fb fcf8 	bl	8003926 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f36:	2240      	movs	r2, #64	@ 0x40
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4806      	ldr	r0, [pc, #24]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f3c:	f7fb fcac 	bl	8003898 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f40:	2280      	movs	r2, #128	@ 0x80
 8007f42:	2101      	movs	r1, #1
 8007f44:	4803      	ldr	r0, [pc, #12]	@ (8007f54 <USBD_LL_Init+0x94>)
 8007f46:	f7fb fca7 	bl	8003898 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20003010 	.word	0x20003010

08007f58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fa fbb3 	bl	80026da <HAL_PCD_Start>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f942 	bl	8008204 <USBD_Get_USB_Status>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	4608      	mov	r0, r1
 8007f98:	4611      	mov	r1, r2
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	70fb      	strb	r3, [r7, #3]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70bb      	strb	r3, [r7, #2]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fb6:	78bb      	ldrb	r3, [r7, #2]
 8007fb8:	883a      	ldrh	r2, [r7, #0]
 8007fba:	78f9      	ldrb	r1, [r7, #3]
 8007fbc:	f7fb f887 	bl	80030ce <HAL_PCD_EP_Open>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f91c 	bl	8008204 <USBD_Get_USB_Status>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ff4:	78fa      	ldrb	r2, [r7, #3]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fb f8d2 	bl	80031a2 <HAL_PCD_EP_Close>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	4618      	mov	r0, r3
 8008006:	f000 f8fd 	bl	8008204 <USBD_Get_USB_Status>
 800800a:	4603      	mov	r3, r0
 800800c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008032:	78fa      	ldrb	r2, [r7, #3]
 8008034:	4611      	mov	r1, r2
 8008036:	4618      	mov	r0, r3
 8008038:	f7fb f98a 	bl	8003350 <HAL_PCD_EP_SetStall>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f8de 	bl	8008204 <USBD_Get_USB_Status>
 8008048:	4603      	mov	r3, r0
 800804a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800804c:	7bbb      	ldrb	r3, [r7, #14]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	4611      	mov	r1, r2
 8008074:	4618      	mov	r0, r3
 8008076:	f7fb f9ce 	bl	8003416 <HAL_PCD_EP_ClrStall>
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f8bf 	bl	8008204 <USBD_Get_USB_Status>
 8008086:	4603      	mov	r3, r0
 8008088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800808a:	7bbb      	ldrb	r3, [r7, #14]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	da0b      	bge.n	80080c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080b6:	68f9      	ldr	r1, [r7, #12]
 80080b8:	4613      	mov	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	3316      	adds	r3, #22
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	e00b      	b.n	80080e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	4613      	mov	r3, r2
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80080de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008106:	78fa      	ldrb	r2, [r7, #3]
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f7fa ffbb 	bl	8003086 <HAL_PCD_SetAddress>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	4618      	mov	r0, r3
 8008118:	f000 f874 	bl	8008204 <USBD_Get_USB_Status>
 800811c:	4603      	mov	r3, r0
 800811e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008120:	7bbb      	ldrb	r3, [r7, #14]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b086      	sub	sp, #24
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	460b      	mov	r3, r1
 8008138:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008148:	7af9      	ldrb	r1, [r7, #11]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	f7fb f8c5 	bl	80032dc <HAL_PCD_EP_Transmit>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f853 	bl	8008204 <USBD_Get_USB_Status>
 800815e:	4603      	mov	r3, r0
 8008160:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008162:	7dbb      	ldrb	r3, [r7, #22]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	607a      	str	r2, [r7, #4]
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	460b      	mov	r3, r1
 800817a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800818a:	7af9      	ldrb	r1, [r7, #11]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	f7fb f851 	bl	8003236 <HAL_PCD_EP_Receive>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f832 	bl	8008204 <USBD_Get_USB_Status>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081c0:	78fa      	ldrb	r2, [r7, #3]
 80081c2:	4611      	mov	r1, r2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fb f871 	bl	80032ac <HAL_PCD_EP_GetRxCount>
 80081ca:	4603      	mov	r3, r0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081dc:	4b03      	ldr	r3, [pc, #12]	@ (80081ec <USBD_static_malloc+0x18>)
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	200034f4 	.word	0x200034f4

080081f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]

}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d817      	bhi.n	8008248 <USBD_Get_USB_Status+0x44>
 8008218:	a201      	add	r2, pc, #4	@ (adr r2, 8008220 <USBD_Get_USB_Status+0x1c>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008231 	.word	0x08008231
 8008224:	08008237 	.word	0x08008237
 8008228:	0800823d 	.word	0x0800823d
 800822c:	08008243 	.word	0x08008243
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]
    break;
 8008234:	e00b      	b.n	800824e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008236:	2303      	movs	r3, #3
 8008238:	73fb      	strb	r3, [r7, #15]
    break;
 800823a:	e008      	b.n	800824e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800823c:	2301      	movs	r3, #1
 800823e:	73fb      	strb	r3, [r7, #15]
    break;
 8008240:	e005      	b.n	800824e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008242:	2303      	movs	r3, #3
 8008244:	73fb      	strb	r3, [r7, #15]
    break;
 8008246:	e002      	b.n	800824e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008248:	2303      	movs	r3, #3
 800824a:	73fb      	strb	r3, [r7, #15]
    break;
 800824c:	bf00      	nop
  }
  return usb_status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <__cvt>:
 800825c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	ec57 6b10 	vmov	r6, r7, d0
 8008264:	2f00      	cmp	r7, #0
 8008266:	460c      	mov	r4, r1
 8008268:	4619      	mov	r1, r3
 800826a:	463b      	mov	r3, r7
 800826c:	bfbb      	ittet	lt
 800826e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008272:	461f      	movlt	r7, r3
 8008274:	2300      	movge	r3, #0
 8008276:	232d      	movlt	r3, #45	@ 0x2d
 8008278:	700b      	strb	r3, [r1, #0]
 800827a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800827c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008280:	4691      	mov	r9, r2
 8008282:	f023 0820 	bic.w	r8, r3, #32
 8008286:	bfbc      	itt	lt
 8008288:	4632      	movlt	r2, r6
 800828a:	4616      	movlt	r6, r2
 800828c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008290:	d005      	beq.n	800829e <__cvt+0x42>
 8008292:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008296:	d100      	bne.n	800829a <__cvt+0x3e>
 8008298:	3401      	adds	r4, #1
 800829a:	2102      	movs	r1, #2
 800829c:	e000      	b.n	80082a0 <__cvt+0x44>
 800829e:	2103      	movs	r1, #3
 80082a0:	ab03      	add	r3, sp, #12
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	ab02      	add	r3, sp, #8
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	ec47 6b10 	vmov	d0, r6, r7
 80082ac:	4653      	mov	r3, sl
 80082ae:	4622      	mov	r2, r4
 80082b0:	f000 fe5a 	bl	8008f68 <_dtoa_r>
 80082b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80082b8:	4605      	mov	r5, r0
 80082ba:	d119      	bne.n	80082f0 <__cvt+0x94>
 80082bc:	f019 0f01 	tst.w	r9, #1
 80082c0:	d00e      	beq.n	80082e0 <__cvt+0x84>
 80082c2:	eb00 0904 	add.w	r9, r0, r4
 80082c6:	2200      	movs	r2, #0
 80082c8:	2300      	movs	r3, #0
 80082ca:	4630      	mov	r0, r6
 80082cc:	4639      	mov	r1, r7
 80082ce:	f7f8 fc03 	bl	8000ad8 <__aeabi_dcmpeq>
 80082d2:	b108      	cbz	r0, 80082d8 <__cvt+0x7c>
 80082d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80082d8:	2230      	movs	r2, #48	@ 0x30
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	454b      	cmp	r3, r9
 80082de:	d31e      	bcc.n	800831e <__cvt+0xc2>
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082e4:	1b5b      	subs	r3, r3, r5
 80082e6:	4628      	mov	r0, r5
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	b004      	add	sp, #16
 80082ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082f4:	eb00 0904 	add.w	r9, r0, r4
 80082f8:	d1e5      	bne.n	80082c6 <__cvt+0x6a>
 80082fa:	7803      	ldrb	r3, [r0, #0]
 80082fc:	2b30      	cmp	r3, #48	@ 0x30
 80082fe:	d10a      	bne.n	8008316 <__cvt+0xba>
 8008300:	2200      	movs	r2, #0
 8008302:	2300      	movs	r3, #0
 8008304:	4630      	mov	r0, r6
 8008306:	4639      	mov	r1, r7
 8008308:	f7f8 fbe6 	bl	8000ad8 <__aeabi_dcmpeq>
 800830c:	b918      	cbnz	r0, 8008316 <__cvt+0xba>
 800830e:	f1c4 0401 	rsb	r4, r4, #1
 8008312:	f8ca 4000 	str.w	r4, [sl]
 8008316:	f8da 3000 	ldr.w	r3, [sl]
 800831a:	4499      	add	r9, r3
 800831c:	e7d3      	b.n	80082c6 <__cvt+0x6a>
 800831e:	1c59      	adds	r1, r3, #1
 8008320:	9103      	str	r1, [sp, #12]
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	e7d9      	b.n	80082da <__cvt+0x7e>

08008326 <__exponent>:
 8008326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008328:	2900      	cmp	r1, #0
 800832a:	bfba      	itte	lt
 800832c:	4249      	neglt	r1, r1
 800832e:	232d      	movlt	r3, #45	@ 0x2d
 8008330:	232b      	movge	r3, #43	@ 0x2b
 8008332:	2909      	cmp	r1, #9
 8008334:	7002      	strb	r2, [r0, #0]
 8008336:	7043      	strb	r3, [r0, #1]
 8008338:	dd29      	ble.n	800838e <__exponent+0x68>
 800833a:	f10d 0307 	add.w	r3, sp, #7
 800833e:	461d      	mov	r5, r3
 8008340:	270a      	movs	r7, #10
 8008342:	461a      	mov	r2, r3
 8008344:	fbb1 f6f7 	udiv	r6, r1, r7
 8008348:	fb07 1416 	mls	r4, r7, r6, r1
 800834c:	3430      	adds	r4, #48	@ 0x30
 800834e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008352:	460c      	mov	r4, r1
 8008354:	2c63      	cmp	r4, #99	@ 0x63
 8008356:	f103 33ff 	add.w	r3, r3, #4294967295
 800835a:	4631      	mov	r1, r6
 800835c:	dcf1      	bgt.n	8008342 <__exponent+0x1c>
 800835e:	3130      	adds	r1, #48	@ 0x30
 8008360:	1e94      	subs	r4, r2, #2
 8008362:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008366:	1c41      	adds	r1, r0, #1
 8008368:	4623      	mov	r3, r4
 800836a:	42ab      	cmp	r3, r5
 800836c:	d30a      	bcc.n	8008384 <__exponent+0x5e>
 800836e:	f10d 0309 	add.w	r3, sp, #9
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	42ac      	cmp	r4, r5
 8008376:	bf88      	it	hi
 8008378:	2300      	movhi	r3, #0
 800837a:	3302      	adds	r3, #2
 800837c:	4403      	add	r3, r0
 800837e:	1a18      	subs	r0, r3, r0
 8008380:	b003      	add	sp, #12
 8008382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008384:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008388:	f801 6f01 	strb.w	r6, [r1, #1]!
 800838c:	e7ed      	b.n	800836a <__exponent+0x44>
 800838e:	2330      	movs	r3, #48	@ 0x30
 8008390:	3130      	adds	r1, #48	@ 0x30
 8008392:	7083      	strb	r3, [r0, #2]
 8008394:	70c1      	strb	r1, [r0, #3]
 8008396:	1d03      	adds	r3, r0, #4
 8008398:	e7f1      	b.n	800837e <__exponent+0x58>
	...

0800839c <_printf_float>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	b08d      	sub	sp, #52	@ 0x34
 80083a2:	460c      	mov	r4, r1
 80083a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80083a8:	4616      	mov	r6, r2
 80083aa:	461f      	mov	r7, r3
 80083ac:	4605      	mov	r5, r0
 80083ae:	f000 fcdb 	bl	8008d68 <_localeconv_r>
 80083b2:	6803      	ldr	r3, [r0, #0]
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7f7 ff62 	bl	8000280 <strlen>
 80083bc:	2300      	movs	r3, #0
 80083be:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c0:	f8d8 3000 	ldr.w	r3, [r8]
 80083c4:	9005      	str	r0, [sp, #20]
 80083c6:	3307      	adds	r3, #7
 80083c8:	f023 0307 	bic.w	r3, r3, #7
 80083cc:	f103 0208 	add.w	r2, r3, #8
 80083d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083d4:	f8d4 b000 	ldr.w	fp, [r4]
 80083d8:	f8c8 2000 	str.w	r2, [r8]
 80083dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083e4:	9307      	str	r3, [sp, #28]
 80083e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80083ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f2:	4b9c      	ldr	r3, [pc, #624]	@ (8008664 <_printf_float+0x2c8>)
 80083f4:	f04f 32ff 	mov.w	r2, #4294967295
 80083f8:	f7f8 fba0 	bl	8000b3c <__aeabi_dcmpun>
 80083fc:	bb70      	cbnz	r0, 800845c <_printf_float+0xc0>
 80083fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008402:	4b98      	ldr	r3, [pc, #608]	@ (8008664 <_printf_float+0x2c8>)
 8008404:	f04f 32ff 	mov.w	r2, #4294967295
 8008408:	f7f8 fb7a 	bl	8000b00 <__aeabi_dcmple>
 800840c:	bb30      	cbnz	r0, 800845c <_printf_float+0xc0>
 800840e:	2200      	movs	r2, #0
 8008410:	2300      	movs	r3, #0
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f8 fb69 	bl	8000aec <__aeabi_dcmplt>
 800841a:	b110      	cbz	r0, 8008422 <_printf_float+0x86>
 800841c:	232d      	movs	r3, #45	@ 0x2d
 800841e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008422:	4a91      	ldr	r2, [pc, #580]	@ (8008668 <_printf_float+0x2cc>)
 8008424:	4b91      	ldr	r3, [pc, #580]	@ (800866c <_printf_float+0x2d0>)
 8008426:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800842a:	bf8c      	ite	hi
 800842c:	4690      	movhi	r8, r2
 800842e:	4698      	movls	r8, r3
 8008430:	2303      	movs	r3, #3
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	f02b 0304 	bic.w	r3, fp, #4
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	f04f 0900 	mov.w	r9, #0
 800843e:	9700      	str	r7, [sp, #0]
 8008440:	4633      	mov	r3, r6
 8008442:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f9d2 	bl	80087f0 <_printf_common>
 800844c:	3001      	adds	r0, #1
 800844e:	f040 808d 	bne.w	800856c <_printf_float+0x1d0>
 8008452:	f04f 30ff 	mov.w	r0, #4294967295
 8008456:	b00d      	add	sp, #52	@ 0x34
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	4642      	mov	r2, r8
 800845e:	464b      	mov	r3, r9
 8008460:	4640      	mov	r0, r8
 8008462:	4649      	mov	r1, r9
 8008464:	f7f8 fb6a 	bl	8000b3c <__aeabi_dcmpun>
 8008468:	b140      	cbz	r0, 800847c <_printf_float+0xe0>
 800846a:	464b      	mov	r3, r9
 800846c:	2b00      	cmp	r3, #0
 800846e:	bfbc      	itt	lt
 8008470:	232d      	movlt	r3, #45	@ 0x2d
 8008472:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008476:	4a7e      	ldr	r2, [pc, #504]	@ (8008670 <_printf_float+0x2d4>)
 8008478:	4b7e      	ldr	r3, [pc, #504]	@ (8008674 <_printf_float+0x2d8>)
 800847a:	e7d4      	b.n	8008426 <_printf_float+0x8a>
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008482:	9206      	str	r2, [sp, #24]
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	d13b      	bne.n	8008500 <_printf_float+0x164>
 8008488:	2306      	movs	r3, #6
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008490:	2300      	movs	r3, #0
 8008492:	6022      	str	r2, [r4, #0]
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	ab0a      	add	r3, sp, #40	@ 0x28
 8008498:	e9cd a301 	strd	sl, r3, [sp, #4]
 800849c:	ab09      	add	r3, sp, #36	@ 0x24
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	6861      	ldr	r1, [r4, #4]
 80084a2:	ec49 8b10 	vmov	d0, r8, r9
 80084a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80084aa:	4628      	mov	r0, r5
 80084ac:	f7ff fed6 	bl	800825c <__cvt>
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084b4:	2b47      	cmp	r3, #71	@ 0x47
 80084b6:	4680      	mov	r8, r0
 80084b8:	d129      	bne.n	800850e <_printf_float+0x172>
 80084ba:	1cc8      	adds	r0, r1, #3
 80084bc:	db02      	blt.n	80084c4 <_printf_float+0x128>
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	4299      	cmp	r1, r3
 80084c2:	dd41      	ble.n	8008548 <_printf_float+0x1ac>
 80084c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80084c8:	fa5f fa8a 	uxtb.w	sl, sl
 80084cc:	3901      	subs	r1, #1
 80084ce:	4652      	mov	r2, sl
 80084d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80084d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80084d6:	f7ff ff26 	bl	8008326 <__exponent>
 80084da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084dc:	1813      	adds	r3, r2, r0
 80084de:	2a01      	cmp	r2, #1
 80084e0:	4681      	mov	r9, r0
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	dc02      	bgt.n	80084ec <_printf_float+0x150>
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	07d2      	lsls	r2, r2, #31
 80084ea:	d501      	bpl.n	80084f0 <_printf_float+0x154>
 80084ec:	3301      	adds	r3, #1
 80084ee:	6123      	str	r3, [r4, #16]
 80084f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0a2      	beq.n	800843e <_printf_float+0xa2>
 80084f8:	232d      	movs	r3, #45	@ 0x2d
 80084fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084fe:	e79e      	b.n	800843e <_printf_float+0xa2>
 8008500:	9a06      	ldr	r2, [sp, #24]
 8008502:	2a47      	cmp	r2, #71	@ 0x47
 8008504:	d1c2      	bne.n	800848c <_printf_float+0xf0>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1c0      	bne.n	800848c <_printf_float+0xf0>
 800850a:	2301      	movs	r3, #1
 800850c:	e7bd      	b.n	800848a <_printf_float+0xee>
 800850e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008512:	d9db      	bls.n	80084cc <_printf_float+0x130>
 8008514:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008518:	d118      	bne.n	800854c <_printf_float+0x1b0>
 800851a:	2900      	cmp	r1, #0
 800851c:	6863      	ldr	r3, [r4, #4]
 800851e:	dd0b      	ble.n	8008538 <_printf_float+0x19c>
 8008520:	6121      	str	r1, [r4, #16]
 8008522:	b913      	cbnz	r3, 800852a <_printf_float+0x18e>
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	07d0      	lsls	r0, r2, #31
 8008528:	d502      	bpl.n	8008530 <_printf_float+0x194>
 800852a:	3301      	adds	r3, #1
 800852c:	440b      	add	r3, r1
 800852e:	6123      	str	r3, [r4, #16]
 8008530:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008532:	f04f 0900 	mov.w	r9, #0
 8008536:	e7db      	b.n	80084f0 <_printf_float+0x154>
 8008538:	b913      	cbnz	r3, 8008540 <_printf_float+0x1a4>
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	07d2      	lsls	r2, r2, #31
 800853e:	d501      	bpl.n	8008544 <_printf_float+0x1a8>
 8008540:	3302      	adds	r3, #2
 8008542:	e7f4      	b.n	800852e <_printf_float+0x192>
 8008544:	2301      	movs	r3, #1
 8008546:	e7f2      	b.n	800852e <_printf_float+0x192>
 8008548:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800854c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800854e:	4299      	cmp	r1, r3
 8008550:	db05      	blt.n	800855e <_printf_float+0x1c2>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	6121      	str	r1, [r4, #16]
 8008556:	07d8      	lsls	r0, r3, #31
 8008558:	d5ea      	bpl.n	8008530 <_printf_float+0x194>
 800855a:	1c4b      	adds	r3, r1, #1
 800855c:	e7e7      	b.n	800852e <_printf_float+0x192>
 800855e:	2900      	cmp	r1, #0
 8008560:	bfd4      	ite	le
 8008562:	f1c1 0202 	rsble	r2, r1, #2
 8008566:	2201      	movgt	r2, #1
 8008568:	4413      	add	r3, r2
 800856a:	e7e0      	b.n	800852e <_printf_float+0x192>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	055a      	lsls	r2, r3, #21
 8008570:	d407      	bmi.n	8008582 <_printf_float+0x1e6>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	4642      	mov	r2, r8
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	d12b      	bne.n	80085d8 <_printf_float+0x23c>
 8008580:	e767      	b.n	8008452 <_printf_float+0xb6>
 8008582:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008586:	f240 80dd 	bls.w	8008744 <_printf_float+0x3a8>
 800858a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800858e:	2200      	movs	r2, #0
 8008590:	2300      	movs	r3, #0
 8008592:	f7f8 faa1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008596:	2800      	cmp	r0, #0
 8008598:	d033      	beq.n	8008602 <_printf_float+0x266>
 800859a:	4a37      	ldr	r2, [pc, #220]	@ (8008678 <_printf_float+0x2dc>)
 800859c:	2301      	movs	r3, #1
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f af54 	beq.w	8008452 <_printf_float+0xb6>
 80085aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80085ae:	4543      	cmp	r3, r8
 80085b0:	db02      	blt.n	80085b8 <_printf_float+0x21c>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	07d8      	lsls	r0, r3, #31
 80085b6:	d50f      	bpl.n	80085d8 <_printf_float+0x23c>
 80085b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af45 	beq.w	8008452 <_printf_float+0xb6>
 80085c8:	f04f 0900 	mov.w	r9, #0
 80085cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80085d0:	f104 0a1a 	add.w	sl, r4, #26
 80085d4:	45c8      	cmp	r8, r9
 80085d6:	dc09      	bgt.n	80085ec <_printf_float+0x250>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	079b      	lsls	r3, r3, #30
 80085dc:	f100 8103 	bmi.w	80087e6 <_printf_float+0x44a>
 80085e0:	68e0      	ldr	r0, [r4, #12]
 80085e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085e4:	4298      	cmp	r0, r3
 80085e6:	bfb8      	it	lt
 80085e8:	4618      	movlt	r0, r3
 80085ea:	e734      	b.n	8008456 <_printf_float+0xba>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4652      	mov	r2, sl
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f af2b 	beq.w	8008452 <_printf_float+0xb6>
 80085fc:	f109 0901 	add.w	r9, r9, #1
 8008600:	e7e8      	b.n	80085d4 <_printf_float+0x238>
 8008602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc39      	bgt.n	800867c <_printf_float+0x2e0>
 8008608:	4a1b      	ldr	r2, [pc, #108]	@ (8008678 <_printf_float+0x2dc>)
 800860a:	2301      	movs	r3, #1
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f af1d 	beq.w	8008452 <_printf_float+0xb6>
 8008618:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800861c:	ea59 0303 	orrs.w	r3, r9, r3
 8008620:	d102      	bne.n	8008628 <_printf_float+0x28c>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	07d9      	lsls	r1, r3, #31
 8008626:	d5d7      	bpl.n	80085d8 <_printf_float+0x23c>
 8008628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800862c:	4631      	mov	r1, r6
 800862e:	4628      	mov	r0, r5
 8008630:	47b8      	blx	r7
 8008632:	3001      	adds	r0, #1
 8008634:	f43f af0d 	beq.w	8008452 <_printf_float+0xb6>
 8008638:	f04f 0a00 	mov.w	sl, #0
 800863c:	f104 0b1a 	add.w	fp, r4, #26
 8008640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008642:	425b      	negs	r3, r3
 8008644:	4553      	cmp	r3, sl
 8008646:	dc01      	bgt.n	800864c <_printf_float+0x2b0>
 8008648:	464b      	mov	r3, r9
 800864a:	e793      	b.n	8008574 <_printf_float+0x1d8>
 800864c:	2301      	movs	r3, #1
 800864e:	465a      	mov	r2, fp
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f aefb 	beq.w	8008452 <_printf_float+0xb6>
 800865c:	f10a 0a01 	add.w	sl, sl, #1
 8008660:	e7ee      	b.n	8008640 <_printf_float+0x2a4>
 8008662:	bf00      	nop
 8008664:	7fefffff 	.word	0x7fefffff
 8008668:	0800be8c 	.word	0x0800be8c
 800866c:	0800be88 	.word	0x0800be88
 8008670:	0800be94 	.word	0x0800be94
 8008674:	0800be90 	.word	0x0800be90
 8008678:	0800be98 	.word	0x0800be98
 800867c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800867e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008682:	4553      	cmp	r3, sl
 8008684:	bfa8      	it	ge
 8008686:	4653      	movge	r3, sl
 8008688:	2b00      	cmp	r3, #0
 800868a:	4699      	mov	r9, r3
 800868c:	dc36      	bgt.n	80086fc <_printf_float+0x360>
 800868e:	f04f 0b00 	mov.w	fp, #0
 8008692:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008696:	f104 021a 	add.w	r2, r4, #26
 800869a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800869c:	9306      	str	r3, [sp, #24]
 800869e:	eba3 0309 	sub.w	r3, r3, r9
 80086a2:	455b      	cmp	r3, fp
 80086a4:	dc31      	bgt.n	800870a <_printf_float+0x36e>
 80086a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a8:	459a      	cmp	sl, r3
 80086aa:	dc3a      	bgt.n	8008722 <_printf_float+0x386>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	07da      	lsls	r2, r3, #31
 80086b0:	d437      	bmi.n	8008722 <_printf_float+0x386>
 80086b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b4:	ebaa 0903 	sub.w	r9, sl, r3
 80086b8:	9b06      	ldr	r3, [sp, #24]
 80086ba:	ebaa 0303 	sub.w	r3, sl, r3
 80086be:	4599      	cmp	r9, r3
 80086c0:	bfa8      	it	ge
 80086c2:	4699      	movge	r9, r3
 80086c4:	f1b9 0f00 	cmp.w	r9, #0
 80086c8:	dc33      	bgt.n	8008732 <_printf_float+0x396>
 80086ca:	f04f 0800 	mov.w	r8, #0
 80086ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086d2:	f104 0b1a 	add.w	fp, r4, #26
 80086d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d8:	ebaa 0303 	sub.w	r3, sl, r3
 80086dc:	eba3 0309 	sub.w	r3, r3, r9
 80086e0:	4543      	cmp	r3, r8
 80086e2:	f77f af79 	ble.w	80085d8 <_printf_float+0x23c>
 80086e6:	2301      	movs	r3, #1
 80086e8:	465a      	mov	r2, fp
 80086ea:	4631      	mov	r1, r6
 80086ec:	4628      	mov	r0, r5
 80086ee:	47b8      	blx	r7
 80086f0:	3001      	adds	r0, #1
 80086f2:	f43f aeae 	beq.w	8008452 <_printf_float+0xb6>
 80086f6:	f108 0801 	add.w	r8, r8, #1
 80086fa:	e7ec      	b.n	80086d6 <_printf_float+0x33a>
 80086fc:	4642      	mov	r2, r8
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	d1c2      	bne.n	800868e <_printf_float+0x2f2>
 8008708:	e6a3      	b.n	8008452 <_printf_float+0xb6>
 800870a:	2301      	movs	r3, #1
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	9206      	str	r2, [sp, #24]
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f ae9c 	beq.w	8008452 <_printf_float+0xb6>
 800871a:	9a06      	ldr	r2, [sp, #24]
 800871c:	f10b 0b01 	add.w	fp, fp, #1
 8008720:	e7bb      	b.n	800869a <_printf_float+0x2fe>
 8008722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	d1c0      	bne.n	80086b2 <_printf_float+0x316>
 8008730:	e68f      	b.n	8008452 <_printf_float+0xb6>
 8008732:	9a06      	ldr	r2, [sp, #24]
 8008734:	464b      	mov	r3, r9
 8008736:	4442      	add	r2, r8
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	47b8      	blx	r7
 800873e:	3001      	adds	r0, #1
 8008740:	d1c3      	bne.n	80086ca <_printf_float+0x32e>
 8008742:	e686      	b.n	8008452 <_printf_float+0xb6>
 8008744:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008748:	f1ba 0f01 	cmp.w	sl, #1
 800874c:	dc01      	bgt.n	8008752 <_printf_float+0x3b6>
 800874e:	07db      	lsls	r3, r3, #31
 8008750:	d536      	bpl.n	80087c0 <_printf_float+0x424>
 8008752:	2301      	movs	r3, #1
 8008754:	4642      	mov	r2, r8
 8008756:	4631      	mov	r1, r6
 8008758:	4628      	mov	r0, r5
 800875a:	47b8      	blx	r7
 800875c:	3001      	adds	r0, #1
 800875e:	f43f ae78 	beq.w	8008452 <_printf_float+0xb6>
 8008762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008766:	4631      	mov	r1, r6
 8008768:	4628      	mov	r0, r5
 800876a:	47b8      	blx	r7
 800876c:	3001      	adds	r0, #1
 800876e:	f43f ae70 	beq.w	8008452 <_printf_float+0xb6>
 8008772:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800877e:	f7f8 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8008782:	b9c0      	cbnz	r0, 80087b6 <_printf_float+0x41a>
 8008784:	4653      	mov	r3, sl
 8008786:	f108 0201 	add.w	r2, r8, #1
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	d10c      	bne.n	80087ae <_printf_float+0x412>
 8008794:	e65d      	b.n	8008452 <_printf_float+0xb6>
 8008796:	2301      	movs	r3, #1
 8008798:	465a      	mov	r2, fp
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f ae56 	beq.w	8008452 <_printf_float+0xb6>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	45d0      	cmp	r8, sl
 80087ac:	dbf3      	blt.n	8008796 <_printf_float+0x3fa>
 80087ae:	464b      	mov	r3, r9
 80087b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80087b4:	e6df      	b.n	8008576 <_printf_float+0x1da>
 80087b6:	f04f 0800 	mov.w	r8, #0
 80087ba:	f104 0b1a 	add.w	fp, r4, #26
 80087be:	e7f4      	b.n	80087aa <_printf_float+0x40e>
 80087c0:	2301      	movs	r3, #1
 80087c2:	4642      	mov	r2, r8
 80087c4:	e7e1      	b.n	800878a <_printf_float+0x3ee>
 80087c6:	2301      	movs	r3, #1
 80087c8:	464a      	mov	r2, r9
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f ae3e 	beq.w	8008452 <_printf_float+0xb6>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087de:	1a5b      	subs	r3, r3, r1
 80087e0:	4543      	cmp	r3, r8
 80087e2:	dcf0      	bgt.n	80087c6 <_printf_float+0x42a>
 80087e4:	e6fc      	b.n	80085e0 <_printf_float+0x244>
 80087e6:	f04f 0800 	mov.w	r8, #0
 80087ea:	f104 0919 	add.w	r9, r4, #25
 80087ee:	e7f4      	b.n	80087da <_printf_float+0x43e>

080087f0 <_printf_common>:
 80087f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f4:	4616      	mov	r6, r2
 80087f6:	4698      	mov	r8, r3
 80087f8:	688a      	ldr	r2, [r1, #8]
 80087fa:	690b      	ldr	r3, [r1, #16]
 80087fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008800:	4293      	cmp	r3, r2
 8008802:	bfb8      	it	lt
 8008804:	4613      	movlt	r3, r2
 8008806:	6033      	str	r3, [r6, #0]
 8008808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800880c:	4607      	mov	r7, r0
 800880e:	460c      	mov	r4, r1
 8008810:	b10a      	cbz	r2, 8008816 <_printf_common+0x26>
 8008812:	3301      	adds	r3, #1
 8008814:	6033      	str	r3, [r6, #0]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	0699      	lsls	r1, r3, #26
 800881a:	bf42      	ittt	mi
 800881c:	6833      	ldrmi	r3, [r6, #0]
 800881e:	3302      	addmi	r3, #2
 8008820:	6033      	strmi	r3, [r6, #0]
 8008822:	6825      	ldr	r5, [r4, #0]
 8008824:	f015 0506 	ands.w	r5, r5, #6
 8008828:	d106      	bne.n	8008838 <_printf_common+0x48>
 800882a:	f104 0a19 	add.w	sl, r4, #25
 800882e:	68e3      	ldr	r3, [r4, #12]
 8008830:	6832      	ldr	r2, [r6, #0]
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	42ab      	cmp	r3, r5
 8008836:	dc26      	bgt.n	8008886 <_printf_common+0x96>
 8008838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	3b00      	subs	r3, #0
 8008840:	bf18      	it	ne
 8008842:	2301      	movne	r3, #1
 8008844:	0692      	lsls	r2, r2, #26
 8008846:	d42b      	bmi.n	80088a0 <_printf_common+0xb0>
 8008848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800884c:	4641      	mov	r1, r8
 800884e:	4638      	mov	r0, r7
 8008850:	47c8      	blx	r9
 8008852:	3001      	adds	r0, #1
 8008854:	d01e      	beq.n	8008894 <_printf_common+0xa4>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	6922      	ldr	r2, [r4, #16]
 800885a:	f003 0306 	and.w	r3, r3, #6
 800885e:	2b04      	cmp	r3, #4
 8008860:	bf02      	ittt	eq
 8008862:	68e5      	ldreq	r5, [r4, #12]
 8008864:	6833      	ldreq	r3, [r6, #0]
 8008866:	1aed      	subeq	r5, r5, r3
 8008868:	68a3      	ldr	r3, [r4, #8]
 800886a:	bf0c      	ite	eq
 800886c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008870:	2500      	movne	r5, #0
 8008872:	4293      	cmp	r3, r2
 8008874:	bfc4      	itt	gt
 8008876:	1a9b      	subgt	r3, r3, r2
 8008878:	18ed      	addgt	r5, r5, r3
 800887a:	2600      	movs	r6, #0
 800887c:	341a      	adds	r4, #26
 800887e:	42b5      	cmp	r5, r6
 8008880:	d11a      	bne.n	80088b8 <_printf_common+0xc8>
 8008882:	2000      	movs	r0, #0
 8008884:	e008      	b.n	8008898 <_printf_common+0xa8>
 8008886:	2301      	movs	r3, #1
 8008888:	4652      	mov	r2, sl
 800888a:	4641      	mov	r1, r8
 800888c:	4638      	mov	r0, r7
 800888e:	47c8      	blx	r9
 8008890:	3001      	adds	r0, #1
 8008892:	d103      	bne.n	800889c <_printf_common+0xac>
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889c:	3501      	adds	r5, #1
 800889e:	e7c6      	b.n	800882e <_printf_common+0x3e>
 80088a0:	18e1      	adds	r1, r4, r3
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	2030      	movs	r0, #48	@ 0x30
 80088a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088aa:	4422      	add	r2, r4
 80088ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088b4:	3302      	adds	r3, #2
 80088b6:	e7c7      	b.n	8008848 <_printf_common+0x58>
 80088b8:	2301      	movs	r3, #1
 80088ba:	4622      	mov	r2, r4
 80088bc:	4641      	mov	r1, r8
 80088be:	4638      	mov	r0, r7
 80088c0:	47c8      	blx	r9
 80088c2:	3001      	adds	r0, #1
 80088c4:	d0e6      	beq.n	8008894 <_printf_common+0xa4>
 80088c6:	3601      	adds	r6, #1
 80088c8:	e7d9      	b.n	800887e <_printf_common+0x8e>
	...

080088cc <_printf_i>:
 80088cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088d0:	7e0f      	ldrb	r7, [r1, #24]
 80088d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088d4:	2f78      	cmp	r7, #120	@ 0x78
 80088d6:	4691      	mov	r9, r2
 80088d8:	4680      	mov	r8, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	469a      	mov	sl, r3
 80088de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088e2:	d807      	bhi.n	80088f4 <_printf_i+0x28>
 80088e4:	2f62      	cmp	r7, #98	@ 0x62
 80088e6:	d80a      	bhi.n	80088fe <_printf_i+0x32>
 80088e8:	2f00      	cmp	r7, #0
 80088ea:	f000 80d1 	beq.w	8008a90 <_printf_i+0x1c4>
 80088ee:	2f58      	cmp	r7, #88	@ 0x58
 80088f0:	f000 80b8 	beq.w	8008a64 <_printf_i+0x198>
 80088f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088fc:	e03a      	b.n	8008974 <_printf_i+0xa8>
 80088fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008902:	2b15      	cmp	r3, #21
 8008904:	d8f6      	bhi.n	80088f4 <_printf_i+0x28>
 8008906:	a101      	add	r1, pc, #4	@ (adr r1, 800890c <_printf_i+0x40>)
 8008908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800890c:	08008965 	.word	0x08008965
 8008910:	08008979 	.word	0x08008979
 8008914:	080088f5 	.word	0x080088f5
 8008918:	080088f5 	.word	0x080088f5
 800891c:	080088f5 	.word	0x080088f5
 8008920:	080088f5 	.word	0x080088f5
 8008924:	08008979 	.word	0x08008979
 8008928:	080088f5 	.word	0x080088f5
 800892c:	080088f5 	.word	0x080088f5
 8008930:	080088f5 	.word	0x080088f5
 8008934:	080088f5 	.word	0x080088f5
 8008938:	08008a77 	.word	0x08008a77
 800893c:	080089a3 	.word	0x080089a3
 8008940:	08008a31 	.word	0x08008a31
 8008944:	080088f5 	.word	0x080088f5
 8008948:	080088f5 	.word	0x080088f5
 800894c:	08008a99 	.word	0x08008a99
 8008950:	080088f5 	.word	0x080088f5
 8008954:	080089a3 	.word	0x080089a3
 8008958:	080088f5 	.word	0x080088f5
 800895c:	080088f5 	.word	0x080088f5
 8008960:	08008a39 	.word	0x08008a39
 8008964:	6833      	ldr	r3, [r6, #0]
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6032      	str	r2, [r6, #0]
 800896c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008974:	2301      	movs	r3, #1
 8008976:	e09c      	b.n	8008ab2 <_printf_i+0x1e6>
 8008978:	6833      	ldr	r3, [r6, #0]
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	1d19      	adds	r1, r3, #4
 800897e:	6031      	str	r1, [r6, #0]
 8008980:	0606      	lsls	r6, r0, #24
 8008982:	d501      	bpl.n	8008988 <_printf_i+0xbc>
 8008984:	681d      	ldr	r5, [r3, #0]
 8008986:	e003      	b.n	8008990 <_printf_i+0xc4>
 8008988:	0645      	lsls	r5, r0, #25
 800898a:	d5fb      	bpl.n	8008984 <_printf_i+0xb8>
 800898c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008990:	2d00      	cmp	r5, #0
 8008992:	da03      	bge.n	800899c <_printf_i+0xd0>
 8008994:	232d      	movs	r3, #45	@ 0x2d
 8008996:	426d      	negs	r5, r5
 8008998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800899c:	4858      	ldr	r0, [pc, #352]	@ (8008b00 <_printf_i+0x234>)
 800899e:	230a      	movs	r3, #10
 80089a0:	e011      	b.n	80089c6 <_printf_i+0xfa>
 80089a2:	6821      	ldr	r1, [r4, #0]
 80089a4:	6833      	ldr	r3, [r6, #0]
 80089a6:	0608      	lsls	r0, r1, #24
 80089a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80089ac:	d402      	bmi.n	80089b4 <_printf_i+0xe8>
 80089ae:	0649      	lsls	r1, r1, #25
 80089b0:	bf48      	it	mi
 80089b2:	b2ad      	uxthmi	r5, r5
 80089b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80089b6:	4852      	ldr	r0, [pc, #328]	@ (8008b00 <_printf_i+0x234>)
 80089b8:	6033      	str	r3, [r6, #0]
 80089ba:	bf14      	ite	ne
 80089bc:	230a      	movne	r3, #10
 80089be:	2308      	moveq	r3, #8
 80089c0:	2100      	movs	r1, #0
 80089c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089c6:	6866      	ldr	r6, [r4, #4]
 80089c8:	60a6      	str	r6, [r4, #8]
 80089ca:	2e00      	cmp	r6, #0
 80089cc:	db05      	blt.n	80089da <_printf_i+0x10e>
 80089ce:	6821      	ldr	r1, [r4, #0]
 80089d0:	432e      	orrs	r6, r5
 80089d2:	f021 0104 	bic.w	r1, r1, #4
 80089d6:	6021      	str	r1, [r4, #0]
 80089d8:	d04b      	beq.n	8008a72 <_printf_i+0x1a6>
 80089da:	4616      	mov	r6, r2
 80089dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80089e0:	fb03 5711 	mls	r7, r3, r1, r5
 80089e4:	5dc7      	ldrb	r7, [r0, r7]
 80089e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089ea:	462f      	mov	r7, r5
 80089ec:	42bb      	cmp	r3, r7
 80089ee:	460d      	mov	r5, r1
 80089f0:	d9f4      	bls.n	80089dc <_printf_i+0x110>
 80089f2:	2b08      	cmp	r3, #8
 80089f4:	d10b      	bne.n	8008a0e <_printf_i+0x142>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	07df      	lsls	r7, r3, #31
 80089fa:	d508      	bpl.n	8008a0e <_printf_i+0x142>
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	6861      	ldr	r1, [r4, #4]
 8008a00:	4299      	cmp	r1, r3
 8008a02:	bfde      	ittt	le
 8008a04:	2330      	movle	r3, #48	@ 0x30
 8008a06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a0e:	1b92      	subs	r2, r2, r6
 8008a10:	6122      	str	r2, [r4, #16]
 8008a12:	f8cd a000 	str.w	sl, [sp]
 8008a16:	464b      	mov	r3, r9
 8008a18:	aa03      	add	r2, sp, #12
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	f7ff fee7 	bl	80087f0 <_printf_common>
 8008a22:	3001      	adds	r0, #1
 8008a24:	d14a      	bne.n	8008abc <_printf_i+0x1f0>
 8008a26:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2a:	b004      	add	sp, #16
 8008a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	f043 0320 	orr.w	r3, r3, #32
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	4832      	ldr	r0, [pc, #200]	@ (8008b04 <_printf_i+0x238>)
 8008a3a:	2778      	movs	r7, #120	@ 0x78
 8008a3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	6831      	ldr	r1, [r6, #0]
 8008a44:	061f      	lsls	r7, r3, #24
 8008a46:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a4a:	d402      	bmi.n	8008a52 <_printf_i+0x186>
 8008a4c:	065f      	lsls	r7, r3, #25
 8008a4e:	bf48      	it	mi
 8008a50:	b2ad      	uxthmi	r5, r5
 8008a52:	6031      	str	r1, [r6, #0]
 8008a54:	07d9      	lsls	r1, r3, #31
 8008a56:	bf44      	itt	mi
 8008a58:	f043 0320 	orrmi.w	r3, r3, #32
 8008a5c:	6023      	strmi	r3, [r4, #0]
 8008a5e:	b11d      	cbz	r5, 8008a68 <_printf_i+0x19c>
 8008a60:	2310      	movs	r3, #16
 8008a62:	e7ad      	b.n	80089c0 <_printf_i+0xf4>
 8008a64:	4826      	ldr	r0, [pc, #152]	@ (8008b00 <_printf_i+0x234>)
 8008a66:	e7e9      	b.n	8008a3c <_printf_i+0x170>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	f023 0320 	bic.w	r3, r3, #32
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	e7f6      	b.n	8008a60 <_printf_i+0x194>
 8008a72:	4616      	mov	r6, r2
 8008a74:	e7bd      	b.n	80089f2 <_printf_i+0x126>
 8008a76:	6833      	ldr	r3, [r6, #0]
 8008a78:	6825      	ldr	r5, [r4, #0]
 8008a7a:	6961      	ldr	r1, [r4, #20]
 8008a7c:	1d18      	adds	r0, r3, #4
 8008a7e:	6030      	str	r0, [r6, #0]
 8008a80:	062e      	lsls	r6, r5, #24
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	d501      	bpl.n	8008a8a <_printf_i+0x1be>
 8008a86:	6019      	str	r1, [r3, #0]
 8008a88:	e002      	b.n	8008a90 <_printf_i+0x1c4>
 8008a8a:	0668      	lsls	r0, r5, #25
 8008a8c:	d5fb      	bpl.n	8008a86 <_printf_i+0x1ba>
 8008a8e:	8019      	strh	r1, [r3, #0]
 8008a90:	2300      	movs	r3, #0
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	4616      	mov	r6, r2
 8008a96:	e7bc      	b.n	8008a12 <_printf_i+0x146>
 8008a98:	6833      	ldr	r3, [r6, #0]
 8008a9a:	1d1a      	adds	r2, r3, #4
 8008a9c:	6032      	str	r2, [r6, #0]
 8008a9e:	681e      	ldr	r6, [r3, #0]
 8008aa0:	6862      	ldr	r2, [r4, #4]
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f7f7 fb9b 	bl	80001e0 <memchr>
 8008aaa:	b108      	cbz	r0, 8008ab0 <_printf_i+0x1e4>
 8008aac:	1b80      	subs	r0, r0, r6
 8008aae:	6060      	str	r0, [r4, #4]
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aba:	e7aa      	b.n	8008a12 <_printf_i+0x146>
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	4632      	mov	r2, r6
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	47d0      	blx	sl
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d0ad      	beq.n	8008a26 <_printf_i+0x15a>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	079b      	lsls	r3, r3, #30
 8008ace:	d413      	bmi.n	8008af8 <_printf_i+0x22c>
 8008ad0:	68e0      	ldr	r0, [r4, #12]
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	4298      	cmp	r0, r3
 8008ad6:	bfb8      	it	lt
 8008ad8:	4618      	movlt	r0, r3
 8008ada:	e7a6      	b.n	8008a2a <_printf_i+0x15e>
 8008adc:	2301      	movs	r3, #1
 8008ade:	4632      	mov	r2, r6
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	47d0      	blx	sl
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d09d      	beq.n	8008a26 <_printf_i+0x15a>
 8008aea:	3501      	adds	r5, #1
 8008aec:	68e3      	ldr	r3, [r4, #12]
 8008aee:	9903      	ldr	r1, [sp, #12]
 8008af0:	1a5b      	subs	r3, r3, r1
 8008af2:	42ab      	cmp	r3, r5
 8008af4:	dcf2      	bgt.n	8008adc <_printf_i+0x210>
 8008af6:	e7eb      	b.n	8008ad0 <_printf_i+0x204>
 8008af8:	2500      	movs	r5, #0
 8008afa:	f104 0619 	add.w	r6, r4, #25
 8008afe:	e7f5      	b.n	8008aec <_printf_i+0x220>
 8008b00:	0800be9a 	.word	0x0800be9a
 8008b04:	0800beab 	.word	0x0800beab

08008b08 <std>:
 8008b08:	2300      	movs	r3, #0
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b16:	6083      	str	r3, [r0, #8]
 8008b18:	8181      	strh	r1, [r0, #12]
 8008b1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b1c:	81c2      	strh	r2, [r0, #14]
 8008b1e:	6183      	str	r3, [r0, #24]
 8008b20:	4619      	mov	r1, r3
 8008b22:	2208      	movs	r2, #8
 8008b24:	305c      	adds	r0, #92	@ 0x5c
 8008b26:	f000 f916 	bl	8008d56 <memset>
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b60 <std+0x58>)
 8008b2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b64 <std+0x5c>)
 8008b30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b32:	4b0d      	ldr	r3, [pc, #52]	@ (8008b68 <std+0x60>)
 8008b34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b36:	4b0d      	ldr	r3, [pc, #52]	@ (8008b6c <std+0x64>)
 8008b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b70 <std+0x68>)
 8008b3c:	6224      	str	r4, [r4, #32]
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	d006      	beq.n	8008b50 <std+0x48>
 8008b42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b46:	4294      	cmp	r4, r2
 8008b48:	d002      	beq.n	8008b50 <std+0x48>
 8008b4a:	33d0      	adds	r3, #208	@ 0xd0
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d105      	bne.n	8008b5c <std+0x54>
 8008b50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b58:	f000 b97a 	b.w	8008e50 <__retarget_lock_init_recursive>
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	bf00      	nop
 8008b60:	08008cd1 	.word	0x08008cd1
 8008b64:	08008cf3 	.word	0x08008cf3
 8008b68:	08008d2b 	.word	0x08008d2b
 8008b6c:	08008d4f 	.word	0x08008d4f
 8008b70:	20003714 	.word	0x20003714

08008b74 <stdio_exit_handler>:
 8008b74:	4a02      	ldr	r2, [pc, #8]	@ (8008b80 <stdio_exit_handler+0xc>)
 8008b76:	4903      	ldr	r1, [pc, #12]	@ (8008b84 <stdio_exit_handler+0x10>)
 8008b78:	4803      	ldr	r0, [pc, #12]	@ (8008b88 <stdio_exit_handler+0x14>)
 8008b7a:	f000 b869 	b.w	8008c50 <_fwalk_sglue>
 8008b7e:	bf00      	nop
 8008b80:	200000fc 	.word	0x200000fc
 8008b84:	0800a7b5 	.word	0x0800a7b5
 8008b88:	2000010c 	.word	0x2000010c

08008b8c <cleanup_stdio>:
 8008b8c:	6841      	ldr	r1, [r0, #4]
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc0 <cleanup_stdio+0x34>)
 8008b90:	4299      	cmp	r1, r3
 8008b92:	b510      	push	{r4, lr}
 8008b94:	4604      	mov	r4, r0
 8008b96:	d001      	beq.n	8008b9c <cleanup_stdio+0x10>
 8008b98:	f001 fe0c 	bl	800a7b4 <_fflush_r>
 8008b9c:	68a1      	ldr	r1, [r4, #8]
 8008b9e:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <cleanup_stdio+0x38>)
 8008ba0:	4299      	cmp	r1, r3
 8008ba2:	d002      	beq.n	8008baa <cleanup_stdio+0x1e>
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f001 fe05 	bl	800a7b4 <_fflush_r>
 8008baa:	68e1      	ldr	r1, [r4, #12]
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <cleanup_stdio+0x3c>)
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	d004      	beq.n	8008bbc <cleanup_stdio+0x30>
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb8:	f001 bdfc 	b.w	800a7b4 <_fflush_r>
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20003714 	.word	0x20003714
 8008bc4:	2000377c 	.word	0x2000377c
 8008bc8:	200037e4 	.word	0x200037e4

08008bcc <global_stdio_init.part.0>:
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	4b0b      	ldr	r3, [pc, #44]	@ (8008bfc <global_stdio_init.part.0+0x30>)
 8008bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8008c00 <global_stdio_init.part.0+0x34>)
 8008bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8008c04 <global_stdio_init.part.0+0x38>)
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2104      	movs	r1, #4
 8008bdc:	f7ff ff94 	bl	8008b08 <std>
 8008be0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008be4:	2201      	movs	r2, #1
 8008be6:	2109      	movs	r1, #9
 8008be8:	f7ff ff8e 	bl	8008b08 <std>
 8008bec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf6:	2112      	movs	r1, #18
 8008bf8:	f7ff bf86 	b.w	8008b08 <std>
 8008bfc:	2000384c 	.word	0x2000384c
 8008c00:	20003714 	.word	0x20003714
 8008c04:	08008b75 	.word	0x08008b75

08008c08 <__sfp_lock_acquire>:
 8008c08:	4801      	ldr	r0, [pc, #4]	@ (8008c10 <__sfp_lock_acquire+0x8>)
 8008c0a:	f000 b922 	b.w	8008e52 <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20003855 	.word	0x20003855

08008c14 <__sfp_lock_release>:
 8008c14:	4801      	ldr	r0, [pc, #4]	@ (8008c1c <__sfp_lock_release+0x8>)
 8008c16:	f000 b91d 	b.w	8008e54 <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	20003855 	.word	0x20003855

08008c20 <__sinit>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4604      	mov	r4, r0
 8008c24:	f7ff fff0 	bl	8008c08 <__sfp_lock_acquire>
 8008c28:	6a23      	ldr	r3, [r4, #32]
 8008c2a:	b11b      	cbz	r3, 8008c34 <__sinit+0x14>
 8008c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c30:	f7ff bff0 	b.w	8008c14 <__sfp_lock_release>
 8008c34:	4b04      	ldr	r3, [pc, #16]	@ (8008c48 <__sinit+0x28>)
 8008c36:	6223      	str	r3, [r4, #32]
 8008c38:	4b04      	ldr	r3, [pc, #16]	@ (8008c4c <__sinit+0x2c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f5      	bne.n	8008c2c <__sinit+0xc>
 8008c40:	f7ff ffc4 	bl	8008bcc <global_stdio_init.part.0>
 8008c44:	e7f2      	b.n	8008c2c <__sinit+0xc>
 8008c46:	bf00      	nop
 8008c48:	08008b8d 	.word	0x08008b8d
 8008c4c:	2000384c 	.word	0x2000384c

08008c50 <_fwalk_sglue>:
 8008c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c54:	4607      	mov	r7, r0
 8008c56:	4688      	mov	r8, r1
 8008c58:	4614      	mov	r4, r2
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c60:	f1b9 0901 	subs.w	r9, r9, #1
 8008c64:	d505      	bpl.n	8008c72 <_fwalk_sglue+0x22>
 8008c66:	6824      	ldr	r4, [r4, #0]
 8008c68:	2c00      	cmp	r4, #0
 8008c6a:	d1f7      	bne.n	8008c5c <_fwalk_sglue+0xc>
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d907      	bls.n	8008c88 <_fwalk_sglue+0x38>
 8008c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	d003      	beq.n	8008c88 <_fwalk_sglue+0x38>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4638      	mov	r0, r7
 8008c84:	47c0      	blx	r8
 8008c86:	4306      	orrs	r6, r0
 8008c88:	3568      	adds	r5, #104	@ 0x68
 8008c8a:	e7e9      	b.n	8008c60 <_fwalk_sglue+0x10>

08008c8c <siprintf>:
 8008c8c:	b40e      	push	{r1, r2, r3}
 8008c8e:	b510      	push	{r4, lr}
 8008c90:	b09d      	sub	sp, #116	@ 0x74
 8008c92:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c94:	9002      	str	r0, [sp, #8]
 8008c96:	9006      	str	r0, [sp, #24]
 8008c98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c9c:	480a      	ldr	r0, [pc, #40]	@ (8008cc8 <siprintf+0x3c>)
 8008c9e:	9107      	str	r1, [sp, #28]
 8008ca0:	9104      	str	r1, [sp, #16]
 8008ca2:	490a      	ldr	r1, [pc, #40]	@ (8008ccc <siprintf+0x40>)
 8008ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca8:	9105      	str	r1, [sp, #20]
 8008caa:	2400      	movs	r4, #0
 8008cac:	a902      	add	r1, sp, #8
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008cb4:	f001 fbfe 	bl	800a4b4 <_svfiprintf_r>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	701c      	strb	r4, [r3, #0]
 8008cbc:	b01d      	add	sp, #116	@ 0x74
 8008cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc2:	b003      	add	sp, #12
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	20000108 	.word	0x20000108
 8008ccc:	ffff0208 	.word	0xffff0208

08008cd0 <__sread>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	f000 f86c 	bl	8008db4 <_read_r>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	bfab      	itete	ge
 8008ce0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ce4:	181b      	addge	r3, r3, r0
 8008ce6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cea:	bfac      	ite	ge
 8008cec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cee:	81a3      	strhlt	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__swrite>:
 8008cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	898b      	ldrh	r3, [r1, #12]
 8008cfa:	05db      	lsls	r3, r3, #23
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	4616      	mov	r6, r2
 8008d02:	d505      	bpl.n	8008d10 <__swrite+0x1e>
 8008d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d08:	2302      	movs	r3, #2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f000 f840 	bl	8008d90 <_lseek_r>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	f000 b857 	b.w	8008dd8 <_write_r>

08008d2a <__sseek>:
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d32:	f000 f82d 	bl	8008d90 <_lseek_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	bf15      	itete	ne
 8008d3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d46:	81a3      	strheq	r3, [r4, #12]
 8008d48:	bf18      	it	ne
 8008d4a:	81a3      	strhne	r3, [r4, #12]
 8008d4c:	bd10      	pop	{r4, pc}

08008d4e <__sclose>:
 8008d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d52:	f000 b80d 	b.w	8008d70 <_close_r>

08008d56 <memset>:
 8008d56:	4402      	add	r2, r0
 8008d58:	4603      	mov	r3, r0
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d100      	bne.n	8008d60 <memset+0xa>
 8008d5e:	4770      	bx	lr
 8008d60:	f803 1b01 	strb.w	r1, [r3], #1
 8008d64:	e7f9      	b.n	8008d5a <memset+0x4>
	...

08008d68 <_localeconv_r>:
 8008d68:	4800      	ldr	r0, [pc, #0]	@ (8008d6c <_localeconv_r+0x4>)
 8008d6a:	4770      	bx	lr
 8008d6c:	20000248 	.word	0x20000248

08008d70 <_close_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d06      	ldr	r5, [pc, #24]	@ (8008d8c <_close_r+0x1c>)
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7f8 fbea 	bl	8001554 <_close>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_close_r+0x1a>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_close_r+0x1a>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20003850 	.word	0x20003850

08008d90 <_lseek_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	@ (8008db0 <_lseek_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f8 fbff 	bl	80015a2 <_lseek>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_lseek_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_lseek_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20003850 	.word	0x20003850

08008db4 <_read_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	@ (8008dd4 <_read_r+0x20>)
 8008db8:	4604      	mov	r4, r0
 8008dba:	4608      	mov	r0, r1
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	602a      	str	r2, [r5, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f7f8 fb8d 	bl	80014e2 <_read>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_read_r+0x1e>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_read_r+0x1e>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20003850 	.word	0x20003850

08008dd8 <_write_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d07      	ldr	r5, [pc, #28]	@ (8008df8 <_write_r+0x20>)
 8008ddc:	4604      	mov	r4, r0
 8008dde:	4608      	mov	r0, r1
 8008de0:	4611      	mov	r1, r2
 8008de2:	2200      	movs	r2, #0
 8008de4:	602a      	str	r2, [r5, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	f7f8 fb98 	bl	800151c <_write>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_write_r+0x1e>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_write_r+0x1e>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	20003850 	.word	0x20003850

08008dfc <__errno>:
 8008dfc:	4b01      	ldr	r3, [pc, #4]	@ (8008e04 <__errno+0x8>)
 8008dfe:	6818      	ldr	r0, [r3, #0]
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000108 	.word	0x20000108

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	@ (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f002 fff4 	bl	800be08 <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	0800c248 	.word	0x0800c248
 8008e44:	0800c248 	.word	0x0800c248
 8008e48:	0800c248 	.word	0x0800c248
 8008e4c:	0800c24c 	.word	0x0800c24c

08008e50 <__retarget_lock_init_recursive>:
 8008e50:	4770      	bx	lr

08008e52 <__retarget_lock_acquire_recursive>:
 8008e52:	4770      	bx	lr

08008e54 <__retarget_lock_release_recursive>:
 8008e54:	4770      	bx	lr

08008e56 <quorem>:
 8008e56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5a:	6903      	ldr	r3, [r0, #16]
 8008e5c:	690c      	ldr	r4, [r1, #16]
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	4607      	mov	r7, r0
 8008e62:	db7e      	blt.n	8008f62 <quorem+0x10c>
 8008e64:	3c01      	subs	r4, #1
 8008e66:	f101 0814 	add.w	r8, r1, #20
 8008e6a:	00a3      	lsls	r3, r4, #2
 8008e6c:	f100 0514 	add.w	r5, r0, #20
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e80:	3301      	adds	r3, #1
 8008e82:	429a      	cmp	r2, r3
 8008e84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e88:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e8c:	d32e      	bcc.n	8008eec <quorem+0x96>
 8008e8e:	f04f 0a00 	mov.w	sl, #0
 8008e92:	46c4      	mov	ip, r8
 8008e94:	46ae      	mov	lr, r5
 8008e96:	46d3      	mov	fp, sl
 8008e98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e9c:	b298      	uxth	r0, r3
 8008e9e:	fb06 a000 	mla	r0, r6, r0, sl
 8008ea2:	0c02      	lsrs	r2, r0, #16
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	fb06 2303 	mla	r3, r6, r3, r2
 8008eaa:	f8de 2000 	ldr.w	r2, [lr]
 8008eae:	b280      	uxth	r0, r0
 8008eb0:	b292      	uxth	r2, r2
 8008eb2:	1a12      	subs	r2, r2, r0
 8008eb4:	445a      	add	r2, fp
 8008eb6:	f8de 0000 	ldr.w	r0, [lr]
 8008eba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ec4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ec8:	b292      	uxth	r2, r2
 8008eca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ece:	45e1      	cmp	r9, ip
 8008ed0:	f84e 2b04 	str.w	r2, [lr], #4
 8008ed4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ed8:	d2de      	bcs.n	8008e98 <quorem+0x42>
 8008eda:	9b00      	ldr	r3, [sp, #0]
 8008edc:	58eb      	ldr	r3, [r5, r3]
 8008ede:	b92b      	cbnz	r3, 8008eec <quorem+0x96>
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	3b04      	subs	r3, #4
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	d32f      	bcc.n	8008f4a <quorem+0xf4>
 8008eea:	613c      	str	r4, [r7, #16]
 8008eec:	4638      	mov	r0, r7
 8008eee:	f001 f97d 	bl	800a1ec <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	db25      	blt.n	8008f42 <quorem+0xec>
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f858 2b04 	ldr.w	r2, [r8], #4
 8008efe:	f8d1 c000 	ldr.w	ip, [r1]
 8008f02:	fa1f fe82 	uxth.w	lr, r2
 8008f06:	fa1f f38c 	uxth.w	r3, ip
 8008f0a:	eba3 030e 	sub.w	r3, r3, lr
 8008f0e:	4403      	add	r3, r0
 8008f10:	0c12      	lsrs	r2, r2, #16
 8008f12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f20:	45c1      	cmp	r9, r8
 8008f22:	f841 3b04 	str.w	r3, [r1], #4
 8008f26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f2a:	d2e6      	bcs.n	8008efa <quorem+0xa4>
 8008f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f34:	b922      	cbnz	r2, 8008f40 <quorem+0xea>
 8008f36:	3b04      	subs	r3, #4
 8008f38:	429d      	cmp	r5, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	d30b      	bcc.n	8008f56 <quorem+0x100>
 8008f3e:	613c      	str	r4, [r7, #16]
 8008f40:	3601      	adds	r6, #1
 8008f42:	4630      	mov	r0, r6
 8008f44:	b003      	add	sp, #12
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d1cb      	bne.n	8008eea <quorem+0x94>
 8008f52:	3c01      	subs	r4, #1
 8008f54:	e7c6      	b.n	8008ee4 <quorem+0x8e>
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	d1ef      	bne.n	8008f3e <quorem+0xe8>
 8008f5e:	3c01      	subs	r4, #1
 8008f60:	e7ea      	b.n	8008f38 <quorem+0xe2>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7ee      	b.n	8008f44 <quorem+0xee>
	...

08008f68 <_dtoa_r>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	69c7      	ldr	r7, [r0, #28]
 8008f6e:	b097      	sub	sp, #92	@ 0x5c
 8008f70:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f74:	ec55 4b10 	vmov	r4, r5, d0
 8008f78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008f7a:	9107      	str	r1, [sp, #28]
 8008f7c:	4681      	mov	r9, r0
 8008f7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f80:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f82:	b97f      	cbnz	r7, 8008fa4 <_dtoa_r+0x3c>
 8008f84:	2010      	movs	r0, #16
 8008f86:	f000 fe09 	bl	8009b9c <malloc>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008f90:	b920      	cbnz	r0, 8008f9c <_dtoa_r+0x34>
 8008f92:	4ba9      	ldr	r3, [pc, #676]	@ (8009238 <_dtoa_r+0x2d0>)
 8008f94:	21ef      	movs	r1, #239	@ 0xef
 8008f96:	48a9      	ldr	r0, [pc, #676]	@ (800923c <_dtoa_r+0x2d4>)
 8008f98:	f001 fc6c 	bl	800a874 <__assert_func>
 8008f9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008fa0:	6007      	str	r7, [r0, #0]
 8008fa2:	60c7      	str	r7, [r0, #12]
 8008fa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fa8:	6819      	ldr	r1, [r3, #0]
 8008faa:	b159      	cbz	r1, 8008fc4 <_dtoa_r+0x5c>
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	604a      	str	r2, [r1, #4]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4093      	lsls	r3, r2
 8008fb4:	608b      	str	r3, [r1, #8]
 8008fb6:	4648      	mov	r0, r9
 8008fb8:	f000 fee6 	bl	8009d88 <_Bfree>
 8008fbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	1e2b      	subs	r3, r5, #0
 8008fc6:	bfb9      	ittee	lt
 8008fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008fcc:	9305      	strlt	r3, [sp, #20]
 8008fce:	2300      	movge	r3, #0
 8008fd0:	6033      	strge	r3, [r6, #0]
 8008fd2:	9f05      	ldr	r7, [sp, #20]
 8008fd4:	4b9a      	ldr	r3, [pc, #616]	@ (8009240 <_dtoa_r+0x2d8>)
 8008fd6:	bfbc      	itt	lt
 8008fd8:	2201      	movlt	r2, #1
 8008fda:	6032      	strlt	r2, [r6, #0]
 8008fdc:	43bb      	bics	r3, r7
 8008fde:	d112      	bne.n	8009006 <_dtoa_r+0x9e>
 8008fe0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008fe6:	6013      	str	r3, [r2, #0]
 8008fe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fec:	4323      	orrs	r3, r4
 8008fee:	f000 855a 	beq.w	8009aa6 <_dtoa_r+0xb3e>
 8008ff2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ff4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009254 <_dtoa_r+0x2ec>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 855c 	beq.w	8009ab6 <_dtoa_r+0xb4e>
 8008ffe:	f10a 0303 	add.w	r3, sl, #3
 8009002:	f000 bd56 	b.w	8009ab2 <_dtoa_r+0xb4a>
 8009006:	ed9d 7b04 	vldr	d7, [sp, #16]
 800900a:	2200      	movs	r2, #0
 800900c:	ec51 0b17 	vmov	r0, r1, d7
 8009010:	2300      	movs	r3, #0
 8009012:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009016:	f7f7 fd5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800901a:	4680      	mov	r8, r0
 800901c:	b158      	cbz	r0, 8009036 <_dtoa_r+0xce>
 800901e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009020:	2301      	movs	r3, #1
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009026:	b113      	cbz	r3, 800902e <_dtoa_r+0xc6>
 8009028:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800902a:	4b86      	ldr	r3, [pc, #536]	@ (8009244 <_dtoa_r+0x2dc>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009258 <_dtoa_r+0x2f0>
 8009032:	f000 bd40 	b.w	8009ab6 <_dtoa_r+0xb4e>
 8009036:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800903a:	aa14      	add	r2, sp, #80	@ 0x50
 800903c:	a915      	add	r1, sp, #84	@ 0x54
 800903e:	4648      	mov	r0, r9
 8009040:	f001 f984 	bl	800a34c <__d2b>
 8009044:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009048:	9002      	str	r0, [sp, #8]
 800904a:	2e00      	cmp	r6, #0
 800904c:	d078      	beq.n	8009140 <_dtoa_r+0x1d8>
 800904e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009050:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800905c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009060:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009064:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009068:	4619      	mov	r1, r3
 800906a:	2200      	movs	r2, #0
 800906c:	4b76      	ldr	r3, [pc, #472]	@ (8009248 <_dtoa_r+0x2e0>)
 800906e:	f7f7 f913 	bl	8000298 <__aeabi_dsub>
 8009072:	a36b      	add	r3, pc, #428	@ (adr r3, 8009220 <_dtoa_r+0x2b8>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	f7f7 fac6 	bl	8000608 <__aeabi_dmul>
 800907c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009228 <_dtoa_r+0x2c0>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f90b 	bl	800029c <__adddf3>
 8009086:	4604      	mov	r4, r0
 8009088:	4630      	mov	r0, r6
 800908a:	460d      	mov	r5, r1
 800908c:	f7f7 fa52 	bl	8000534 <__aeabi_i2d>
 8009090:	a367      	add	r3, pc, #412	@ (adr r3, 8009230 <_dtoa_r+0x2c8>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	f7f7 fab7 	bl	8000608 <__aeabi_dmul>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4620      	mov	r0, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7f7 f8fb 	bl	800029c <__adddf3>
 80090a6:	4604      	mov	r4, r0
 80090a8:	460d      	mov	r5, r1
 80090aa:	f7f7 fd5d 	bl	8000b68 <__aeabi_d2iz>
 80090ae:	2200      	movs	r2, #0
 80090b0:	4607      	mov	r7, r0
 80090b2:	2300      	movs	r3, #0
 80090b4:	4620      	mov	r0, r4
 80090b6:	4629      	mov	r1, r5
 80090b8:	f7f7 fd18 	bl	8000aec <__aeabi_dcmplt>
 80090bc:	b140      	cbz	r0, 80090d0 <_dtoa_r+0x168>
 80090be:	4638      	mov	r0, r7
 80090c0:	f7f7 fa38 	bl	8000534 <__aeabi_i2d>
 80090c4:	4622      	mov	r2, r4
 80090c6:	462b      	mov	r3, r5
 80090c8:	f7f7 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 80090cc:	b900      	cbnz	r0, 80090d0 <_dtoa_r+0x168>
 80090ce:	3f01      	subs	r7, #1
 80090d0:	2f16      	cmp	r7, #22
 80090d2:	d852      	bhi.n	800917a <_dtoa_r+0x212>
 80090d4:	4b5d      	ldr	r3, [pc, #372]	@ (800924c <_dtoa_r+0x2e4>)
 80090d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090e2:	f7f7 fd03 	bl	8000aec <__aeabi_dcmplt>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d049      	beq.n	800917e <_dtoa_r+0x216>
 80090ea:	3f01      	subs	r7, #1
 80090ec:	2300      	movs	r3, #0
 80090ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80090f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090f2:	1b9b      	subs	r3, r3, r6
 80090f4:	1e5a      	subs	r2, r3, #1
 80090f6:	bf45      	ittet	mi
 80090f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80090fc:	9300      	strmi	r3, [sp, #0]
 80090fe:	2300      	movpl	r3, #0
 8009100:	2300      	movmi	r3, #0
 8009102:	9206      	str	r2, [sp, #24]
 8009104:	bf54      	ite	pl
 8009106:	9300      	strpl	r3, [sp, #0]
 8009108:	9306      	strmi	r3, [sp, #24]
 800910a:	2f00      	cmp	r7, #0
 800910c:	db39      	blt.n	8009182 <_dtoa_r+0x21a>
 800910e:	9b06      	ldr	r3, [sp, #24]
 8009110:	970d      	str	r7, [sp, #52]	@ 0x34
 8009112:	443b      	add	r3, r7
 8009114:	9306      	str	r3, [sp, #24]
 8009116:	2300      	movs	r3, #0
 8009118:	9308      	str	r3, [sp, #32]
 800911a:	9b07      	ldr	r3, [sp, #28]
 800911c:	2b09      	cmp	r3, #9
 800911e:	d863      	bhi.n	80091e8 <_dtoa_r+0x280>
 8009120:	2b05      	cmp	r3, #5
 8009122:	bfc4      	itt	gt
 8009124:	3b04      	subgt	r3, #4
 8009126:	9307      	strgt	r3, [sp, #28]
 8009128:	9b07      	ldr	r3, [sp, #28]
 800912a:	f1a3 0302 	sub.w	r3, r3, #2
 800912e:	bfcc      	ite	gt
 8009130:	2400      	movgt	r4, #0
 8009132:	2401      	movle	r4, #1
 8009134:	2b03      	cmp	r3, #3
 8009136:	d863      	bhi.n	8009200 <_dtoa_r+0x298>
 8009138:	e8df f003 	tbb	[pc, r3]
 800913c:	2b375452 	.word	0x2b375452
 8009140:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009144:	441e      	add	r6, r3
 8009146:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800914a:	2b20      	cmp	r3, #32
 800914c:	bfc1      	itttt	gt
 800914e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009152:	409f      	lslgt	r7, r3
 8009154:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009158:	fa24 f303 	lsrgt.w	r3, r4, r3
 800915c:	bfd6      	itet	le
 800915e:	f1c3 0320 	rsble	r3, r3, #32
 8009162:	ea47 0003 	orrgt.w	r0, r7, r3
 8009166:	fa04 f003 	lslle.w	r0, r4, r3
 800916a:	f7f7 f9d3 	bl	8000514 <__aeabi_ui2d>
 800916e:	2201      	movs	r2, #1
 8009170:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009174:	3e01      	subs	r6, #1
 8009176:	9212      	str	r2, [sp, #72]	@ 0x48
 8009178:	e776      	b.n	8009068 <_dtoa_r+0x100>
 800917a:	2301      	movs	r3, #1
 800917c:	e7b7      	b.n	80090ee <_dtoa_r+0x186>
 800917e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009180:	e7b6      	b.n	80090f0 <_dtoa_r+0x188>
 8009182:	9b00      	ldr	r3, [sp, #0]
 8009184:	1bdb      	subs	r3, r3, r7
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	427b      	negs	r3, r7
 800918a:	9308      	str	r3, [sp, #32]
 800918c:	2300      	movs	r3, #0
 800918e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009190:	e7c3      	b.n	800911a <_dtoa_r+0x1b2>
 8009192:	2301      	movs	r3, #1
 8009194:	9309      	str	r3, [sp, #36]	@ 0x24
 8009196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009198:	eb07 0b03 	add.w	fp, r7, r3
 800919c:	f10b 0301 	add.w	r3, fp, #1
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	bfb8      	it	lt
 80091a6:	2301      	movlt	r3, #1
 80091a8:	e006      	b.n	80091b8 <_dtoa_r+0x250>
 80091aa:	2301      	movs	r3, #1
 80091ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dd28      	ble.n	8009206 <_dtoa_r+0x29e>
 80091b4:	469b      	mov	fp, r3
 80091b6:	9303      	str	r3, [sp, #12]
 80091b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80091bc:	2100      	movs	r1, #0
 80091be:	2204      	movs	r2, #4
 80091c0:	f102 0514 	add.w	r5, r2, #20
 80091c4:	429d      	cmp	r5, r3
 80091c6:	d926      	bls.n	8009216 <_dtoa_r+0x2ae>
 80091c8:	6041      	str	r1, [r0, #4]
 80091ca:	4648      	mov	r0, r9
 80091cc:	f000 fd9c 	bl	8009d08 <_Balloc>
 80091d0:	4682      	mov	sl, r0
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d142      	bne.n	800925c <_dtoa_r+0x2f4>
 80091d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009250 <_dtoa_r+0x2e8>)
 80091d8:	4602      	mov	r2, r0
 80091da:	f240 11af 	movw	r1, #431	@ 0x1af
 80091de:	e6da      	b.n	8008f96 <_dtoa_r+0x2e>
 80091e0:	2300      	movs	r3, #0
 80091e2:	e7e3      	b.n	80091ac <_dtoa_r+0x244>
 80091e4:	2300      	movs	r3, #0
 80091e6:	e7d5      	b.n	8009194 <_dtoa_r+0x22c>
 80091e8:	2401      	movs	r4, #1
 80091ea:	2300      	movs	r3, #0
 80091ec:	9307      	str	r3, [sp, #28]
 80091ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80091f0:	f04f 3bff 	mov.w	fp, #4294967295
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80091fa:	2312      	movs	r3, #18
 80091fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80091fe:	e7db      	b.n	80091b8 <_dtoa_r+0x250>
 8009200:	2301      	movs	r3, #1
 8009202:	9309      	str	r3, [sp, #36]	@ 0x24
 8009204:	e7f4      	b.n	80091f0 <_dtoa_r+0x288>
 8009206:	f04f 0b01 	mov.w	fp, #1
 800920a:	f8cd b00c 	str.w	fp, [sp, #12]
 800920e:	465b      	mov	r3, fp
 8009210:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009214:	e7d0      	b.n	80091b8 <_dtoa_r+0x250>
 8009216:	3101      	adds	r1, #1
 8009218:	0052      	lsls	r2, r2, #1
 800921a:	e7d1      	b.n	80091c0 <_dtoa_r+0x258>
 800921c:	f3af 8000 	nop.w
 8009220:	636f4361 	.word	0x636f4361
 8009224:	3fd287a7 	.word	0x3fd287a7
 8009228:	8b60c8b3 	.word	0x8b60c8b3
 800922c:	3fc68a28 	.word	0x3fc68a28
 8009230:	509f79fb 	.word	0x509f79fb
 8009234:	3fd34413 	.word	0x3fd34413
 8009238:	0800bec9 	.word	0x0800bec9
 800923c:	0800bee0 	.word	0x0800bee0
 8009240:	7ff00000 	.word	0x7ff00000
 8009244:	0800be99 	.word	0x0800be99
 8009248:	3ff80000 	.word	0x3ff80000
 800924c:	0800c030 	.word	0x0800c030
 8009250:	0800bf38 	.word	0x0800bf38
 8009254:	0800bec5 	.word	0x0800bec5
 8009258:	0800be98 	.word	0x0800be98
 800925c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	2b0e      	cmp	r3, #14
 8009266:	f200 80a1 	bhi.w	80093ac <_dtoa_r+0x444>
 800926a:	2c00      	cmp	r4, #0
 800926c:	f000 809e 	beq.w	80093ac <_dtoa_r+0x444>
 8009270:	2f00      	cmp	r7, #0
 8009272:	dd33      	ble.n	80092dc <_dtoa_r+0x374>
 8009274:	4b9c      	ldr	r3, [pc, #624]	@ (80094e8 <_dtoa_r+0x580>)
 8009276:	f007 020f 	and.w	r2, r7, #15
 800927a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800927e:	ed93 7b00 	vldr	d7, [r3]
 8009282:	05f8      	lsls	r0, r7, #23
 8009284:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009288:	ea4f 1427 	mov.w	r4, r7, asr #4
 800928c:	d516      	bpl.n	80092bc <_dtoa_r+0x354>
 800928e:	4b97      	ldr	r3, [pc, #604]	@ (80094ec <_dtoa_r+0x584>)
 8009290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009298:	f7f7 fae0 	bl	800085c <__aeabi_ddiv>
 800929c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092a0:	f004 040f 	and.w	r4, r4, #15
 80092a4:	2603      	movs	r6, #3
 80092a6:	4d91      	ldr	r5, [pc, #580]	@ (80094ec <_dtoa_r+0x584>)
 80092a8:	b954      	cbnz	r4, 80092c0 <_dtoa_r+0x358>
 80092aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092b2:	f7f7 fad3 	bl	800085c <__aeabi_ddiv>
 80092b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ba:	e028      	b.n	800930e <_dtoa_r+0x3a6>
 80092bc:	2602      	movs	r6, #2
 80092be:	e7f2      	b.n	80092a6 <_dtoa_r+0x33e>
 80092c0:	07e1      	lsls	r1, r4, #31
 80092c2:	d508      	bpl.n	80092d6 <_dtoa_r+0x36e>
 80092c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092cc:	f7f7 f99c 	bl	8000608 <__aeabi_dmul>
 80092d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092d4:	3601      	adds	r6, #1
 80092d6:	1064      	asrs	r4, r4, #1
 80092d8:	3508      	adds	r5, #8
 80092da:	e7e5      	b.n	80092a8 <_dtoa_r+0x340>
 80092dc:	f000 80af 	beq.w	800943e <_dtoa_r+0x4d6>
 80092e0:	427c      	negs	r4, r7
 80092e2:	4b81      	ldr	r3, [pc, #516]	@ (80094e8 <_dtoa_r+0x580>)
 80092e4:	4d81      	ldr	r5, [pc, #516]	@ (80094ec <_dtoa_r+0x584>)
 80092e6:	f004 020f 	and.w	r2, r4, #15
 80092ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092f6:	f7f7 f987 	bl	8000608 <__aeabi_dmul>
 80092fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092fe:	1124      	asrs	r4, r4, #4
 8009300:	2300      	movs	r3, #0
 8009302:	2602      	movs	r6, #2
 8009304:	2c00      	cmp	r4, #0
 8009306:	f040 808f 	bne.w	8009428 <_dtoa_r+0x4c0>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1d3      	bne.n	80092b6 <_dtoa_r+0x34e>
 800930e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009310:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8094 	beq.w	8009442 <_dtoa_r+0x4da>
 800931a:	4b75      	ldr	r3, [pc, #468]	@ (80094f0 <_dtoa_r+0x588>)
 800931c:	2200      	movs	r2, #0
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f7 fbe3 	bl	8000aec <__aeabi_dcmplt>
 8009326:	2800      	cmp	r0, #0
 8009328:	f000 808b 	beq.w	8009442 <_dtoa_r+0x4da>
 800932c:	9b03      	ldr	r3, [sp, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8087 	beq.w	8009442 <_dtoa_r+0x4da>
 8009334:	f1bb 0f00 	cmp.w	fp, #0
 8009338:	dd34      	ble.n	80093a4 <_dtoa_r+0x43c>
 800933a:	4620      	mov	r0, r4
 800933c:	4b6d      	ldr	r3, [pc, #436]	@ (80094f4 <_dtoa_r+0x58c>)
 800933e:	2200      	movs	r2, #0
 8009340:	4629      	mov	r1, r5
 8009342:	f7f7 f961 	bl	8000608 <__aeabi_dmul>
 8009346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800934a:	f107 38ff 	add.w	r8, r7, #4294967295
 800934e:	3601      	adds	r6, #1
 8009350:	465c      	mov	r4, fp
 8009352:	4630      	mov	r0, r6
 8009354:	f7f7 f8ee 	bl	8000534 <__aeabi_i2d>
 8009358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935c:	f7f7 f954 	bl	8000608 <__aeabi_dmul>
 8009360:	4b65      	ldr	r3, [pc, #404]	@ (80094f8 <_dtoa_r+0x590>)
 8009362:	2200      	movs	r2, #0
 8009364:	f7f6 ff9a 	bl	800029c <__adddf3>
 8009368:	4605      	mov	r5, r0
 800936a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800936e:	2c00      	cmp	r4, #0
 8009370:	d16a      	bne.n	8009448 <_dtoa_r+0x4e0>
 8009372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009376:	4b61      	ldr	r3, [pc, #388]	@ (80094fc <_dtoa_r+0x594>)
 8009378:	2200      	movs	r2, #0
 800937a:	f7f6 ff8d 	bl	8000298 <__aeabi_dsub>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009386:	462a      	mov	r2, r5
 8009388:	4633      	mov	r3, r6
 800938a:	f7f7 fbcd 	bl	8000b28 <__aeabi_dcmpgt>
 800938e:	2800      	cmp	r0, #0
 8009390:	f040 8298 	bne.w	80098c4 <_dtoa_r+0x95c>
 8009394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009398:	462a      	mov	r2, r5
 800939a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800939e:	f7f7 fba5 	bl	8000aec <__aeabi_dcmplt>
 80093a2:	bb38      	cbnz	r0, 80093f4 <_dtoa_r+0x48c>
 80093a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80093a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80093ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f2c0 8157 	blt.w	8009662 <_dtoa_r+0x6fa>
 80093b4:	2f0e      	cmp	r7, #14
 80093b6:	f300 8154 	bgt.w	8009662 <_dtoa_r+0x6fa>
 80093ba:	4b4b      	ldr	r3, [pc, #300]	@ (80094e8 <_dtoa_r+0x580>)
 80093bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093c0:	ed93 7b00 	vldr	d7, [r3]
 80093c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	ed8d 7b00 	vstr	d7, [sp]
 80093cc:	f280 80e5 	bge.w	800959a <_dtoa_r+0x632>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f300 80e1 	bgt.w	800959a <_dtoa_r+0x632>
 80093d8:	d10c      	bne.n	80093f4 <_dtoa_r+0x48c>
 80093da:	4b48      	ldr	r3, [pc, #288]	@ (80094fc <_dtoa_r+0x594>)
 80093dc:	2200      	movs	r2, #0
 80093de:	ec51 0b17 	vmov	r0, r1, d7
 80093e2:	f7f7 f911 	bl	8000608 <__aeabi_dmul>
 80093e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ea:	f7f7 fb93 	bl	8000b14 <__aeabi_dcmpge>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f000 8266 	beq.w	80098c0 <_dtoa_r+0x958>
 80093f4:	2400      	movs	r4, #0
 80093f6:	4625      	mov	r5, r4
 80093f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093fa:	4656      	mov	r6, sl
 80093fc:	ea6f 0803 	mvn.w	r8, r3
 8009400:	2700      	movs	r7, #0
 8009402:	4621      	mov	r1, r4
 8009404:	4648      	mov	r0, r9
 8009406:	f000 fcbf 	bl	8009d88 <_Bfree>
 800940a:	2d00      	cmp	r5, #0
 800940c:	f000 80bd 	beq.w	800958a <_dtoa_r+0x622>
 8009410:	b12f      	cbz	r7, 800941e <_dtoa_r+0x4b6>
 8009412:	42af      	cmp	r7, r5
 8009414:	d003      	beq.n	800941e <_dtoa_r+0x4b6>
 8009416:	4639      	mov	r1, r7
 8009418:	4648      	mov	r0, r9
 800941a:	f000 fcb5 	bl	8009d88 <_Bfree>
 800941e:	4629      	mov	r1, r5
 8009420:	4648      	mov	r0, r9
 8009422:	f000 fcb1 	bl	8009d88 <_Bfree>
 8009426:	e0b0      	b.n	800958a <_dtoa_r+0x622>
 8009428:	07e2      	lsls	r2, r4, #31
 800942a:	d505      	bpl.n	8009438 <_dtoa_r+0x4d0>
 800942c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009430:	f7f7 f8ea 	bl	8000608 <__aeabi_dmul>
 8009434:	3601      	adds	r6, #1
 8009436:	2301      	movs	r3, #1
 8009438:	1064      	asrs	r4, r4, #1
 800943a:	3508      	adds	r5, #8
 800943c:	e762      	b.n	8009304 <_dtoa_r+0x39c>
 800943e:	2602      	movs	r6, #2
 8009440:	e765      	b.n	800930e <_dtoa_r+0x3a6>
 8009442:	9c03      	ldr	r4, [sp, #12]
 8009444:	46b8      	mov	r8, r7
 8009446:	e784      	b.n	8009352 <_dtoa_r+0x3ea>
 8009448:	4b27      	ldr	r3, [pc, #156]	@ (80094e8 <_dtoa_r+0x580>)
 800944a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800944c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009450:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009454:	4454      	add	r4, sl
 8009456:	2900      	cmp	r1, #0
 8009458:	d054      	beq.n	8009504 <_dtoa_r+0x59c>
 800945a:	4929      	ldr	r1, [pc, #164]	@ (8009500 <_dtoa_r+0x598>)
 800945c:	2000      	movs	r0, #0
 800945e:	f7f7 f9fd 	bl	800085c <__aeabi_ddiv>
 8009462:	4633      	mov	r3, r6
 8009464:	462a      	mov	r2, r5
 8009466:	f7f6 ff17 	bl	8000298 <__aeabi_dsub>
 800946a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800946e:	4656      	mov	r6, sl
 8009470:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009474:	f7f7 fb78 	bl	8000b68 <__aeabi_d2iz>
 8009478:	4605      	mov	r5, r0
 800947a:	f7f7 f85b 	bl	8000534 <__aeabi_i2d>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009486:	f7f6 ff07 	bl	8000298 <__aeabi_dsub>
 800948a:	3530      	adds	r5, #48	@ 0x30
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009494:	f806 5b01 	strb.w	r5, [r6], #1
 8009498:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800949c:	f7f7 fb26 	bl	8000aec <__aeabi_dcmplt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d172      	bne.n	800958a <_dtoa_r+0x622>
 80094a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a8:	4911      	ldr	r1, [pc, #68]	@ (80094f0 <_dtoa_r+0x588>)
 80094aa:	2000      	movs	r0, #0
 80094ac:	f7f6 fef4 	bl	8000298 <__aeabi_dsub>
 80094b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094b4:	f7f7 fb1a 	bl	8000aec <__aeabi_dcmplt>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	f040 80b4 	bne.w	8009626 <_dtoa_r+0x6be>
 80094be:	42a6      	cmp	r6, r4
 80094c0:	f43f af70 	beq.w	80093a4 <_dtoa_r+0x43c>
 80094c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80094c8:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <_dtoa_r+0x58c>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	f7f7 f89c 	bl	8000608 <__aeabi_dmul>
 80094d0:	4b08      	ldr	r3, [pc, #32]	@ (80094f4 <_dtoa_r+0x58c>)
 80094d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094d6:	2200      	movs	r2, #0
 80094d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094dc:	f7f7 f894 	bl	8000608 <__aeabi_dmul>
 80094e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094e4:	e7c4      	b.n	8009470 <_dtoa_r+0x508>
 80094e6:	bf00      	nop
 80094e8:	0800c030 	.word	0x0800c030
 80094ec:	0800c008 	.word	0x0800c008
 80094f0:	3ff00000 	.word	0x3ff00000
 80094f4:	40240000 	.word	0x40240000
 80094f8:	401c0000 	.word	0x401c0000
 80094fc:	40140000 	.word	0x40140000
 8009500:	3fe00000 	.word	0x3fe00000
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	f7f7 f87e 	bl	8000608 <__aeabi_dmul>
 800950c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009510:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009512:	4656      	mov	r6, sl
 8009514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009518:	f7f7 fb26 	bl	8000b68 <__aeabi_d2iz>
 800951c:	4605      	mov	r5, r0
 800951e:	f7f7 f809 	bl	8000534 <__aeabi_i2d>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800952a:	f7f6 feb5 	bl	8000298 <__aeabi_dsub>
 800952e:	3530      	adds	r5, #48	@ 0x30
 8009530:	f806 5b01 	strb.w	r5, [r6], #1
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	42a6      	cmp	r6, r4
 800953a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	d124      	bne.n	800958e <_dtoa_r+0x626>
 8009544:	4baf      	ldr	r3, [pc, #700]	@ (8009804 <_dtoa_r+0x89c>)
 8009546:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800954a:	f7f6 fea7 	bl	800029c <__adddf3>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009556:	f7f7 fae7 	bl	8000b28 <__aeabi_dcmpgt>
 800955a:	2800      	cmp	r0, #0
 800955c:	d163      	bne.n	8009626 <_dtoa_r+0x6be>
 800955e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009562:	49a8      	ldr	r1, [pc, #672]	@ (8009804 <_dtoa_r+0x89c>)
 8009564:	2000      	movs	r0, #0
 8009566:	f7f6 fe97 	bl	8000298 <__aeabi_dsub>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009572:	f7f7 fabb 	bl	8000aec <__aeabi_dcmplt>
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f af14 	beq.w	80093a4 <_dtoa_r+0x43c>
 800957c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800957e:	1e73      	subs	r3, r6, #1
 8009580:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009582:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009586:	2b30      	cmp	r3, #48	@ 0x30
 8009588:	d0f8      	beq.n	800957c <_dtoa_r+0x614>
 800958a:	4647      	mov	r7, r8
 800958c:	e03b      	b.n	8009606 <_dtoa_r+0x69e>
 800958e:	4b9e      	ldr	r3, [pc, #632]	@ (8009808 <_dtoa_r+0x8a0>)
 8009590:	f7f7 f83a 	bl	8000608 <__aeabi_dmul>
 8009594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009598:	e7bc      	b.n	8009514 <_dtoa_r+0x5ac>
 800959a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800959e:	4656      	mov	r6, sl
 80095a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a4:	4620      	mov	r0, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f7 f958 	bl	800085c <__aeabi_ddiv>
 80095ac:	f7f7 fadc 	bl	8000b68 <__aeabi_d2iz>
 80095b0:	4680      	mov	r8, r0
 80095b2:	f7f6 ffbf 	bl	8000534 <__aeabi_i2d>
 80095b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ba:	f7f7 f825 	bl	8000608 <__aeabi_dmul>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095ca:	f7f6 fe65 	bl	8000298 <__aeabi_dsub>
 80095ce:	f806 4b01 	strb.w	r4, [r6], #1
 80095d2:	9d03      	ldr	r5, [sp, #12]
 80095d4:	eba6 040a 	sub.w	r4, r6, sl
 80095d8:	42a5      	cmp	r5, r4
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	d133      	bne.n	8009648 <_dtoa_r+0x6e0>
 80095e0:	f7f6 fe5c 	bl	800029c <__adddf3>
 80095e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e8:	4604      	mov	r4, r0
 80095ea:	460d      	mov	r5, r1
 80095ec:	f7f7 fa9c 	bl	8000b28 <__aeabi_dcmpgt>
 80095f0:	b9c0      	cbnz	r0, 8009624 <_dtoa_r+0x6bc>
 80095f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095f6:	4620      	mov	r0, r4
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7f7 fa6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80095fe:	b110      	cbz	r0, 8009606 <_dtoa_r+0x69e>
 8009600:	f018 0f01 	tst.w	r8, #1
 8009604:	d10e      	bne.n	8009624 <_dtoa_r+0x6bc>
 8009606:	9902      	ldr	r1, [sp, #8]
 8009608:	4648      	mov	r0, r9
 800960a:	f000 fbbd 	bl	8009d88 <_Bfree>
 800960e:	2300      	movs	r3, #0
 8009610:	7033      	strb	r3, [r6, #0]
 8009612:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009614:	3701      	adds	r7, #1
 8009616:	601f      	str	r7, [r3, #0]
 8009618:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 824b 	beq.w	8009ab6 <_dtoa_r+0xb4e>
 8009620:	601e      	str	r6, [r3, #0]
 8009622:	e248      	b.n	8009ab6 <_dtoa_r+0xb4e>
 8009624:	46b8      	mov	r8, r7
 8009626:	4633      	mov	r3, r6
 8009628:	461e      	mov	r6, r3
 800962a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800962e:	2a39      	cmp	r2, #57	@ 0x39
 8009630:	d106      	bne.n	8009640 <_dtoa_r+0x6d8>
 8009632:	459a      	cmp	sl, r3
 8009634:	d1f8      	bne.n	8009628 <_dtoa_r+0x6c0>
 8009636:	2230      	movs	r2, #48	@ 0x30
 8009638:	f108 0801 	add.w	r8, r8, #1
 800963c:	f88a 2000 	strb.w	r2, [sl]
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	3201      	adds	r2, #1
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e7a0      	b.n	800958a <_dtoa_r+0x622>
 8009648:	4b6f      	ldr	r3, [pc, #444]	@ (8009808 <_dtoa_r+0x8a0>)
 800964a:	2200      	movs	r2, #0
 800964c:	f7f6 ffdc 	bl	8000608 <__aeabi_dmul>
 8009650:	2200      	movs	r2, #0
 8009652:	2300      	movs	r3, #0
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	f7f7 fa3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800965c:	2800      	cmp	r0, #0
 800965e:	d09f      	beq.n	80095a0 <_dtoa_r+0x638>
 8009660:	e7d1      	b.n	8009606 <_dtoa_r+0x69e>
 8009662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009664:	2a00      	cmp	r2, #0
 8009666:	f000 80ea 	beq.w	800983e <_dtoa_r+0x8d6>
 800966a:	9a07      	ldr	r2, [sp, #28]
 800966c:	2a01      	cmp	r2, #1
 800966e:	f300 80cd 	bgt.w	800980c <_dtoa_r+0x8a4>
 8009672:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009674:	2a00      	cmp	r2, #0
 8009676:	f000 80c1 	beq.w	80097fc <_dtoa_r+0x894>
 800967a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800967e:	9c08      	ldr	r4, [sp, #32]
 8009680:	9e00      	ldr	r6, [sp, #0]
 8009682:	9a00      	ldr	r2, [sp, #0]
 8009684:	441a      	add	r2, r3
 8009686:	9200      	str	r2, [sp, #0]
 8009688:	9a06      	ldr	r2, [sp, #24]
 800968a:	2101      	movs	r1, #1
 800968c:	441a      	add	r2, r3
 800968e:	4648      	mov	r0, r9
 8009690:	9206      	str	r2, [sp, #24]
 8009692:	f000 fc2d 	bl	8009ef0 <__i2b>
 8009696:	4605      	mov	r5, r0
 8009698:	b166      	cbz	r6, 80096b4 <_dtoa_r+0x74c>
 800969a:	9b06      	ldr	r3, [sp, #24]
 800969c:	2b00      	cmp	r3, #0
 800969e:	dd09      	ble.n	80096b4 <_dtoa_r+0x74c>
 80096a0:	42b3      	cmp	r3, r6
 80096a2:	9a00      	ldr	r2, [sp, #0]
 80096a4:	bfa8      	it	ge
 80096a6:	4633      	movge	r3, r6
 80096a8:	1ad2      	subs	r2, r2, r3
 80096aa:	9200      	str	r2, [sp, #0]
 80096ac:	9a06      	ldr	r2, [sp, #24]
 80096ae:	1af6      	subs	r6, r6, r3
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	9306      	str	r3, [sp, #24]
 80096b4:	9b08      	ldr	r3, [sp, #32]
 80096b6:	b30b      	cbz	r3, 80096fc <_dtoa_r+0x794>
 80096b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 80c6 	beq.w	800984c <_dtoa_r+0x8e4>
 80096c0:	2c00      	cmp	r4, #0
 80096c2:	f000 80c0 	beq.w	8009846 <_dtoa_r+0x8de>
 80096c6:	4629      	mov	r1, r5
 80096c8:	4622      	mov	r2, r4
 80096ca:	4648      	mov	r0, r9
 80096cc:	f000 fcc8 	bl	800a060 <__pow5mult>
 80096d0:	9a02      	ldr	r2, [sp, #8]
 80096d2:	4601      	mov	r1, r0
 80096d4:	4605      	mov	r5, r0
 80096d6:	4648      	mov	r0, r9
 80096d8:	f000 fc20 	bl	8009f1c <__multiply>
 80096dc:	9902      	ldr	r1, [sp, #8]
 80096de:	4680      	mov	r8, r0
 80096e0:	4648      	mov	r0, r9
 80096e2:	f000 fb51 	bl	8009d88 <_Bfree>
 80096e6:	9b08      	ldr	r3, [sp, #32]
 80096e8:	1b1b      	subs	r3, r3, r4
 80096ea:	9308      	str	r3, [sp, #32]
 80096ec:	f000 80b1 	beq.w	8009852 <_dtoa_r+0x8ea>
 80096f0:	9a08      	ldr	r2, [sp, #32]
 80096f2:	4641      	mov	r1, r8
 80096f4:	4648      	mov	r0, r9
 80096f6:	f000 fcb3 	bl	800a060 <__pow5mult>
 80096fa:	9002      	str	r0, [sp, #8]
 80096fc:	2101      	movs	r1, #1
 80096fe:	4648      	mov	r0, r9
 8009700:	f000 fbf6 	bl	8009ef0 <__i2b>
 8009704:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009706:	4604      	mov	r4, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 81d8 	beq.w	8009abe <_dtoa_r+0xb56>
 800970e:	461a      	mov	r2, r3
 8009710:	4601      	mov	r1, r0
 8009712:	4648      	mov	r0, r9
 8009714:	f000 fca4 	bl	800a060 <__pow5mult>
 8009718:	9b07      	ldr	r3, [sp, #28]
 800971a:	2b01      	cmp	r3, #1
 800971c:	4604      	mov	r4, r0
 800971e:	f300 809f 	bgt.w	8009860 <_dtoa_r+0x8f8>
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	f040 8097 	bne.w	8009858 <_dtoa_r+0x8f0>
 800972a:	9b05      	ldr	r3, [sp, #20]
 800972c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009730:	2b00      	cmp	r3, #0
 8009732:	f040 8093 	bne.w	800985c <_dtoa_r+0x8f4>
 8009736:	9b05      	ldr	r3, [sp, #20]
 8009738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800973c:	0d1b      	lsrs	r3, r3, #20
 800973e:	051b      	lsls	r3, r3, #20
 8009740:	b133      	cbz	r3, 8009750 <_dtoa_r+0x7e8>
 8009742:	9b00      	ldr	r3, [sp, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	9b06      	ldr	r3, [sp, #24]
 800974a:	3301      	adds	r3, #1
 800974c:	9306      	str	r3, [sp, #24]
 800974e:	2301      	movs	r3, #1
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 81b8 	beq.w	8009aca <_dtoa_r+0xb62>
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009760:	6918      	ldr	r0, [r3, #16]
 8009762:	f000 fb79 	bl	8009e58 <__hi0bits>
 8009766:	f1c0 0020 	rsb	r0, r0, #32
 800976a:	9b06      	ldr	r3, [sp, #24]
 800976c:	4418      	add	r0, r3
 800976e:	f010 001f 	ands.w	r0, r0, #31
 8009772:	f000 8082 	beq.w	800987a <_dtoa_r+0x912>
 8009776:	f1c0 0320 	rsb	r3, r0, #32
 800977a:	2b04      	cmp	r3, #4
 800977c:	dd73      	ble.n	8009866 <_dtoa_r+0x8fe>
 800977e:	9b00      	ldr	r3, [sp, #0]
 8009780:	f1c0 001c 	rsb	r0, r0, #28
 8009784:	4403      	add	r3, r0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	9b06      	ldr	r3, [sp, #24]
 800978a:	4403      	add	r3, r0
 800978c:	4406      	add	r6, r0
 800978e:	9306      	str	r3, [sp, #24]
 8009790:	9b00      	ldr	r3, [sp, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	dd05      	ble.n	80097a2 <_dtoa_r+0x83a>
 8009796:	9902      	ldr	r1, [sp, #8]
 8009798:	461a      	mov	r2, r3
 800979a:	4648      	mov	r0, r9
 800979c:	f000 fcba 	bl	800a114 <__lshift>
 80097a0:	9002      	str	r0, [sp, #8]
 80097a2:	9b06      	ldr	r3, [sp, #24]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dd05      	ble.n	80097b4 <_dtoa_r+0x84c>
 80097a8:	4621      	mov	r1, r4
 80097aa:	461a      	mov	r2, r3
 80097ac:	4648      	mov	r0, r9
 80097ae:	f000 fcb1 	bl	800a114 <__lshift>
 80097b2:	4604      	mov	r4, r0
 80097b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d061      	beq.n	800987e <_dtoa_r+0x916>
 80097ba:	9802      	ldr	r0, [sp, #8]
 80097bc:	4621      	mov	r1, r4
 80097be:	f000 fd15 	bl	800a1ec <__mcmp>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	da5b      	bge.n	800987e <_dtoa_r+0x916>
 80097c6:	2300      	movs	r3, #0
 80097c8:	9902      	ldr	r1, [sp, #8]
 80097ca:	220a      	movs	r2, #10
 80097cc:	4648      	mov	r0, r9
 80097ce:	f000 fafd 	bl	8009dcc <__multadd>
 80097d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d4:	9002      	str	r0, [sp, #8]
 80097d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 8177 	beq.w	8009ace <_dtoa_r+0xb66>
 80097e0:	4629      	mov	r1, r5
 80097e2:	2300      	movs	r3, #0
 80097e4:	220a      	movs	r2, #10
 80097e6:	4648      	mov	r0, r9
 80097e8:	f000 faf0 	bl	8009dcc <__multadd>
 80097ec:	f1bb 0f00 	cmp.w	fp, #0
 80097f0:	4605      	mov	r5, r0
 80097f2:	dc6f      	bgt.n	80098d4 <_dtoa_r+0x96c>
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	dc49      	bgt.n	800988e <_dtoa_r+0x926>
 80097fa:	e06b      	b.n	80098d4 <_dtoa_r+0x96c>
 80097fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009802:	e73c      	b.n	800967e <_dtoa_r+0x716>
 8009804:	3fe00000 	.word	0x3fe00000
 8009808:	40240000 	.word	0x40240000
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	1e5c      	subs	r4, r3, #1
 8009810:	9b08      	ldr	r3, [sp, #32]
 8009812:	42a3      	cmp	r3, r4
 8009814:	db09      	blt.n	800982a <_dtoa_r+0x8c2>
 8009816:	1b1c      	subs	r4, r3, r4
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f6bf af30 	bge.w	8009680 <_dtoa_r+0x718>
 8009820:	9b00      	ldr	r3, [sp, #0]
 8009822:	9a03      	ldr	r2, [sp, #12]
 8009824:	1a9e      	subs	r6, r3, r2
 8009826:	2300      	movs	r3, #0
 8009828:	e72b      	b.n	8009682 <_dtoa_r+0x71a>
 800982a:	9b08      	ldr	r3, [sp, #32]
 800982c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800982e:	9408      	str	r4, [sp, #32]
 8009830:	1ae3      	subs	r3, r4, r3
 8009832:	441a      	add	r2, r3
 8009834:	9e00      	ldr	r6, [sp, #0]
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	920d      	str	r2, [sp, #52]	@ 0x34
 800983a:	2400      	movs	r4, #0
 800983c:	e721      	b.n	8009682 <_dtoa_r+0x71a>
 800983e:	9c08      	ldr	r4, [sp, #32]
 8009840:	9e00      	ldr	r6, [sp, #0]
 8009842:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009844:	e728      	b.n	8009698 <_dtoa_r+0x730>
 8009846:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800984a:	e751      	b.n	80096f0 <_dtoa_r+0x788>
 800984c:	9a08      	ldr	r2, [sp, #32]
 800984e:	9902      	ldr	r1, [sp, #8]
 8009850:	e750      	b.n	80096f4 <_dtoa_r+0x78c>
 8009852:	f8cd 8008 	str.w	r8, [sp, #8]
 8009856:	e751      	b.n	80096fc <_dtoa_r+0x794>
 8009858:	2300      	movs	r3, #0
 800985a:	e779      	b.n	8009750 <_dtoa_r+0x7e8>
 800985c:	9b04      	ldr	r3, [sp, #16]
 800985e:	e777      	b.n	8009750 <_dtoa_r+0x7e8>
 8009860:	2300      	movs	r3, #0
 8009862:	9308      	str	r3, [sp, #32]
 8009864:	e779      	b.n	800975a <_dtoa_r+0x7f2>
 8009866:	d093      	beq.n	8009790 <_dtoa_r+0x828>
 8009868:	9a00      	ldr	r2, [sp, #0]
 800986a:	331c      	adds	r3, #28
 800986c:	441a      	add	r2, r3
 800986e:	9200      	str	r2, [sp, #0]
 8009870:	9a06      	ldr	r2, [sp, #24]
 8009872:	441a      	add	r2, r3
 8009874:	441e      	add	r6, r3
 8009876:	9206      	str	r2, [sp, #24]
 8009878:	e78a      	b.n	8009790 <_dtoa_r+0x828>
 800987a:	4603      	mov	r3, r0
 800987c:	e7f4      	b.n	8009868 <_dtoa_r+0x900>
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	46b8      	mov	r8, r7
 8009884:	dc20      	bgt.n	80098c8 <_dtoa_r+0x960>
 8009886:	469b      	mov	fp, r3
 8009888:	9b07      	ldr	r3, [sp, #28]
 800988a:	2b02      	cmp	r3, #2
 800988c:	dd1e      	ble.n	80098cc <_dtoa_r+0x964>
 800988e:	f1bb 0f00 	cmp.w	fp, #0
 8009892:	f47f adb1 	bne.w	80093f8 <_dtoa_r+0x490>
 8009896:	4621      	mov	r1, r4
 8009898:	465b      	mov	r3, fp
 800989a:	2205      	movs	r2, #5
 800989c:	4648      	mov	r0, r9
 800989e:	f000 fa95 	bl	8009dcc <__multadd>
 80098a2:	4601      	mov	r1, r0
 80098a4:	4604      	mov	r4, r0
 80098a6:	9802      	ldr	r0, [sp, #8]
 80098a8:	f000 fca0 	bl	800a1ec <__mcmp>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f77f ada3 	ble.w	80093f8 <_dtoa_r+0x490>
 80098b2:	4656      	mov	r6, sl
 80098b4:	2331      	movs	r3, #49	@ 0x31
 80098b6:	f806 3b01 	strb.w	r3, [r6], #1
 80098ba:	f108 0801 	add.w	r8, r8, #1
 80098be:	e59f      	b.n	8009400 <_dtoa_r+0x498>
 80098c0:	9c03      	ldr	r4, [sp, #12]
 80098c2:	46b8      	mov	r8, r7
 80098c4:	4625      	mov	r5, r4
 80098c6:	e7f4      	b.n	80098b2 <_dtoa_r+0x94a>
 80098c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80098cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 8101 	beq.w	8009ad6 <_dtoa_r+0xb6e>
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	dd05      	ble.n	80098e4 <_dtoa_r+0x97c>
 80098d8:	4629      	mov	r1, r5
 80098da:	4632      	mov	r2, r6
 80098dc:	4648      	mov	r0, r9
 80098de:	f000 fc19 	bl	800a114 <__lshift>
 80098e2:	4605      	mov	r5, r0
 80098e4:	9b08      	ldr	r3, [sp, #32]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d05c      	beq.n	80099a4 <_dtoa_r+0xa3c>
 80098ea:	6869      	ldr	r1, [r5, #4]
 80098ec:	4648      	mov	r0, r9
 80098ee:	f000 fa0b 	bl	8009d08 <_Balloc>
 80098f2:	4606      	mov	r6, r0
 80098f4:	b928      	cbnz	r0, 8009902 <_dtoa_r+0x99a>
 80098f6:	4b82      	ldr	r3, [pc, #520]	@ (8009b00 <_dtoa_r+0xb98>)
 80098f8:	4602      	mov	r2, r0
 80098fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80098fe:	f7ff bb4a 	b.w	8008f96 <_dtoa_r+0x2e>
 8009902:	692a      	ldr	r2, [r5, #16]
 8009904:	3202      	adds	r2, #2
 8009906:	0092      	lsls	r2, r2, #2
 8009908:	f105 010c 	add.w	r1, r5, #12
 800990c:	300c      	adds	r0, #12
 800990e:	f000 ffa3 	bl	800a858 <memcpy>
 8009912:	2201      	movs	r2, #1
 8009914:	4631      	mov	r1, r6
 8009916:	4648      	mov	r0, r9
 8009918:	f000 fbfc 	bl	800a114 <__lshift>
 800991c:	f10a 0301 	add.w	r3, sl, #1
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	eb0a 030b 	add.w	r3, sl, fp
 8009926:	9308      	str	r3, [sp, #32]
 8009928:	9b04      	ldr	r3, [sp, #16]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	462f      	mov	r7, r5
 8009930:	9306      	str	r3, [sp, #24]
 8009932:	4605      	mov	r5, r0
 8009934:	9b00      	ldr	r3, [sp, #0]
 8009936:	9802      	ldr	r0, [sp, #8]
 8009938:	4621      	mov	r1, r4
 800993a:	f103 3bff 	add.w	fp, r3, #4294967295
 800993e:	f7ff fa8a 	bl	8008e56 <quorem>
 8009942:	4603      	mov	r3, r0
 8009944:	3330      	adds	r3, #48	@ 0x30
 8009946:	9003      	str	r0, [sp, #12]
 8009948:	4639      	mov	r1, r7
 800994a:	9802      	ldr	r0, [sp, #8]
 800994c:	9309      	str	r3, [sp, #36]	@ 0x24
 800994e:	f000 fc4d 	bl	800a1ec <__mcmp>
 8009952:	462a      	mov	r2, r5
 8009954:	9004      	str	r0, [sp, #16]
 8009956:	4621      	mov	r1, r4
 8009958:	4648      	mov	r0, r9
 800995a:	f000 fc63 	bl	800a224 <__mdiff>
 800995e:	68c2      	ldr	r2, [r0, #12]
 8009960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009962:	4606      	mov	r6, r0
 8009964:	bb02      	cbnz	r2, 80099a8 <_dtoa_r+0xa40>
 8009966:	4601      	mov	r1, r0
 8009968:	9802      	ldr	r0, [sp, #8]
 800996a:	f000 fc3f 	bl	800a1ec <__mcmp>
 800996e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009970:	4602      	mov	r2, r0
 8009972:	4631      	mov	r1, r6
 8009974:	4648      	mov	r0, r9
 8009976:	920c      	str	r2, [sp, #48]	@ 0x30
 8009978:	9309      	str	r3, [sp, #36]	@ 0x24
 800997a:	f000 fa05 	bl	8009d88 <_Bfree>
 800997e:	9b07      	ldr	r3, [sp, #28]
 8009980:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009982:	9e00      	ldr	r6, [sp, #0]
 8009984:	ea42 0103 	orr.w	r1, r2, r3
 8009988:	9b06      	ldr	r3, [sp, #24]
 800998a:	4319      	orrs	r1, r3
 800998c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800998e:	d10d      	bne.n	80099ac <_dtoa_r+0xa44>
 8009990:	2b39      	cmp	r3, #57	@ 0x39
 8009992:	d027      	beq.n	80099e4 <_dtoa_r+0xa7c>
 8009994:	9a04      	ldr	r2, [sp, #16]
 8009996:	2a00      	cmp	r2, #0
 8009998:	dd01      	ble.n	800999e <_dtoa_r+0xa36>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	3331      	adds	r3, #49	@ 0x31
 800999e:	f88b 3000 	strb.w	r3, [fp]
 80099a2:	e52e      	b.n	8009402 <_dtoa_r+0x49a>
 80099a4:	4628      	mov	r0, r5
 80099a6:	e7b9      	b.n	800991c <_dtoa_r+0x9b4>
 80099a8:	2201      	movs	r2, #1
 80099aa:	e7e2      	b.n	8009972 <_dtoa_r+0xa0a>
 80099ac:	9904      	ldr	r1, [sp, #16]
 80099ae:	2900      	cmp	r1, #0
 80099b0:	db04      	blt.n	80099bc <_dtoa_r+0xa54>
 80099b2:	9807      	ldr	r0, [sp, #28]
 80099b4:	4301      	orrs	r1, r0
 80099b6:	9806      	ldr	r0, [sp, #24]
 80099b8:	4301      	orrs	r1, r0
 80099ba:	d120      	bne.n	80099fe <_dtoa_r+0xa96>
 80099bc:	2a00      	cmp	r2, #0
 80099be:	ddee      	ble.n	800999e <_dtoa_r+0xa36>
 80099c0:	9902      	ldr	r1, [sp, #8]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2201      	movs	r2, #1
 80099c6:	4648      	mov	r0, r9
 80099c8:	f000 fba4 	bl	800a114 <__lshift>
 80099cc:	4621      	mov	r1, r4
 80099ce:	9002      	str	r0, [sp, #8]
 80099d0:	f000 fc0c 	bl	800a1ec <__mcmp>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	9b00      	ldr	r3, [sp, #0]
 80099d8:	dc02      	bgt.n	80099e0 <_dtoa_r+0xa78>
 80099da:	d1e0      	bne.n	800999e <_dtoa_r+0xa36>
 80099dc:	07da      	lsls	r2, r3, #31
 80099de:	d5de      	bpl.n	800999e <_dtoa_r+0xa36>
 80099e0:	2b39      	cmp	r3, #57	@ 0x39
 80099e2:	d1da      	bne.n	800999a <_dtoa_r+0xa32>
 80099e4:	2339      	movs	r3, #57	@ 0x39
 80099e6:	f88b 3000 	strb.w	r3, [fp]
 80099ea:	4633      	mov	r3, r6
 80099ec:	461e      	mov	r6, r3
 80099ee:	3b01      	subs	r3, #1
 80099f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099f4:	2a39      	cmp	r2, #57	@ 0x39
 80099f6:	d04e      	beq.n	8009a96 <_dtoa_r+0xb2e>
 80099f8:	3201      	adds	r2, #1
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e501      	b.n	8009402 <_dtoa_r+0x49a>
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	dd03      	ble.n	8009a0a <_dtoa_r+0xaa2>
 8009a02:	2b39      	cmp	r3, #57	@ 0x39
 8009a04:	d0ee      	beq.n	80099e4 <_dtoa_r+0xa7c>
 8009a06:	3301      	adds	r3, #1
 8009a08:	e7c9      	b.n	800999e <_dtoa_r+0xa36>
 8009a0a:	9a00      	ldr	r2, [sp, #0]
 8009a0c:	9908      	ldr	r1, [sp, #32]
 8009a0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a12:	428a      	cmp	r2, r1
 8009a14:	d028      	beq.n	8009a68 <_dtoa_r+0xb00>
 8009a16:	9902      	ldr	r1, [sp, #8]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	220a      	movs	r2, #10
 8009a1c:	4648      	mov	r0, r9
 8009a1e:	f000 f9d5 	bl	8009dcc <__multadd>
 8009a22:	42af      	cmp	r7, r5
 8009a24:	9002      	str	r0, [sp, #8]
 8009a26:	f04f 0300 	mov.w	r3, #0
 8009a2a:	f04f 020a 	mov.w	r2, #10
 8009a2e:	4639      	mov	r1, r7
 8009a30:	4648      	mov	r0, r9
 8009a32:	d107      	bne.n	8009a44 <_dtoa_r+0xadc>
 8009a34:	f000 f9ca 	bl	8009dcc <__multadd>
 8009a38:	4607      	mov	r7, r0
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	9b00      	ldr	r3, [sp, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	e777      	b.n	8009934 <_dtoa_r+0x9cc>
 8009a44:	f000 f9c2 	bl	8009dcc <__multadd>
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	220a      	movs	r2, #10
 8009a50:	4648      	mov	r0, r9
 8009a52:	f000 f9bb 	bl	8009dcc <__multadd>
 8009a56:	4605      	mov	r5, r0
 8009a58:	e7f0      	b.n	8009a3c <_dtoa_r+0xad4>
 8009a5a:	f1bb 0f00 	cmp.w	fp, #0
 8009a5e:	bfcc      	ite	gt
 8009a60:	465e      	movgt	r6, fp
 8009a62:	2601      	movle	r6, #1
 8009a64:	4456      	add	r6, sl
 8009a66:	2700      	movs	r7, #0
 8009a68:	9902      	ldr	r1, [sp, #8]
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f000 fb50 	bl	800a114 <__lshift>
 8009a74:	4621      	mov	r1, r4
 8009a76:	9002      	str	r0, [sp, #8]
 8009a78:	f000 fbb8 	bl	800a1ec <__mcmp>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	dcb4      	bgt.n	80099ea <_dtoa_r+0xa82>
 8009a80:	d102      	bne.n	8009a88 <_dtoa_r+0xb20>
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	07db      	lsls	r3, r3, #31
 8009a86:	d4b0      	bmi.n	80099ea <_dtoa_r+0xa82>
 8009a88:	4633      	mov	r3, r6
 8009a8a:	461e      	mov	r6, r3
 8009a8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a90:	2a30      	cmp	r2, #48	@ 0x30
 8009a92:	d0fa      	beq.n	8009a8a <_dtoa_r+0xb22>
 8009a94:	e4b5      	b.n	8009402 <_dtoa_r+0x49a>
 8009a96:	459a      	cmp	sl, r3
 8009a98:	d1a8      	bne.n	80099ec <_dtoa_r+0xa84>
 8009a9a:	2331      	movs	r3, #49	@ 0x31
 8009a9c:	f108 0801 	add.w	r8, r8, #1
 8009aa0:	f88a 3000 	strb.w	r3, [sl]
 8009aa4:	e4ad      	b.n	8009402 <_dtoa_r+0x49a>
 8009aa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009aa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009b04 <_dtoa_r+0xb9c>
 8009aac:	b11b      	cbz	r3, 8009ab6 <_dtoa_r+0xb4e>
 8009aae:	f10a 0308 	add.w	r3, sl, #8
 8009ab2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	b017      	add	sp, #92	@ 0x5c
 8009aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abe:	9b07      	ldr	r3, [sp, #28]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	f77f ae2e 	ble.w	8009722 <_dtoa_r+0x7ba>
 8009ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ac8:	9308      	str	r3, [sp, #32]
 8009aca:	2001      	movs	r0, #1
 8009acc:	e64d      	b.n	800976a <_dtoa_r+0x802>
 8009ace:	f1bb 0f00 	cmp.w	fp, #0
 8009ad2:	f77f aed9 	ble.w	8009888 <_dtoa_r+0x920>
 8009ad6:	4656      	mov	r6, sl
 8009ad8:	9802      	ldr	r0, [sp, #8]
 8009ada:	4621      	mov	r1, r4
 8009adc:	f7ff f9bb 	bl	8008e56 <quorem>
 8009ae0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ae4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ae8:	eba6 020a 	sub.w	r2, r6, sl
 8009aec:	4593      	cmp	fp, r2
 8009aee:	ddb4      	ble.n	8009a5a <_dtoa_r+0xaf2>
 8009af0:	9902      	ldr	r1, [sp, #8]
 8009af2:	2300      	movs	r3, #0
 8009af4:	220a      	movs	r2, #10
 8009af6:	4648      	mov	r0, r9
 8009af8:	f000 f968 	bl	8009dcc <__multadd>
 8009afc:	9002      	str	r0, [sp, #8]
 8009afe:	e7eb      	b.n	8009ad8 <_dtoa_r+0xb70>
 8009b00:	0800bf38 	.word	0x0800bf38
 8009b04:	0800bebc 	.word	0x0800bebc

08009b08 <_free_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d041      	beq.n	8009b94 <_free_r+0x8c>
 8009b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b14:	1f0c      	subs	r4, r1, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfb8      	it	lt
 8009b1a:	18e4      	addlt	r4, r4, r3
 8009b1c:	f000 f8e8 	bl	8009cf0 <__malloc_lock>
 8009b20:	4a1d      	ldr	r2, [pc, #116]	@ (8009b98 <_free_r+0x90>)
 8009b22:	6813      	ldr	r3, [r2, #0]
 8009b24:	b933      	cbnz	r3, 8009b34 <_free_r+0x2c>
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	6014      	str	r4, [r2, #0]
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b30:	f000 b8e4 	b.w	8009cfc <__malloc_unlock>
 8009b34:	42a3      	cmp	r3, r4
 8009b36:	d908      	bls.n	8009b4a <_free_r+0x42>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	1821      	adds	r1, r4, r0
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf01      	itttt	eq
 8009b40:	6819      	ldreq	r1, [r3, #0]
 8009b42:	685b      	ldreq	r3, [r3, #4]
 8009b44:	1809      	addeq	r1, r1, r0
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	e7ed      	b.n	8009b26 <_free_r+0x1e>
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	b10b      	cbz	r3, 8009b54 <_free_r+0x4c>
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	d9fa      	bls.n	8009b4a <_free_r+0x42>
 8009b54:	6811      	ldr	r1, [r2, #0]
 8009b56:	1850      	adds	r0, r2, r1
 8009b58:	42a0      	cmp	r0, r4
 8009b5a:	d10b      	bne.n	8009b74 <_free_r+0x6c>
 8009b5c:	6820      	ldr	r0, [r4, #0]
 8009b5e:	4401      	add	r1, r0
 8009b60:	1850      	adds	r0, r2, r1
 8009b62:	4283      	cmp	r3, r0
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	d1e0      	bne.n	8009b2a <_free_r+0x22>
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	6053      	str	r3, [r2, #4]
 8009b6e:	4408      	add	r0, r1
 8009b70:	6010      	str	r0, [r2, #0]
 8009b72:	e7da      	b.n	8009b2a <_free_r+0x22>
 8009b74:	d902      	bls.n	8009b7c <_free_r+0x74>
 8009b76:	230c      	movs	r3, #12
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	e7d6      	b.n	8009b2a <_free_r+0x22>
 8009b7c:	6820      	ldr	r0, [r4, #0]
 8009b7e:	1821      	adds	r1, r4, r0
 8009b80:	428b      	cmp	r3, r1
 8009b82:	bf04      	itt	eq
 8009b84:	6819      	ldreq	r1, [r3, #0]
 8009b86:	685b      	ldreq	r3, [r3, #4]
 8009b88:	6063      	str	r3, [r4, #4]
 8009b8a:	bf04      	itt	eq
 8009b8c:	1809      	addeq	r1, r1, r0
 8009b8e:	6021      	streq	r1, [r4, #0]
 8009b90:	6054      	str	r4, [r2, #4]
 8009b92:	e7ca      	b.n	8009b2a <_free_r+0x22>
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
 8009b96:	bf00      	nop
 8009b98:	2000385c 	.word	0x2000385c

08009b9c <malloc>:
 8009b9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ba8 <malloc+0xc>)
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	6818      	ldr	r0, [r3, #0]
 8009ba2:	f000 b825 	b.w	8009bf0 <_malloc_r>
 8009ba6:	bf00      	nop
 8009ba8:	20000108 	.word	0x20000108

08009bac <sbrk_aligned>:
 8009bac:	b570      	push	{r4, r5, r6, lr}
 8009bae:	4e0f      	ldr	r6, [pc, #60]	@ (8009bec <sbrk_aligned+0x40>)
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	6831      	ldr	r1, [r6, #0]
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	b911      	cbnz	r1, 8009bbe <sbrk_aligned+0x12>
 8009bb8:	f000 fe3e 	bl	800a838 <_sbrk_r>
 8009bbc:	6030      	str	r0, [r6, #0]
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f000 fe39 	bl	800a838 <_sbrk_r>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	d103      	bne.n	8009bd2 <sbrk_aligned+0x26>
 8009bca:	f04f 34ff 	mov.w	r4, #4294967295
 8009bce:	4620      	mov	r0, r4
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	1cc4      	adds	r4, r0, #3
 8009bd4:	f024 0403 	bic.w	r4, r4, #3
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d0f8      	beq.n	8009bce <sbrk_aligned+0x22>
 8009bdc:	1a21      	subs	r1, r4, r0
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 fe2a 	bl	800a838 <_sbrk_r>
 8009be4:	3001      	adds	r0, #1
 8009be6:	d1f2      	bne.n	8009bce <sbrk_aligned+0x22>
 8009be8:	e7ef      	b.n	8009bca <sbrk_aligned+0x1e>
 8009bea:	bf00      	nop
 8009bec:	20003858 	.word	0x20003858

08009bf0 <_malloc_r>:
 8009bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf4:	1ccd      	adds	r5, r1, #3
 8009bf6:	f025 0503 	bic.w	r5, r5, #3
 8009bfa:	3508      	adds	r5, #8
 8009bfc:	2d0c      	cmp	r5, #12
 8009bfe:	bf38      	it	cc
 8009c00:	250c      	movcc	r5, #12
 8009c02:	2d00      	cmp	r5, #0
 8009c04:	4606      	mov	r6, r0
 8009c06:	db01      	blt.n	8009c0c <_malloc_r+0x1c>
 8009c08:	42a9      	cmp	r1, r5
 8009c0a:	d904      	bls.n	8009c16 <_malloc_r+0x26>
 8009c0c:	230c      	movs	r3, #12
 8009c0e:	6033      	str	r3, [r6, #0]
 8009c10:	2000      	movs	r0, #0
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cec <_malloc_r+0xfc>
 8009c1a:	f000 f869 	bl	8009cf0 <__malloc_lock>
 8009c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c22:	461c      	mov	r4, r3
 8009c24:	bb44      	cbnz	r4, 8009c78 <_malloc_r+0x88>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff ffbf 	bl	8009bac <sbrk_aligned>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	4604      	mov	r4, r0
 8009c32:	d158      	bne.n	8009ce6 <_malloc_r+0xf6>
 8009c34:	f8d8 4000 	ldr.w	r4, [r8]
 8009c38:	4627      	mov	r7, r4
 8009c3a:	2f00      	cmp	r7, #0
 8009c3c:	d143      	bne.n	8009cc6 <_malloc_r+0xd6>
 8009c3e:	2c00      	cmp	r4, #0
 8009c40:	d04b      	beq.n	8009cda <_malloc_r+0xea>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	4639      	mov	r1, r7
 8009c46:	4630      	mov	r0, r6
 8009c48:	eb04 0903 	add.w	r9, r4, r3
 8009c4c:	f000 fdf4 	bl	800a838 <_sbrk_r>
 8009c50:	4581      	cmp	r9, r0
 8009c52:	d142      	bne.n	8009cda <_malloc_r+0xea>
 8009c54:	6821      	ldr	r1, [r4, #0]
 8009c56:	1a6d      	subs	r5, r5, r1
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ffa6 	bl	8009bac <sbrk_aligned>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d03a      	beq.n	8009cda <_malloc_r+0xea>
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	442b      	add	r3, r5
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	bb62      	cbnz	r2, 8009ccc <_malloc_r+0xdc>
 8009c72:	f8c8 7000 	str.w	r7, [r8]
 8009c76:	e00f      	b.n	8009c98 <_malloc_r+0xa8>
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	1b52      	subs	r2, r2, r5
 8009c7c:	d420      	bmi.n	8009cc0 <_malloc_r+0xd0>
 8009c7e:	2a0b      	cmp	r2, #11
 8009c80:	d917      	bls.n	8009cb2 <_malloc_r+0xc2>
 8009c82:	1961      	adds	r1, r4, r5
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	6025      	str	r5, [r4, #0]
 8009c88:	bf18      	it	ne
 8009c8a:	6059      	strne	r1, [r3, #4]
 8009c8c:	6863      	ldr	r3, [r4, #4]
 8009c8e:	bf08      	it	eq
 8009c90:	f8c8 1000 	streq.w	r1, [r8]
 8009c94:	5162      	str	r2, [r4, r5]
 8009c96:	604b      	str	r3, [r1, #4]
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 f82f 	bl	8009cfc <__malloc_unlock>
 8009c9e:	f104 000b 	add.w	r0, r4, #11
 8009ca2:	1d23      	adds	r3, r4, #4
 8009ca4:	f020 0007 	bic.w	r0, r0, #7
 8009ca8:	1ac2      	subs	r2, r0, r3
 8009caa:	bf1c      	itt	ne
 8009cac:	1a1b      	subne	r3, r3, r0
 8009cae:	50a3      	strne	r3, [r4, r2]
 8009cb0:	e7af      	b.n	8009c12 <_malloc_r+0x22>
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	42a3      	cmp	r3, r4
 8009cb6:	bf0c      	ite	eq
 8009cb8:	f8c8 2000 	streq.w	r2, [r8]
 8009cbc:	605a      	strne	r2, [r3, #4]
 8009cbe:	e7eb      	b.n	8009c98 <_malloc_r+0xa8>
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	6864      	ldr	r4, [r4, #4]
 8009cc4:	e7ae      	b.n	8009c24 <_malloc_r+0x34>
 8009cc6:	463c      	mov	r4, r7
 8009cc8:	687f      	ldr	r7, [r7, #4]
 8009cca:	e7b6      	b.n	8009c3a <_malloc_r+0x4a>
 8009ccc:	461a      	mov	r2, r3
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	d1fb      	bne.n	8009ccc <_malloc_r+0xdc>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6053      	str	r3, [r2, #4]
 8009cd8:	e7de      	b.n	8009c98 <_malloc_r+0xa8>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	6033      	str	r3, [r6, #0]
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f000 f80c 	bl	8009cfc <__malloc_unlock>
 8009ce4:	e794      	b.n	8009c10 <_malloc_r+0x20>
 8009ce6:	6005      	str	r5, [r0, #0]
 8009ce8:	e7d6      	b.n	8009c98 <_malloc_r+0xa8>
 8009cea:	bf00      	nop
 8009cec:	2000385c 	.word	0x2000385c

08009cf0 <__malloc_lock>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	@ (8009cf8 <__malloc_lock+0x8>)
 8009cf2:	f7ff b8ae 	b.w	8008e52 <__retarget_lock_acquire_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	20003854 	.word	0x20003854

08009cfc <__malloc_unlock>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	@ (8009d04 <__malloc_unlock+0x8>)
 8009cfe:	f7ff b8a9 	b.w	8008e54 <__retarget_lock_release_recursive>
 8009d02:	bf00      	nop
 8009d04:	20003854 	.word	0x20003854

08009d08 <_Balloc>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	69c6      	ldr	r6, [r0, #28]
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	460d      	mov	r5, r1
 8009d10:	b976      	cbnz	r6, 8009d30 <_Balloc+0x28>
 8009d12:	2010      	movs	r0, #16
 8009d14:	f7ff ff42 	bl	8009b9c <malloc>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	61e0      	str	r0, [r4, #28]
 8009d1c:	b920      	cbnz	r0, 8009d28 <_Balloc+0x20>
 8009d1e:	4b18      	ldr	r3, [pc, #96]	@ (8009d80 <_Balloc+0x78>)
 8009d20:	4818      	ldr	r0, [pc, #96]	@ (8009d84 <_Balloc+0x7c>)
 8009d22:	216b      	movs	r1, #107	@ 0x6b
 8009d24:	f000 fda6 	bl	800a874 <__assert_func>
 8009d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d2c:	6006      	str	r6, [r0, #0]
 8009d2e:	60c6      	str	r6, [r0, #12]
 8009d30:	69e6      	ldr	r6, [r4, #28]
 8009d32:	68f3      	ldr	r3, [r6, #12]
 8009d34:	b183      	cbz	r3, 8009d58 <_Balloc+0x50>
 8009d36:	69e3      	ldr	r3, [r4, #28]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d3e:	b9b8      	cbnz	r0, 8009d70 <_Balloc+0x68>
 8009d40:	2101      	movs	r1, #1
 8009d42:	fa01 f605 	lsl.w	r6, r1, r5
 8009d46:	1d72      	adds	r2, r6, #5
 8009d48:	0092      	lsls	r2, r2, #2
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f000 fdb0 	bl	800a8b0 <_calloc_r>
 8009d50:	b160      	cbz	r0, 8009d6c <_Balloc+0x64>
 8009d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d56:	e00e      	b.n	8009d76 <_Balloc+0x6e>
 8009d58:	2221      	movs	r2, #33	@ 0x21
 8009d5a:	2104      	movs	r1, #4
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 fda7 	bl	800a8b0 <_calloc_r>
 8009d62:	69e3      	ldr	r3, [r4, #28]
 8009d64:	60f0      	str	r0, [r6, #12]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e4      	bne.n	8009d36 <_Balloc+0x2e>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}
 8009d70:	6802      	ldr	r2, [r0, #0]
 8009d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d76:	2300      	movs	r3, #0
 8009d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d7c:	e7f7      	b.n	8009d6e <_Balloc+0x66>
 8009d7e:	bf00      	nop
 8009d80:	0800bec9 	.word	0x0800bec9
 8009d84:	0800bf49 	.word	0x0800bf49

08009d88 <_Bfree>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	69c6      	ldr	r6, [r0, #28]
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	b976      	cbnz	r6, 8009db0 <_Bfree+0x28>
 8009d92:	2010      	movs	r0, #16
 8009d94:	f7ff ff02 	bl	8009b9c <malloc>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	61e8      	str	r0, [r5, #28]
 8009d9c:	b920      	cbnz	r0, 8009da8 <_Bfree+0x20>
 8009d9e:	4b09      	ldr	r3, [pc, #36]	@ (8009dc4 <_Bfree+0x3c>)
 8009da0:	4809      	ldr	r0, [pc, #36]	@ (8009dc8 <_Bfree+0x40>)
 8009da2:	218f      	movs	r1, #143	@ 0x8f
 8009da4:	f000 fd66 	bl	800a874 <__assert_func>
 8009da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dac:	6006      	str	r6, [r0, #0]
 8009dae:	60c6      	str	r6, [r0, #12]
 8009db0:	b13c      	cbz	r4, 8009dc2 <_Bfree+0x3a>
 8009db2:	69eb      	ldr	r3, [r5, #28]
 8009db4:	6862      	ldr	r2, [r4, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dbc:	6021      	str	r1, [r4, #0]
 8009dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	0800bec9 	.word	0x0800bec9
 8009dc8:	0800bf49 	.word	0x0800bf49

08009dcc <__multadd>:
 8009dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd0:	690d      	ldr	r5, [r1, #16]
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	461e      	mov	r6, r3
 8009dd8:	f101 0c14 	add.w	ip, r1, #20
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f8dc 3000 	ldr.w	r3, [ip]
 8009de2:	b299      	uxth	r1, r3
 8009de4:	fb02 6101 	mla	r1, r2, r1, r6
 8009de8:	0c1e      	lsrs	r6, r3, #16
 8009dea:	0c0b      	lsrs	r3, r1, #16
 8009dec:	fb02 3306 	mla	r3, r2, r6, r3
 8009df0:	b289      	uxth	r1, r1
 8009df2:	3001      	adds	r0, #1
 8009df4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009df8:	4285      	cmp	r5, r0
 8009dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8009dfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e02:	dcec      	bgt.n	8009dde <__multadd+0x12>
 8009e04:	b30e      	cbz	r6, 8009e4a <__multadd+0x7e>
 8009e06:	68a3      	ldr	r3, [r4, #8]
 8009e08:	42ab      	cmp	r3, r5
 8009e0a:	dc19      	bgt.n	8009e40 <__multadd+0x74>
 8009e0c:	6861      	ldr	r1, [r4, #4]
 8009e0e:	4638      	mov	r0, r7
 8009e10:	3101      	adds	r1, #1
 8009e12:	f7ff ff79 	bl	8009d08 <_Balloc>
 8009e16:	4680      	mov	r8, r0
 8009e18:	b928      	cbnz	r0, 8009e26 <__multadd+0x5a>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e50 <__multadd+0x84>)
 8009e1e:	480d      	ldr	r0, [pc, #52]	@ (8009e54 <__multadd+0x88>)
 8009e20:	21ba      	movs	r1, #186	@ 0xba
 8009e22:	f000 fd27 	bl	800a874 <__assert_func>
 8009e26:	6922      	ldr	r2, [r4, #16]
 8009e28:	3202      	adds	r2, #2
 8009e2a:	f104 010c 	add.w	r1, r4, #12
 8009e2e:	0092      	lsls	r2, r2, #2
 8009e30:	300c      	adds	r0, #12
 8009e32:	f000 fd11 	bl	800a858 <memcpy>
 8009e36:	4621      	mov	r1, r4
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f7ff ffa5 	bl	8009d88 <_Bfree>
 8009e3e:	4644      	mov	r4, r8
 8009e40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e44:	3501      	adds	r5, #1
 8009e46:	615e      	str	r6, [r3, #20]
 8009e48:	6125      	str	r5, [r4, #16]
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e50:	0800bf38 	.word	0x0800bf38
 8009e54:	0800bf49 	.word	0x0800bf49

08009e58 <__hi0bits>:
 8009e58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	bf36      	itet	cc
 8009e60:	0403      	lslcc	r3, r0, #16
 8009e62:	2000      	movcs	r0, #0
 8009e64:	2010      	movcc	r0, #16
 8009e66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e6a:	bf3c      	itt	cc
 8009e6c:	021b      	lslcc	r3, r3, #8
 8009e6e:	3008      	addcc	r0, #8
 8009e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e74:	bf3c      	itt	cc
 8009e76:	011b      	lslcc	r3, r3, #4
 8009e78:	3004      	addcc	r0, #4
 8009e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e7e:	bf3c      	itt	cc
 8009e80:	009b      	lslcc	r3, r3, #2
 8009e82:	3002      	addcc	r0, #2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	db05      	blt.n	8009e94 <__hi0bits+0x3c>
 8009e88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009e8c:	f100 0001 	add.w	r0, r0, #1
 8009e90:	bf08      	it	eq
 8009e92:	2020      	moveq	r0, #32
 8009e94:	4770      	bx	lr

08009e96 <__lo0bits>:
 8009e96:	6803      	ldr	r3, [r0, #0]
 8009e98:	4602      	mov	r2, r0
 8009e9a:	f013 0007 	ands.w	r0, r3, #7
 8009e9e:	d00b      	beq.n	8009eb8 <__lo0bits+0x22>
 8009ea0:	07d9      	lsls	r1, r3, #31
 8009ea2:	d421      	bmi.n	8009ee8 <__lo0bits+0x52>
 8009ea4:	0798      	lsls	r0, r3, #30
 8009ea6:	bf49      	itett	mi
 8009ea8:	085b      	lsrmi	r3, r3, #1
 8009eaa:	089b      	lsrpl	r3, r3, #2
 8009eac:	2001      	movmi	r0, #1
 8009eae:	6013      	strmi	r3, [r2, #0]
 8009eb0:	bf5c      	itt	pl
 8009eb2:	6013      	strpl	r3, [r2, #0]
 8009eb4:	2002      	movpl	r0, #2
 8009eb6:	4770      	bx	lr
 8009eb8:	b299      	uxth	r1, r3
 8009eba:	b909      	cbnz	r1, 8009ec0 <__lo0bits+0x2a>
 8009ebc:	0c1b      	lsrs	r3, r3, #16
 8009ebe:	2010      	movs	r0, #16
 8009ec0:	b2d9      	uxtb	r1, r3
 8009ec2:	b909      	cbnz	r1, 8009ec8 <__lo0bits+0x32>
 8009ec4:	3008      	adds	r0, #8
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	0719      	lsls	r1, r3, #28
 8009eca:	bf04      	itt	eq
 8009ecc:	091b      	lsreq	r3, r3, #4
 8009ece:	3004      	addeq	r0, #4
 8009ed0:	0799      	lsls	r1, r3, #30
 8009ed2:	bf04      	itt	eq
 8009ed4:	089b      	lsreq	r3, r3, #2
 8009ed6:	3002      	addeq	r0, #2
 8009ed8:	07d9      	lsls	r1, r3, #31
 8009eda:	d403      	bmi.n	8009ee4 <__lo0bits+0x4e>
 8009edc:	085b      	lsrs	r3, r3, #1
 8009ede:	f100 0001 	add.w	r0, r0, #1
 8009ee2:	d003      	beq.n	8009eec <__lo0bits+0x56>
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	4770      	bx	lr
 8009ee8:	2000      	movs	r0, #0
 8009eea:	4770      	bx	lr
 8009eec:	2020      	movs	r0, #32
 8009eee:	4770      	bx	lr

08009ef0 <__i2b>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	f7ff ff07 	bl	8009d08 <_Balloc>
 8009efa:	4602      	mov	r2, r0
 8009efc:	b928      	cbnz	r0, 8009f0a <__i2b+0x1a>
 8009efe:	4b05      	ldr	r3, [pc, #20]	@ (8009f14 <__i2b+0x24>)
 8009f00:	4805      	ldr	r0, [pc, #20]	@ (8009f18 <__i2b+0x28>)
 8009f02:	f240 1145 	movw	r1, #325	@ 0x145
 8009f06:	f000 fcb5 	bl	800a874 <__assert_func>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	6144      	str	r4, [r0, #20]
 8009f0e:	6103      	str	r3, [r0, #16]
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	bf00      	nop
 8009f14:	0800bf38 	.word	0x0800bf38
 8009f18:	0800bf49 	.word	0x0800bf49

08009f1c <__multiply>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	4617      	mov	r7, r2
 8009f22:	690a      	ldr	r2, [r1, #16]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	bfa8      	it	ge
 8009f2a:	463b      	movge	r3, r7
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	bfa4      	itt	ge
 8009f30:	460f      	movge	r7, r1
 8009f32:	4699      	movge	r9, r3
 8009f34:	693d      	ldr	r5, [r7, #16]
 8009f36:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	eb05 060a 	add.w	r6, r5, sl
 8009f42:	42b3      	cmp	r3, r6
 8009f44:	b085      	sub	sp, #20
 8009f46:	bfb8      	it	lt
 8009f48:	3101      	addlt	r1, #1
 8009f4a:	f7ff fedd 	bl	8009d08 <_Balloc>
 8009f4e:	b930      	cbnz	r0, 8009f5e <__multiply+0x42>
 8009f50:	4602      	mov	r2, r0
 8009f52:	4b41      	ldr	r3, [pc, #260]	@ (800a058 <__multiply+0x13c>)
 8009f54:	4841      	ldr	r0, [pc, #260]	@ (800a05c <__multiply+0x140>)
 8009f56:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f5a:	f000 fc8b 	bl	800a874 <__assert_func>
 8009f5e:	f100 0414 	add.w	r4, r0, #20
 8009f62:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009f66:	4623      	mov	r3, r4
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4573      	cmp	r3, lr
 8009f6c:	d320      	bcc.n	8009fb0 <__multiply+0x94>
 8009f6e:	f107 0814 	add.w	r8, r7, #20
 8009f72:	f109 0114 	add.w	r1, r9, #20
 8009f76:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009f7a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009f7e:	9302      	str	r3, [sp, #8]
 8009f80:	1beb      	subs	r3, r5, r7
 8009f82:	3b15      	subs	r3, #21
 8009f84:	f023 0303 	bic.w	r3, r3, #3
 8009f88:	3304      	adds	r3, #4
 8009f8a:	3715      	adds	r7, #21
 8009f8c:	42bd      	cmp	r5, r7
 8009f8e:	bf38      	it	cc
 8009f90:	2304      	movcc	r3, #4
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	9b02      	ldr	r3, [sp, #8]
 8009f96:	9103      	str	r1, [sp, #12]
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	d80c      	bhi.n	8009fb6 <__multiply+0x9a>
 8009f9c:	2e00      	cmp	r6, #0
 8009f9e:	dd03      	ble.n	8009fa8 <__multiply+0x8c>
 8009fa0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d055      	beq.n	800a054 <__multiply+0x138>
 8009fa8:	6106      	str	r6, [r0, #16]
 8009faa:	b005      	add	sp, #20
 8009fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	f843 2b04 	str.w	r2, [r3], #4
 8009fb4:	e7d9      	b.n	8009f6a <__multiply+0x4e>
 8009fb6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009fba:	f1ba 0f00 	cmp.w	sl, #0
 8009fbe:	d01f      	beq.n	800a000 <__multiply+0xe4>
 8009fc0:	46c4      	mov	ip, r8
 8009fc2:	46a1      	mov	r9, r4
 8009fc4:	2700      	movs	r7, #0
 8009fc6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009fca:	f8d9 3000 	ldr.w	r3, [r9]
 8009fce:	fa1f fb82 	uxth.w	fp, r2
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009fd8:	443b      	add	r3, r7
 8009fda:	f8d9 7000 	ldr.w	r7, [r9]
 8009fde:	0c12      	lsrs	r2, r2, #16
 8009fe0:	0c3f      	lsrs	r7, r7, #16
 8009fe2:	fb0a 7202 	mla	r2, sl, r2, r7
 8009fe6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ff0:	4565      	cmp	r5, ip
 8009ff2:	f849 3b04 	str.w	r3, [r9], #4
 8009ff6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009ffa:	d8e4      	bhi.n	8009fc6 <__multiply+0xaa>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	50e7      	str	r7, [r4, r3]
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a006:	3104      	adds	r1, #4
 800a008:	f1b9 0f00 	cmp.w	r9, #0
 800a00c:	d020      	beq.n	800a050 <__multiply+0x134>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	4647      	mov	r7, r8
 800a012:	46a4      	mov	ip, r4
 800a014:	f04f 0a00 	mov.w	sl, #0
 800a018:	f8b7 b000 	ldrh.w	fp, [r7]
 800a01c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a020:	fb09 220b 	mla	r2, r9, fp, r2
 800a024:	4452      	add	r2, sl
 800a026:	b29b      	uxth	r3, r3
 800a028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a02c:	f84c 3b04 	str.w	r3, [ip], #4
 800a030:	f857 3b04 	ldr.w	r3, [r7], #4
 800a034:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a038:	f8bc 3000 	ldrh.w	r3, [ip]
 800a03c:	fb09 330a 	mla	r3, r9, sl, r3
 800a040:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a044:	42bd      	cmp	r5, r7
 800a046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a04a:	d8e5      	bhi.n	800a018 <__multiply+0xfc>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	50a3      	str	r3, [r4, r2]
 800a050:	3404      	adds	r4, #4
 800a052:	e79f      	b.n	8009f94 <__multiply+0x78>
 800a054:	3e01      	subs	r6, #1
 800a056:	e7a1      	b.n	8009f9c <__multiply+0x80>
 800a058:	0800bf38 	.word	0x0800bf38
 800a05c:	0800bf49 	.word	0x0800bf49

0800a060 <__pow5mult>:
 800a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a064:	4615      	mov	r5, r2
 800a066:	f012 0203 	ands.w	r2, r2, #3
 800a06a:	4607      	mov	r7, r0
 800a06c:	460e      	mov	r6, r1
 800a06e:	d007      	beq.n	800a080 <__pow5mult+0x20>
 800a070:	4c25      	ldr	r4, [pc, #148]	@ (800a108 <__pow5mult+0xa8>)
 800a072:	3a01      	subs	r2, #1
 800a074:	2300      	movs	r3, #0
 800a076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a07a:	f7ff fea7 	bl	8009dcc <__multadd>
 800a07e:	4606      	mov	r6, r0
 800a080:	10ad      	asrs	r5, r5, #2
 800a082:	d03d      	beq.n	800a100 <__pow5mult+0xa0>
 800a084:	69fc      	ldr	r4, [r7, #28]
 800a086:	b97c      	cbnz	r4, 800a0a8 <__pow5mult+0x48>
 800a088:	2010      	movs	r0, #16
 800a08a:	f7ff fd87 	bl	8009b9c <malloc>
 800a08e:	4602      	mov	r2, r0
 800a090:	61f8      	str	r0, [r7, #28]
 800a092:	b928      	cbnz	r0, 800a0a0 <__pow5mult+0x40>
 800a094:	4b1d      	ldr	r3, [pc, #116]	@ (800a10c <__pow5mult+0xac>)
 800a096:	481e      	ldr	r0, [pc, #120]	@ (800a110 <__pow5mult+0xb0>)
 800a098:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a09c:	f000 fbea 	bl	800a874 <__assert_func>
 800a0a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0a4:	6004      	str	r4, [r0, #0]
 800a0a6:	60c4      	str	r4, [r0, #12]
 800a0a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a0ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0b0:	b94c      	cbnz	r4, 800a0c6 <__pow5mult+0x66>
 800a0b2:	f240 2171 	movw	r1, #625	@ 0x271
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f7ff ff1a 	bl	8009ef0 <__i2b>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	07eb      	lsls	r3, r5, #31
 800a0cc:	d50a      	bpl.n	800a0e4 <__pow5mult+0x84>
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	f7ff ff22 	bl	8009f1c <__multiply>
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4680      	mov	r8, r0
 800a0dc:	4638      	mov	r0, r7
 800a0de:	f7ff fe53 	bl	8009d88 <_Bfree>
 800a0e2:	4646      	mov	r6, r8
 800a0e4:	106d      	asrs	r5, r5, #1
 800a0e6:	d00b      	beq.n	800a100 <__pow5mult+0xa0>
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	b938      	cbnz	r0, 800a0fc <__pow5mult+0x9c>
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff ff13 	bl	8009f1c <__multiply>
 800a0f6:	6020      	str	r0, [r4, #0]
 800a0f8:	f8c0 9000 	str.w	r9, [r0]
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	e7e4      	b.n	800a0ca <__pow5mult+0x6a>
 800a100:	4630      	mov	r0, r6
 800a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a106:	bf00      	nop
 800a108:	0800bffc 	.word	0x0800bffc
 800a10c:	0800bec9 	.word	0x0800bec9
 800a110:	0800bf49 	.word	0x0800bf49

0800a114 <__lshift>:
 800a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	460c      	mov	r4, r1
 800a11a:	6849      	ldr	r1, [r1, #4]
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a122:	68a3      	ldr	r3, [r4, #8]
 800a124:	4607      	mov	r7, r0
 800a126:	4691      	mov	r9, r2
 800a128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a12c:	f108 0601 	add.w	r6, r8, #1
 800a130:	42b3      	cmp	r3, r6
 800a132:	db0b      	blt.n	800a14c <__lshift+0x38>
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff fde7 	bl	8009d08 <_Balloc>
 800a13a:	4605      	mov	r5, r0
 800a13c:	b948      	cbnz	r0, 800a152 <__lshift+0x3e>
 800a13e:	4602      	mov	r2, r0
 800a140:	4b28      	ldr	r3, [pc, #160]	@ (800a1e4 <__lshift+0xd0>)
 800a142:	4829      	ldr	r0, [pc, #164]	@ (800a1e8 <__lshift+0xd4>)
 800a144:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a148:	f000 fb94 	bl	800a874 <__assert_func>
 800a14c:	3101      	adds	r1, #1
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	e7ee      	b.n	800a130 <__lshift+0x1c>
 800a152:	2300      	movs	r3, #0
 800a154:	f100 0114 	add.w	r1, r0, #20
 800a158:	f100 0210 	add.w	r2, r0, #16
 800a15c:	4618      	mov	r0, r3
 800a15e:	4553      	cmp	r3, sl
 800a160:	db33      	blt.n	800a1ca <__lshift+0xb6>
 800a162:	6920      	ldr	r0, [r4, #16]
 800a164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a168:	f104 0314 	add.w	r3, r4, #20
 800a16c:	f019 091f 	ands.w	r9, r9, #31
 800a170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a178:	d02b      	beq.n	800a1d2 <__lshift+0xbe>
 800a17a:	f1c9 0e20 	rsb	lr, r9, #32
 800a17e:	468a      	mov	sl, r1
 800a180:	2200      	movs	r2, #0
 800a182:	6818      	ldr	r0, [r3, #0]
 800a184:	fa00 f009 	lsl.w	r0, r0, r9
 800a188:	4310      	orrs	r0, r2
 800a18a:	f84a 0b04 	str.w	r0, [sl], #4
 800a18e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a192:	459c      	cmp	ip, r3
 800a194:	fa22 f20e 	lsr.w	r2, r2, lr
 800a198:	d8f3      	bhi.n	800a182 <__lshift+0x6e>
 800a19a:	ebac 0304 	sub.w	r3, ip, r4
 800a19e:	3b15      	subs	r3, #21
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	f104 0015 	add.w	r0, r4, #21
 800a1aa:	4560      	cmp	r0, ip
 800a1ac:	bf88      	it	hi
 800a1ae:	2304      	movhi	r3, #4
 800a1b0:	50ca      	str	r2, [r1, r3]
 800a1b2:	b10a      	cbz	r2, 800a1b8 <__lshift+0xa4>
 800a1b4:	f108 0602 	add.w	r6, r8, #2
 800a1b8:	3e01      	subs	r6, #1
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	612e      	str	r6, [r5, #16]
 800a1be:	4621      	mov	r1, r4
 800a1c0:	f7ff fde2 	bl	8009d88 <_Bfree>
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	e7c5      	b.n	800a15e <__lshift+0x4a>
 800a1d2:	3904      	subs	r1, #4
 800a1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1dc:	459c      	cmp	ip, r3
 800a1de:	d8f9      	bhi.n	800a1d4 <__lshift+0xc0>
 800a1e0:	e7ea      	b.n	800a1b8 <__lshift+0xa4>
 800a1e2:	bf00      	nop
 800a1e4:	0800bf38 	.word	0x0800bf38
 800a1e8:	0800bf49 	.word	0x0800bf49

0800a1ec <__mcmp>:
 800a1ec:	690a      	ldr	r2, [r1, #16]
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	6900      	ldr	r0, [r0, #16]
 800a1f2:	1a80      	subs	r0, r0, r2
 800a1f4:	b530      	push	{r4, r5, lr}
 800a1f6:	d10e      	bne.n	800a216 <__mcmp+0x2a>
 800a1f8:	3314      	adds	r3, #20
 800a1fa:	3114      	adds	r1, #20
 800a1fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a200:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a204:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a20c:	4295      	cmp	r5, r2
 800a20e:	d003      	beq.n	800a218 <__mcmp+0x2c>
 800a210:	d205      	bcs.n	800a21e <__mcmp+0x32>
 800a212:	f04f 30ff 	mov.w	r0, #4294967295
 800a216:	bd30      	pop	{r4, r5, pc}
 800a218:	42a3      	cmp	r3, r4
 800a21a:	d3f3      	bcc.n	800a204 <__mcmp+0x18>
 800a21c:	e7fb      	b.n	800a216 <__mcmp+0x2a>
 800a21e:	2001      	movs	r0, #1
 800a220:	e7f9      	b.n	800a216 <__mcmp+0x2a>
	...

0800a224 <__mdiff>:
 800a224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	4689      	mov	r9, r1
 800a22a:	4606      	mov	r6, r0
 800a22c:	4611      	mov	r1, r2
 800a22e:	4648      	mov	r0, r9
 800a230:	4614      	mov	r4, r2
 800a232:	f7ff ffdb 	bl	800a1ec <__mcmp>
 800a236:	1e05      	subs	r5, r0, #0
 800a238:	d112      	bne.n	800a260 <__mdiff+0x3c>
 800a23a:	4629      	mov	r1, r5
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff fd63 	bl	8009d08 <_Balloc>
 800a242:	4602      	mov	r2, r0
 800a244:	b928      	cbnz	r0, 800a252 <__mdiff+0x2e>
 800a246:	4b3f      	ldr	r3, [pc, #252]	@ (800a344 <__mdiff+0x120>)
 800a248:	f240 2137 	movw	r1, #567	@ 0x237
 800a24c:	483e      	ldr	r0, [pc, #248]	@ (800a348 <__mdiff+0x124>)
 800a24e:	f000 fb11 	bl	800a874 <__assert_func>
 800a252:	2301      	movs	r3, #1
 800a254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a258:	4610      	mov	r0, r2
 800a25a:	b003      	add	sp, #12
 800a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a260:	bfbc      	itt	lt
 800a262:	464b      	movlt	r3, r9
 800a264:	46a1      	movlt	r9, r4
 800a266:	4630      	mov	r0, r6
 800a268:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a26c:	bfba      	itte	lt
 800a26e:	461c      	movlt	r4, r3
 800a270:	2501      	movlt	r5, #1
 800a272:	2500      	movge	r5, #0
 800a274:	f7ff fd48 	bl	8009d08 <_Balloc>
 800a278:	4602      	mov	r2, r0
 800a27a:	b918      	cbnz	r0, 800a284 <__mdiff+0x60>
 800a27c:	4b31      	ldr	r3, [pc, #196]	@ (800a344 <__mdiff+0x120>)
 800a27e:	f240 2145 	movw	r1, #581	@ 0x245
 800a282:	e7e3      	b.n	800a24c <__mdiff+0x28>
 800a284:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a288:	6926      	ldr	r6, [r4, #16]
 800a28a:	60c5      	str	r5, [r0, #12]
 800a28c:	f109 0310 	add.w	r3, r9, #16
 800a290:	f109 0514 	add.w	r5, r9, #20
 800a294:	f104 0e14 	add.w	lr, r4, #20
 800a298:	f100 0b14 	add.w	fp, r0, #20
 800a29c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a2a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	46d9      	mov	r9, fp
 800a2a8:	f04f 0c00 	mov.w	ip, #0
 800a2ac:	9b01      	ldr	r3, [sp, #4]
 800a2ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a2b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a2b6:	9301      	str	r3, [sp, #4]
 800a2b8:	fa1f f38a 	uxth.w	r3, sl
 800a2bc:	4619      	mov	r1, r3
 800a2be:	b283      	uxth	r3, r0
 800a2c0:	1acb      	subs	r3, r1, r3
 800a2c2:	0c00      	lsrs	r0, r0, #16
 800a2c4:	4463      	add	r3, ip
 800a2c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a2ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a2d4:	4576      	cmp	r6, lr
 800a2d6:	f849 3b04 	str.w	r3, [r9], #4
 800a2da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a2de:	d8e5      	bhi.n	800a2ac <__mdiff+0x88>
 800a2e0:	1b33      	subs	r3, r6, r4
 800a2e2:	3b15      	subs	r3, #21
 800a2e4:	f023 0303 	bic.w	r3, r3, #3
 800a2e8:	3415      	adds	r4, #21
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	42a6      	cmp	r6, r4
 800a2ee:	bf38      	it	cc
 800a2f0:	2304      	movcc	r3, #4
 800a2f2:	441d      	add	r5, r3
 800a2f4:	445b      	add	r3, fp
 800a2f6:	461e      	mov	r6, r3
 800a2f8:	462c      	mov	r4, r5
 800a2fa:	4544      	cmp	r4, r8
 800a2fc:	d30e      	bcc.n	800a31c <__mdiff+0xf8>
 800a2fe:	f108 0103 	add.w	r1, r8, #3
 800a302:	1b49      	subs	r1, r1, r5
 800a304:	f021 0103 	bic.w	r1, r1, #3
 800a308:	3d03      	subs	r5, #3
 800a30a:	45a8      	cmp	r8, r5
 800a30c:	bf38      	it	cc
 800a30e:	2100      	movcc	r1, #0
 800a310:	440b      	add	r3, r1
 800a312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a316:	b191      	cbz	r1, 800a33e <__mdiff+0x11a>
 800a318:	6117      	str	r7, [r2, #16]
 800a31a:	e79d      	b.n	800a258 <__mdiff+0x34>
 800a31c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a320:	46e6      	mov	lr, ip
 800a322:	0c08      	lsrs	r0, r1, #16
 800a324:	fa1c fc81 	uxtah	ip, ip, r1
 800a328:	4471      	add	r1, lr
 800a32a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a32e:	b289      	uxth	r1, r1
 800a330:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a334:	f846 1b04 	str.w	r1, [r6], #4
 800a338:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a33c:	e7dd      	b.n	800a2fa <__mdiff+0xd6>
 800a33e:	3f01      	subs	r7, #1
 800a340:	e7e7      	b.n	800a312 <__mdiff+0xee>
 800a342:	bf00      	nop
 800a344:	0800bf38 	.word	0x0800bf38
 800a348:	0800bf49 	.word	0x0800bf49

0800a34c <__d2b>:
 800a34c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a350:	460f      	mov	r7, r1
 800a352:	2101      	movs	r1, #1
 800a354:	ec59 8b10 	vmov	r8, r9, d0
 800a358:	4616      	mov	r6, r2
 800a35a:	f7ff fcd5 	bl	8009d08 <_Balloc>
 800a35e:	4604      	mov	r4, r0
 800a360:	b930      	cbnz	r0, 800a370 <__d2b+0x24>
 800a362:	4602      	mov	r2, r0
 800a364:	4b23      	ldr	r3, [pc, #140]	@ (800a3f4 <__d2b+0xa8>)
 800a366:	4824      	ldr	r0, [pc, #144]	@ (800a3f8 <__d2b+0xac>)
 800a368:	f240 310f 	movw	r1, #783	@ 0x30f
 800a36c:	f000 fa82 	bl	800a874 <__assert_func>
 800a370:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a374:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a378:	b10d      	cbz	r5, 800a37e <__d2b+0x32>
 800a37a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	f1b8 0300 	subs.w	r3, r8, #0
 800a384:	d023      	beq.n	800a3ce <__d2b+0x82>
 800a386:	4668      	mov	r0, sp
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	f7ff fd84 	bl	8009e96 <__lo0bits>
 800a38e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a392:	b1d0      	cbz	r0, 800a3ca <__d2b+0x7e>
 800a394:	f1c0 0320 	rsb	r3, r0, #32
 800a398:	fa02 f303 	lsl.w	r3, r2, r3
 800a39c:	430b      	orrs	r3, r1
 800a39e:	40c2      	lsrs	r2, r0
 800a3a0:	6163      	str	r3, [r4, #20]
 800a3a2:	9201      	str	r2, [sp, #4]
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	61a3      	str	r3, [r4, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bf0c      	ite	eq
 800a3ac:	2201      	moveq	r2, #1
 800a3ae:	2202      	movne	r2, #2
 800a3b0:	6122      	str	r2, [r4, #16]
 800a3b2:	b1a5      	cbz	r5, 800a3de <__d2b+0x92>
 800a3b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a3b8:	4405      	add	r5, r0
 800a3ba:	603d      	str	r5, [r7, #0]
 800a3bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a3c0:	6030      	str	r0, [r6, #0]
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	b003      	add	sp, #12
 800a3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ca:	6161      	str	r1, [r4, #20]
 800a3cc:	e7ea      	b.n	800a3a4 <__d2b+0x58>
 800a3ce:	a801      	add	r0, sp, #4
 800a3d0:	f7ff fd61 	bl	8009e96 <__lo0bits>
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	6163      	str	r3, [r4, #20]
 800a3d8:	3020      	adds	r0, #32
 800a3da:	2201      	movs	r2, #1
 800a3dc:	e7e8      	b.n	800a3b0 <__d2b+0x64>
 800a3de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a3e6:	6038      	str	r0, [r7, #0]
 800a3e8:	6918      	ldr	r0, [r3, #16]
 800a3ea:	f7ff fd35 	bl	8009e58 <__hi0bits>
 800a3ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3f2:	e7e5      	b.n	800a3c0 <__d2b+0x74>
 800a3f4:	0800bf38 	.word	0x0800bf38
 800a3f8:	0800bf49 	.word	0x0800bf49

0800a3fc <__ssputs_r>:
 800a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a400:	688e      	ldr	r6, [r1, #8]
 800a402:	461f      	mov	r7, r3
 800a404:	42be      	cmp	r6, r7
 800a406:	680b      	ldr	r3, [r1, #0]
 800a408:	4682      	mov	sl, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	4690      	mov	r8, r2
 800a40e:	d82d      	bhi.n	800a46c <__ssputs_r+0x70>
 800a410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a418:	d026      	beq.n	800a468 <__ssputs_r+0x6c>
 800a41a:	6965      	ldr	r5, [r4, #20]
 800a41c:	6909      	ldr	r1, [r1, #16]
 800a41e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a422:	eba3 0901 	sub.w	r9, r3, r1
 800a426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a42a:	1c7b      	adds	r3, r7, #1
 800a42c:	444b      	add	r3, r9
 800a42e:	106d      	asrs	r5, r5, #1
 800a430:	429d      	cmp	r5, r3
 800a432:	bf38      	it	cc
 800a434:	461d      	movcc	r5, r3
 800a436:	0553      	lsls	r3, r2, #21
 800a438:	d527      	bpl.n	800a48a <__ssputs_r+0x8e>
 800a43a:	4629      	mov	r1, r5
 800a43c:	f7ff fbd8 	bl	8009bf0 <_malloc_r>
 800a440:	4606      	mov	r6, r0
 800a442:	b360      	cbz	r0, 800a49e <__ssputs_r+0xa2>
 800a444:	6921      	ldr	r1, [r4, #16]
 800a446:	464a      	mov	r2, r9
 800a448:	f000 fa06 	bl	800a858 <memcpy>
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	6126      	str	r6, [r4, #16]
 800a45a:	6165      	str	r5, [r4, #20]
 800a45c:	444e      	add	r6, r9
 800a45e:	eba5 0509 	sub.w	r5, r5, r9
 800a462:	6026      	str	r6, [r4, #0]
 800a464:	60a5      	str	r5, [r4, #8]
 800a466:	463e      	mov	r6, r7
 800a468:	42be      	cmp	r6, r7
 800a46a:	d900      	bls.n	800a46e <__ssputs_r+0x72>
 800a46c:	463e      	mov	r6, r7
 800a46e:	6820      	ldr	r0, [r4, #0]
 800a470:	4632      	mov	r2, r6
 800a472:	4641      	mov	r1, r8
 800a474:	f000 f9c6 	bl	800a804 <memmove>
 800a478:	68a3      	ldr	r3, [r4, #8]
 800a47a:	1b9b      	subs	r3, r3, r6
 800a47c:	60a3      	str	r3, [r4, #8]
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	4433      	add	r3, r6
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	2000      	movs	r0, #0
 800a486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48a:	462a      	mov	r2, r5
 800a48c:	f000 fa36 	bl	800a8fc <_realloc_r>
 800a490:	4606      	mov	r6, r0
 800a492:	2800      	cmp	r0, #0
 800a494:	d1e0      	bne.n	800a458 <__ssputs_r+0x5c>
 800a496:	6921      	ldr	r1, [r4, #16]
 800a498:	4650      	mov	r0, sl
 800a49a:	f7ff fb35 	bl	8009b08 <_free_r>
 800a49e:	230c      	movs	r3, #12
 800a4a0:	f8ca 3000 	str.w	r3, [sl]
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b0:	e7e9      	b.n	800a486 <__ssputs_r+0x8a>
	...

0800a4b4 <_svfiprintf_r>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	4698      	mov	r8, r3
 800a4ba:	898b      	ldrh	r3, [r1, #12]
 800a4bc:	061b      	lsls	r3, r3, #24
 800a4be:	b09d      	sub	sp, #116	@ 0x74
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	460d      	mov	r5, r1
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	d510      	bpl.n	800a4ea <_svfiprintf_r+0x36>
 800a4c8:	690b      	ldr	r3, [r1, #16]
 800a4ca:	b973      	cbnz	r3, 800a4ea <_svfiprintf_r+0x36>
 800a4cc:	2140      	movs	r1, #64	@ 0x40
 800a4ce:	f7ff fb8f 	bl	8009bf0 <_malloc_r>
 800a4d2:	6028      	str	r0, [r5, #0]
 800a4d4:	6128      	str	r0, [r5, #16]
 800a4d6:	b930      	cbnz	r0, 800a4e6 <_svfiprintf_r+0x32>
 800a4d8:	230c      	movs	r3, #12
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	b01d      	add	sp, #116	@ 0x74
 800a4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e6:	2340      	movs	r3, #64	@ 0x40
 800a4e8:	616b      	str	r3, [r5, #20]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4ee:	2320      	movs	r3, #32
 800a4f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f8:	2330      	movs	r3, #48	@ 0x30
 800a4fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a698 <_svfiprintf_r+0x1e4>
 800a4fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a502:	f04f 0901 	mov.w	r9, #1
 800a506:	4623      	mov	r3, r4
 800a508:	469a      	mov	sl, r3
 800a50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a50e:	b10a      	cbz	r2, 800a514 <_svfiprintf_r+0x60>
 800a510:	2a25      	cmp	r2, #37	@ 0x25
 800a512:	d1f9      	bne.n	800a508 <_svfiprintf_r+0x54>
 800a514:	ebba 0b04 	subs.w	fp, sl, r4
 800a518:	d00b      	beq.n	800a532 <_svfiprintf_r+0x7e>
 800a51a:	465b      	mov	r3, fp
 800a51c:	4622      	mov	r2, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ff6b 	bl	800a3fc <__ssputs_r>
 800a526:	3001      	adds	r0, #1
 800a528:	f000 80a7 	beq.w	800a67a <_svfiprintf_r+0x1c6>
 800a52c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a52e:	445a      	add	r2, fp
 800a530:	9209      	str	r2, [sp, #36]	@ 0x24
 800a532:	f89a 3000 	ldrb.w	r3, [sl]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 809f 	beq.w	800a67a <_svfiprintf_r+0x1c6>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295
 800a542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a546:	f10a 0a01 	add.w	sl, sl, #1
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	9307      	str	r3, [sp, #28]
 800a54e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a552:	931a      	str	r3, [sp, #104]	@ 0x68
 800a554:	4654      	mov	r4, sl
 800a556:	2205      	movs	r2, #5
 800a558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55c:	484e      	ldr	r0, [pc, #312]	@ (800a698 <_svfiprintf_r+0x1e4>)
 800a55e:	f7f5 fe3f 	bl	80001e0 <memchr>
 800a562:	9a04      	ldr	r2, [sp, #16]
 800a564:	b9d8      	cbnz	r0, 800a59e <_svfiprintf_r+0xea>
 800a566:	06d0      	lsls	r0, r2, #27
 800a568:	bf44      	itt	mi
 800a56a:	2320      	movmi	r3, #32
 800a56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a570:	0711      	lsls	r1, r2, #28
 800a572:	bf44      	itt	mi
 800a574:	232b      	movmi	r3, #43	@ 0x2b
 800a576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a57a:	f89a 3000 	ldrb.w	r3, [sl]
 800a57e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a580:	d015      	beq.n	800a5ae <_svfiprintf_r+0xfa>
 800a582:	9a07      	ldr	r2, [sp, #28]
 800a584:	4654      	mov	r4, sl
 800a586:	2000      	movs	r0, #0
 800a588:	f04f 0c0a 	mov.w	ip, #10
 800a58c:	4621      	mov	r1, r4
 800a58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a592:	3b30      	subs	r3, #48	@ 0x30
 800a594:	2b09      	cmp	r3, #9
 800a596:	d94b      	bls.n	800a630 <_svfiprintf_r+0x17c>
 800a598:	b1b0      	cbz	r0, 800a5c8 <_svfiprintf_r+0x114>
 800a59a:	9207      	str	r2, [sp, #28]
 800a59c:	e014      	b.n	800a5c8 <_svfiprintf_r+0x114>
 800a59e:	eba0 0308 	sub.w	r3, r0, r8
 800a5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	46a2      	mov	sl, r4
 800a5ac:	e7d2      	b.n	800a554 <_svfiprintf_r+0xa0>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	1d19      	adds	r1, r3, #4
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	9103      	str	r1, [sp, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfbb      	ittet	lt
 800a5ba:	425b      	neglt	r3, r3
 800a5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a5c0:	9307      	strge	r3, [sp, #28]
 800a5c2:	9307      	strlt	r3, [sp, #28]
 800a5c4:	bfb8      	it	lt
 800a5c6:	9204      	strlt	r2, [sp, #16]
 800a5c8:	7823      	ldrb	r3, [r4, #0]
 800a5ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5cc:	d10a      	bne.n	800a5e4 <_svfiprintf_r+0x130>
 800a5ce:	7863      	ldrb	r3, [r4, #1]
 800a5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5d2:	d132      	bne.n	800a63a <_svfiprintf_r+0x186>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	9203      	str	r2, [sp, #12]
 800a5dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5e0:	3402      	adds	r4, #2
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6a8 <_svfiprintf_r+0x1f4>
 800a5e8:	7821      	ldrb	r1, [r4, #0]
 800a5ea:	2203      	movs	r2, #3
 800a5ec:	4650      	mov	r0, sl
 800a5ee:	f7f5 fdf7 	bl	80001e0 <memchr>
 800a5f2:	b138      	cbz	r0, 800a604 <_svfiprintf_r+0x150>
 800a5f4:	9b04      	ldr	r3, [sp, #16]
 800a5f6:	eba0 000a 	sub.w	r0, r0, sl
 800a5fa:	2240      	movs	r2, #64	@ 0x40
 800a5fc:	4082      	lsls	r2, r0
 800a5fe:	4313      	orrs	r3, r2
 800a600:	3401      	adds	r4, #1
 800a602:	9304      	str	r3, [sp, #16]
 800a604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a608:	4824      	ldr	r0, [pc, #144]	@ (800a69c <_svfiprintf_r+0x1e8>)
 800a60a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a60e:	2206      	movs	r2, #6
 800a610:	f7f5 fde6 	bl	80001e0 <memchr>
 800a614:	2800      	cmp	r0, #0
 800a616:	d036      	beq.n	800a686 <_svfiprintf_r+0x1d2>
 800a618:	4b21      	ldr	r3, [pc, #132]	@ (800a6a0 <_svfiprintf_r+0x1ec>)
 800a61a:	bb1b      	cbnz	r3, 800a664 <_svfiprintf_r+0x1b0>
 800a61c:	9b03      	ldr	r3, [sp, #12]
 800a61e:	3307      	adds	r3, #7
 800a620:	f023 0307 	bic.w	r3, r3, #7
 800a624:	3308      	adds	r3, #8
 800a626:	9303      	str	r3, [sp, #12]
 800a628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a62a:	4433      	add	r3, r6
 800a62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a62e:	e76a      	b.n	800a506 <_svfiprintf_r+0x52>
 800a630:	fb0c 3202 	mla	r2, ip, r2, r3
 800a634:	460c      	mov	r4, r1
 800a636:	2001      	movs	r0, #1
 800a638:	e7a8      	b.n	800a58c <_svfiprintf_r+0xd8>
 800a63a:	2300      	movs	r3, #0
 800a63c:	3401      	adds	r4, #1
 800a63e:	9305      	str	r3, [sp, #20]
 800a640:	4619      	mov	r1, r3
 800a642:	f04f 0c0a 	mov.w	ip, #10
 800a646:	4620      	mov	r0, r4
 800a648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a64c:	3a30      	subs	r2, #48	@ 0x30
 800a64e:	2a09      	cmp	r2, #9
 800a650:	d903      	bls.n	800a65a <_svfiprintf_r+0x1a6>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0c6      	beq.n	800a5e4 <_svfiprintf_r+0x130>
 800a656:	9105      	str	r1, [sp, #20]
 800a658:	e7c4      	b.n	800a5e4 <_svfiprintf_r+0x130>
 800a65a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a65e:	4604      	mov	r4, r0
 800a660:	2301      	movs	r3, #1
 800a662:	e7f0      	b.n	800a646 <_svfiprintf_r+0x192>
 800a664:	ab03      	add	r3, sp, #12
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	462a      	mov	r2, r5
 800a66a:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a4 <_svfiprintf_r+0x1f0>)
 800a66c:	a904      	add	r1, sp, #16
 800a66e:	4638      	mov	r0, r7
 800a670:	f7fd fe94 	bl	800839c <_printf_float>
 800a674:	1c42      	adds	r2, r0, #1
 800a676:	4606      	mov	r6, r0
 800a678:	d1d6      	bne.n	800a628 <_svfiprintf_r+0x174>
 800a67a:	89ab      	ldrh	r3, [r5, #12]
 800a67c:	065b      	lsls	r3, r3, #25
 800a67e:	f53f af2d 	bmi.w	800a4dc <_svfiprintf_r+0x28>
 800a682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a684:	e72c      	b.n	800a4e0 <_svfiprintf_r+0x2c>
 800a686:	ab03      	add	r3, sp, #12
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	462a      	mov	r2, r5
 800a68c:	4b05      	ldr	r3, [pc, #20]	@ (800a6a4 <_svfiprintf_r+0x1f0>)
 800a68e:	a904      	add	r1, sp, #16
 800a690:	4638      	mov	r0, r7
 800a692:	f7fe f91b 	bl	80088cc <_printf_i>
 800a696:	e7ed      	b.n	800a674 <_svfiprintf_r+0x1c0>
 800a698:	0800bfa2 	.word	0x0800bfa2
 800a69c:	0800bfac 	.word	0x0800bfac
 800a6a0:	0800839d 	.word	0x0800839d
 800a6a4:	0800a3fd 	.word	0x0800a3fd
 800a6a8:	0800bfa8 	.word	0x0800bfa8

0800a6ac <__sflush_r>:
 800a6ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b4:	0716      	lsls	r6, r2, #28
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	460c      	mov	r4, r1
 800a6ba:	d454      	bmi.n	800a766 <__sflush_r+0xba>
 800a6bc:	684b      	ldr	r3, [r1, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dc02      	bgt.n	800a6c8 <__sflush_r+0x1c>
 800a6c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dd48      	ble.n	800a75a <__sflush_r+0xae>
 800a6c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6ca:	2e00      	cmp	r6, #0
 800a6cc:	d045      	beq.n	800a75a <__sflush_r+0xae>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6d4:	682f      	ldr	r7, [r5, #0]
 800a6d6:	6a21      	ldr	r1, [r4, #32]
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	d030      	beq.n	800a73e <__sflush_r+0x92>
 800a6dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	0759      	lsls	r1, r3, #29
 800a6e2:	d505      	bpl.n	800a6f0 <__sflush_r+0x44>
 800a6e4:	6863      	ldr	r3, [r4, #4]
 800a6e6:	1ad2      	subs	r2, r2, r3
 800a6e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6ea:	b10b      	cbz	r3, 800a6f0 <__sflush_r+0x44>
 800a6ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6ee:	1ad2      	subs	r2, r2, r3
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6f4:	6a21      	ldr	r1, [r4, #32]
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b0      	blx	r6
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	d106      	bne.n	800a70e <__sflush_r+0x62>
 800a700:	6829      	ldr	r1, [r5, #0]
 800a702:	291d      	cmp	r1, #29
 800a704:	d82b      	bhi.n	800a75e <__sflush_r+0xb2>
 800a706:	4a2a      	ldr	r2, [pc, #168]	@ (800a7b0 <__sflush_r+0x104>)
 800a708:	40ca      	lsrs	r2, r1
 800a70a:	07d6      	lsls	r6, r2, #31
 800a70c:	d527      	bpl.n	800a75e <__sflush_r+0xb2>
 800a70e:	2200      	movs	r2, #0
 800a710:	6062      	str	r2, [r4, #4]
 800a712:	04d9      	lsls	r1, r3, #19
 800a714:	6922      	ldr	r2, [r4, #16]
 800a716:	6022      	str	r2, [r4, #0]
 800a718:	d504      	bpl.n	800a724 <__sflush_r+0x78>
 800a71a:	1c42      	adds	r2, r0, #1
 800a71c:	d101      	bne.n	800a722 <__sflush_r+0x76>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	b903      	cbnz	r3, 800a724 <__sflush_r+0x78>
 800a722:	6560      	str	r0, [r4, #84]	@ 0x54
 800a724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a726:	602f      	str	r7, [r5, #0]
 800a728:	b1b9      	cbz	r1, 800a75a <__sflush_r+0xae>
 800a72a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a72e:	4299      	cmp	r1, r3
 800a730:	d002      	beq.n	800a738 <__sflush_r+0x8c>
 800a732:	4628      	mov	r0, r5
 800a734:	f7ff f9e8 	bl	8009b08 <_free_r>
 800a738:	2300      	movs	r3, #0
 800a73a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a73c:	e00d      	b.n	800a75a <__sflush_r+0xae>
 800a73e:	2301      	movs	r3, #1
 800a740:	4628      	mov	r0, r5
 800a742:	47b0      	blx	r6
 800a744:	4602      	mov	r2, r0
 800a746:	1c50      	adds	r0, r2, #1
 800a748:	d1c9      	bne.n	800a6de <__sflush_r+0x32>
 800a74a:	682b      	ldr	r3, [r5, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d0c6      	beq.n	800a6de <__sflush_r+0x32>
 800a750:	2b1d      	cmp	r3, #29
 800a752:	d001      	beq.n	800a758 <__sflush_r+0xac>
 800a754:	2b16      	cmp	r3, #22
 800a756:	d11e      	bne.n	800a796 <__sflush_r+0xea>
 800a758:	602f      	str	r7, [r5, #0]
 800a75a:	2000      	movs	r0, #0
 800a75c:	e022      	b.n	800a7a4 <__sflush_r+0xf8>
 800a75e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a762:	b21b      	sxth	r3, r3
 800a764:	e01b      	b.n	800a79e <__sflush_r+0xf2>
 800a766:	690f      	ldr	r7, [r1, #16]
 800a768:	2f00      	cmp	r7, #0
 800a76a:	d0f6      	beq.n	800a75a <__sflush_r+0xae>
 800a76c:	0793      	lsls	r3, r2, #30
 800a76e:	680e      	ldr	r6, [r1, #0]
 800a770:	bf08      	it	eq
 800a772:	694b      	ldreq	r3, [r1, #20]
 800a774:	600f      	str	r7, [r1, #0]
 800a776:	bf18      	it	ne
 800a778:	2300      	movne	r3, #0
 800a77a:	eba6 0807 	sub.w	r8, r6, r7
 800a77e:	608b      	str	r3, [r1, #8]
 800a780:	f1b8 0f00 	cmp.w	r8, #0
 800a784:	dde9      	ble.n	800a75a <__sflush_r+0xae>
 800a786:	6a21      	ldr	r1, [r4, #32]
 800a788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a78a:	4643      	mov	r3, r8
 800a78c:	463a      	mov	r2, r7
 800a78e:	4628      	mov	r0, r5
 800a790:	47b0      	blx	r6
 800a792:	2800      	cmp	r0, #0
 800a794:	dc08      	bgt.n	800a7a8 <__sflush_r+0xfc>
 800a796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a79a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a79e:	81a3      	strh	r3, [r4, #12]
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a8:	4407      	add	r7, r0
 800a7aa:	eba8 0800 	sub.w	r8, r8, r0
 800a7ae:	e7e7      	b.n	800a780 <__sflush_r+0xd4>
 800a7b0:	20400001 	.word	0x20400001

0800a7b4 <_fflush_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	690b      	ldr	r3, [r1, #16]
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	b913      	cbnz	r3, 800a7c4 <_fflush_r+0x10>
 800a7be:	2500      	movs	r5, #0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	b118      	cbz	r0, 800a7ce <_fflush_r+0x1a>
 800a7c6:	6a03      	ldr	r3, [r0, #32]
 800a7c8:	b90b      	cbnz	r3, 800a7ce <_fflush_r+0x1a>
 800a7ca:	f7fe fa29 	bl	8008c20 <__sinit>
 800a7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d0f3      	beq.n	800a7be <_fflush_r+0xa>
 800a7d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7d8:	07d0      	lsls	r0, r2, #31
 800a7da:	d404      	bmi.n	800a7e6 <_fflush_r+0x32>
 800a7dc:	0599      	lsls	r1, r3, #22
 800a7de:	d402      	bmi.n	800a7e6 <_fflush_r+0x32>
 800a7e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7e2:	f7fe fb36 	bl	8008e52 <__retarget_lock_acquire_recursive>
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	f7ff ff5f 	bl	800a6ac <__sflush_r>
 800a7ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7f0:	07da      	lsls	r2, r3, #31
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	d4e4      	bmi.n	800a7c0 <_fflush_r+0xc>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	059b      	lsls	r3, r3, #22
 800a7fa:	d4e1      	bmi.n	800a7c0 <_fflush_r+0xc>
 800a7fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7fe:	f7fe fb29 	bl	8008e54 <__retarget_lock_release_recursive>
 800a802:	e7dd      	b.n	800a7c0 <_fflush_r+0xc>

0800a804 <memmove>:
 800a804:	4288      	cmp	r0, r1
 800a806:	b510      	push	{r4, lr}
 800a808:	eb01 0402 	add.w	r4, r1, r2
 800a80c:	d902      	bls.n	800a814 <memmove+0x10>
 800a80e:	4284      	cmp	r4, r0
 800a810:	4623      	mov	r3, r4
 800a812:	d807      	bhi.n	800a824 <memmove+0x20>
 800a814:	1e43      	subs	r3, r0, #1
 800a816:	42a1      	cmp	r1, r4
 800a818:	d008      	beq.n	800a82c <memmove+0x28>
 800a81a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a81e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a822:	e7f8      	b.n	800a816 <memmove+0x12>
 800a824:	4402      	add	r2, r0
 800a826:	4601      	mov	r1, r0
 800a828:	428a      	cmp	r2, r1
 800a82a:	d100      	bne.n	800a82e <memmove+0x2a>
 800a82c:	bd10      	pop	{r4, pc}
 800a82e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a836:	e7f7      	b.n	800a828 <memmove+0x24>

0800a838 <_sbrk_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4d06      	ldr	r5, [pc, #24]	@ (800a854 <_sbrk_r+0x1c>)
 800a83c:	2300      	movs	r3, #0
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	f7f6 feba 	bl	80015bc <_sbrk>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_sbrk_r+0x1a>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_sbrk_r+0x1a>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20003850 	.word	0x20003850

0800a858 <memcpy>:
 800a858:	440a      	add	r2, r1
 800a85a:	4291      	cmp	r1, r2
 800a85c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a860:	d100      	bne.n	800a864 <memcpy+0xc>
 800a862:	4770      	bx	lr
 800a864:	b510      	push	{r4, lr}
 800a866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a86e:	4291      	cmp	r1, r2
 800a870:	d1f9      	bne.n	800a866 <memcpy+0xe>
 800a872:	bd10      	pop	{r4, pc}

0800a874 <__assert_func>:
 800a874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a876:	4614      	mov	r4, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	4b09      	ldr	r3, [pc, #36]	@ (800a8a0 <__assert_func+0x2c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4605      	mov	r5, r0
 800a880:	68d8      	ldr	r0, [r3, #12]
 800a882:	b14c      	cbz	r4, 800a898 <__assert_func+0x24>
 800a884:	4b07      	ldr	r3, [pc, #28]	@ (800a8a4 <__assert_func+0x30>)
 800a886:	9100      	str	r1, [sp, #0]
 800a888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a88c:	4906      	ldr	r1, [pc, #24]	@ (800a8a8 <__assert_func+0x34>)
 800a88e:	462b      	mov	r3, r5
 800a890:	f000 f870 	bl	800a974 <fiprintf>
 800a894:	f000 f880 	bl	800a998 <abort>
 800a898:	4b04      	ldr	r3, [pc, #16]	@ (800a8ac <__assert_func+0x38>)
 800a89a:	461c      	mov	r4, r3
 800a89c:	e7f3      	b.n	800a886 <__assert_func+0x12>
 800a89e:	bf00      	nop
 800a8a0:	20000108 	.word	0x20000108
 800a8a4:	0800bfbd 	.word	0x0800bfbd
 800a8a8:	0800bfca 	.word	0x0800bfca
 800a8ac:	0800bff8 	.word	0x0800bff8

0800a8b0 <_calloc_r>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	fba1 5402 	umull	r5, r4, r1, r2
 800a8b6:	b934      	cbnz	r4, 800a8c6 <_calloc_r+0x16>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7ff f999 	bl	8009bf0 <_malloc_r>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	b928      	cbnz	r0, 800a8ce <_calloc_r+0x1e>
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	220c      	movs	r2, #12
 800a8c8:	6002      	str	r2, [r0, #0]
 800a8ca:	2600      	movs	r6, #0
 800a8cc:	e7f9      	b.n	800a8c2 <_calloc_r+0x12>
 800a8ce:	462a      	mov	r2, r5
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7fe fa40 	bl	8008d56 <memset>
 800a8d6:	e7f4      	b.n	800a8c2 <_calloc_r+0x12>

0800a8d8 <__ascii_mbtowc>:
 800a8d8:	b082      	sub	sp, #8
 800a8da:	b901      	cbnz	r1, 800a8de <__ascii_mbtowc+0x6>
 800a8dc:	a901      	add	r1, sp, #4
 800a8de:	b142      	cbz	r2, 800a8f2 <__ascii_mbtowc+0x1a>
 800a8e0:	b14b      	cbz	r3, 800a8f6 <__ascii_mbtowc+0x1e>
 800a8e2:	7813      	ldrb	r3, [r2, #0]
 800a8e4:	600b      	str	r3, [r1, #0]
 800a8e6:	7812      	ldrb	r2, [r2, #0]
 800a8e8:	1e10      	subs	r0, r2, #0
 800a8ea:	bf18      	it	ne
 800a8ec:	2001      	movne	r0, #1
 800a8ee:	b002      	add	sp, #8
 800a8f0:	4770      	bx	lr
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	e7fb      	b.n	800a8ee <__ascii_mbtowc+0x16>
 800a8f6:	f06f 0001 	mvn.w	r0, #1
 800a8fa:	e7f8      	b.n	800a8ee <__ascii_mbtowc+0x16>

0800a8fc <_realloc_r>:
 800a8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a900:	4607      	mov	r7, r0
 800a902:	4614      	mov	r4, r2
 800a904:	460d      	mov	r5, r1
 800a906:	b921      	cbnz	r1, 800a912 <_realloc_r+0x16>
 800a908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a90c:	4611      	mov	r1, r2
 800a90e:	f7ff b96f 	b.w	8009bf0 <_malloc_r>
 800a912:	b92a      	cbnz	r2, 800a920 <_realloc_r+0x24>
 800a914:	f7ff f8f8 	bl	8009b08 <_free_r>
 800a918:	4625      	mov	r5, r4
 800a91a:	4628      	mov	r0, r5
 800a91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a920:	f000 f841 	bl	800a9a6 <_malloc_usable_size_r>
 800a924:	4284      	cmp	r4, r0
 800a926:	4606      	mov	r6, r0
 800a928:	d802      	bhi.n	800a930 <_realloc_r+0x34>
 800a92a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a92e:	d8f4      	bhi.n	800a91a <_realloc_r+0x1e>
 800a930:	4621      	mov	r1, r4
 800a932:	4638      	mov	r0, r7
 800a934:	f7ff f95c 	bl	8009bf0 <_malloc_r>
 800a938:	4680      	mov	r8, r0
 800a93a:	b908      	cbnz	r0, 800a940 <_realloc_r+0x44>
 800a93c:	4645      	mov	r5, r8
 800a93e:	e7ec      	b.n	800a91a <_realloc_r+0x1e>
 800a940:	42b4      	cmp	r4, r6
 800a942:	4622      	mov	r2, r4
 800a944:	4629      	mov	r1, r5
 800a946:	bf28      	it	cs
 800a948:	4632      	movcs	r2, r6
 800a94a:	f7ff ff85 	bl	800a858 <memcpy>
 800a94e:	4629      	mov	r1, r5
 800a950:	4638      	mov	r0, r7
 800a952:	f7ff f8d9 	bl	8009b08 <_free_r>
 800a956:	e7f1      	b.n	800a93c <_realloc_r+0x40>

0800a958 <__ascii_wctomb>:
 800a958:	4603      	mov	r3, r0
 800a95a:	4608      	mov	r0, r1
 800a95c:	b141      	cbz	r1, 800a970 <__ascii_wctomb+0x18>
 800a95e:	2aff      	cmp	r2, #255	@ 0xff
 800a960:	d904      	bls.n	800a96c <__ascii_wctomb+0x14>
 800a962:	228a      	movs	r2, #138	@ 0x8a
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	f04f 30ff 	mov.w	r0, #4294967295
 800a96a:	4770      	bx	lr
 800a96c:	700a      	strb	r2, [r1, #0]
 800a96e:	2001      	movs	r0, #1
 800a970:	4770      	bx	lr
	...

0800a974 <fiprintf>:
 800a974:	b40e      	push	{r1, r2, r3}
 800a976:	b503      	push	{r0, r1, lr}
 800a978:	4601      	mov	r1, r0
 800a97a:	ab03      	add	r3, sp, #12
 800a97c:	4805      	ldr	r0, [pc, #20]	@ (800a994 <fiprintf+0x20>)
 800a97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a982:	6800      	ldr	r0, [r0, #0]
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	f000 f83f 	bl	800aa08 <_vfiprintf_r>
 800a98a:	b002      	add	sp, #8
 800a98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a990:	b003      	add	sp, #12
 800a992:	4770      	bx	lr
 800a994:	20000108 	.word	0x20000108

0800a998 <abort>:
 800a998:	b508      	push	{r3, lr}
 800a99a:	2006      	movs	r0, #6
 800a99c:	f000 fa08 	bl	800adb0 <raise>
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	f7f6 fd93 	bl	80014cc <_exit>

0800a9a6 <_malloc_usable_size_r>:
 800a9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9aa:	1f18      	subs	r0, r3, #4
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	bfbc      	itt	lt
 800a9b0:	580b      	ldrlt	r3, [r1, r0]
 800a9b2:	18c0      	addlt	r0, r0, r3
 800a9b4:	4770      	bx	lr

0800a9b6 <__sfputc_r>:
 800a9b6:	6893      	ldr	r3, [r2, #8]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	b410      	push	{r4}
 800a9be:	6093      	str	r3, [r2, #8]
 800a9c0:	da08      	bge.n	800a9d4 <__sfputc_r+0x1e>
 800a9c2:	6994      	ldr	r4, [r2, #24]
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	db01      	blt.n	800a9cc <__sfputc_r+0x16>
 800a9c8:	290a      	cmp	r1, #10
 800a9ca:	d103      	bne.n	800a9d4 <__sfputc_r+0x1e>
 800a9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9d0:	f000 b932 	b.w	800ac38 <__swbuf_r>
 800a9d4:	6813      	ldr	r3, [r2, #0]
 800a9d6:	1c58      	adds	r0, r3, #1
 800a9d8:	6010      	str	r0, [r2, #0]
 800a9da:	7019      	strb	r1, [r3, #0]
 800a9dc:	4608      	mov	r0, r1
 800a9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <__sfputs_r>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	460f      	mov	r7, r1
 800a9ea:	4614      	mov	r4, r2
 800a9ec:	18d5      	adds	r5, r2, r3
 800a9ee:	42ac      	cmp	r4, r5
 800a9f0:	d101      	bne.n	800a9f6 <__sfputs_r+0x12>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e007      	b.n	800aa06 <__sfputs_r+0x22>
 800a9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fa:	463a      	mov	r2, r7
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7ff ffda 	bl	800a9b6 <__sfputc_r>
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	d1f3      	bne.n	800a9ee <__sfputs_r+0xa>
 800aa06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa08 <_vfiprintf_r>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	b09d      	sub	sp, #116	@ 0x74
 800aa10:	4614      	mov	r4, r2
 800aa12:	4698      	mov	r8, r3
 800aa14:	4606      	mov	r6, r0
 800aa16:	b118      	cbz	r0, 800aa20 <_vfiprintf_r+0x18>
 800aa18:	6a03      	ldr	r3, [r0, #32]
 800aa1a:	b90b      	cbnz	r3, 800aa20 <_vfiprintf_r+0x18>
 800aa1c:	f7fe f900 	bl	8008c20 <__sinit>
 800aa20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa22:	07d9      	lsls	r1, r3, #31
 800aa24:	d405      	bmi.n	800aa32 <_vfiprintf_r+0x2a>
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	059a      	lsls	r2, r3, #22
 800aa2a:	d402      	bmi.n	800aa32 <_vfiprintf_r+0x2a>
 800aa2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa2e:	f7fe fa10 	bl	8008e52 <__retarget_lock_acquire_recursive>
 800aa32:	89ab      	ldrh	r3, [r5, #12]
 800aa34:	071b      	lsls	r3, r3, #28
 800aa36:	d501      	bpl.n	800aa3c <_vfiprintf_r+0x34>
 800aa38:	692b      	ldr	r3, [r5, #16]
 800aa3a:	b99b      	cbnz	r3, 800aa64 <_vfiprintf_r+0x5c>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f000 f938 	bl	800acb4 <__swsetup_r>
 800aa44:	b170      	cbz	r0, 800aa64 <_vfiprintf_r+0x5c>
 800aa46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa48:	07dc      	lsls	r4, r3, #31
 800aa4a:	d504      	bpl.n	800aa56 <_vfiprintf_r+0x4e>
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	b01d      	add	sp, #116	@ 0x74
 800aa52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	0598      	lsls	r0, r3, #22
 800aa5a:	d4f7      	bmi.n	800aa4c <_vfiprintf_r+0x44>
 800aa5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa5e:	f7fe f9f9 	bl	8008e54 <__retarget_lock_release_recursive>
 800aa62:	e7f3      	b.n	800aa4c <_vfiprintf_r+0x44>
 800aa64:	2300      	movs	r3, #0
 800aa66:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa68:	2320      	movs	r3, #32
 800aa6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa72:	2330      	movs	r3, #48	@ 0x30
 800aa74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac24 <_vfiprintf_r+0x21c>
 800aa78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa7c:	f04f 0901 	mov.w	r9, #1
 800aa80:	4623      	mov	r3, r4
 800aa82:	469a      	mov	sl, r3
 800aa84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa88:	b10a      	cbz	r2, 800aa8e <_vfiprintf_r+0x86>
 800aa8a:	2a25      	cmp	r2, #37	@ 0x25
 800aa8c:	d1f9      	bne.n	800aa82 <_vfiprintf_r+0x7a>
 800aa8e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa92:	d00b      	beq.n	800aaac <_vfiprintf_r+0xa4>
 800aa94:	465b      	mov	r3, fp
 800aa96:	4622      	mov	r2, r4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7ff ffa2 	bl	800a9e4 <__sfputs_r>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	f000 80a7 	beq.w	800abf4 <_vfiprintf_r+0x1ec>
 800aaa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaa8:	445a      	add	r2, fp
 800aaaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800aaac:	f89a 3000 	ldrb.w	r3, [sl]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 809f 	beq.w	800abf4 <_vfiprintf_r+0x1ec>
 800aab6:	2300      	movs	r3, #0
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295
 800aabc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aac0:	f10a 0a01 	add.w	sl, sl, #1
 800aac4:	9304      	str	r3, [sp, #16]
 800aac6:	9307      	str	r3, [sp, #28]
 800aac8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aacc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aace:	4654      	mov	r4, sl
 800aad0:	2205      	movs	r2, #5
 800aad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad6:	4853      	ldr	r0, [pc, #332]	@ (800ac24 <_vfiprintf_r+0x21c>)
 800aad8:	f7f5 fb82 	bl	80001e0 <memchr>
 800aadc:	9a04      	ldr	r2, [sp, #16]
 800aade:	b9d8      	cbnz	r0, 800ab18 <_vfiprintf_r+0x110>
 800aae0:	06d1      	lsls	r1, r2, #27
 800aae2:	bf44      	itt	mi
 800aae4:	2320      	movmi	r3, #32
 800aae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaea:	0713      	lsls	r3, r2, #28
 800aaec:	bf44      	itt	mi
 800aaee:	232b      	movmi	r3, #43	@ 0x2b
 800aaf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaf4:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aafa:	d015      	beq.n	800ab28 <_vfiprintf_r+0x120>
 800aafc:	9a07      	ldr	r2, [sp, #28]
 800aafe:	4654      	mov	r4, sl
 800ab00:	2000      	movs	r0, #0
 800ab02:	f04f 0c0a 	mov.w	ip, #10
 800ab06:	4621      	mov	r1, r4
 800ab08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab0c:	3b30      	subs	r3, #48	@ 0x30
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d94b      	bls.n	800abaa <_vfiprintf_r+0x1a2>
 800ab12:	b1b0      	cbz	r0, 800ab42 <_vfiprintf_r+0x13a>
 800ab14:	9207      	str	r2, [sp, #28]
 800ab16:	e014      	b.n	800ab42 <_vfiprintf_r+0x13a>
 800ab18:	eba0 0308 	sub.w	r3, r0, r8
 800ab1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab20:	4313      	orrs	r3, r2
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	46a2      	mov	sl, r4
 800ab26:	e7d2      	b.n	800aace <_vfiprintf_r+0xc6>
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	1d19      	adds	r1, r3, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	9103      	str	r1, [sp, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	bfbb      	ittet	lt
 800ab34:	425b      	neglt	r3, r3
 800ab36:	f042 0202 	orrlt.w	r2, r2, #2
 800ab3a:	9307      	strge	r3, [sp, #28]
 800ab3c:	9307      	strlt	r3, [sp, #28]
 800ab3e:	bfb8      	it	lt
 800ab40:	9204      	strlt	r2, [sp, #16]
 800ab42:	7823      	ldrb	r3, [r4, #0]
 800ab44:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab46:	d10a      	bne.n	800ab5e <_vfiprintf_r+0x156>
 800ab48:	7863      	ldrb	r3, [r4, #1]
 800ab4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab4c:	d132      	bne.n	800abb4 <_vfiprintf_r+0x1ac>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	1d1a      	adds	r2, r3, #4
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	9203      	str	r2, [sp, #12]
 800ab56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab5a:	3402      	adds	r4, #2
 800ab5c:	9305      	str	r3, [sp, #20]
 800ab5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac34 <_vfiprintf_r+0x22c>
 800ab62:	7821      	ldrb	r1, [r4, #0]
 800ab64:	2203      	movs	r2, #3
 800ab66:	4650      	mov	r0, sl
 800ab68:	f7f5 fb3a 	bl	80001e0 <memchr>
 800ab6c:	b138      	cbz	r0, 800ab7e <_vfiprintf_r+0x176>
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	eba0 000a 	sub.w	r0, r0, sl
 800ab74:	2240      	movs	r2, #64	@ 0x40
 800ab76:	4082      	lsls	r2, r0
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	3401      	adds	r4, #1
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab82:	4829      	ldr	r0, [pc, #164]	@ (800ac28 <_vfiprintf_r+0x220>)
 800ab84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab88:	2206      	movs	r2, #6
 800ab8a:	f7f5 fb29 	bl	80001e0 <memchr>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d03f      	beq.n	800ac12 <_vfiprintf_r+0x20a>
 800ab92:	4b26      	ldr	r3, [pc, #152]	@ (800ac2c <_vfiprintf_r+0x224>)
 800ab94:	bb1b      	cbnz	r3, 800abde <_vfiprintf_r+0x1d6>
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	3307      	adds	r3, #7
 800ab9a:	f023 0307 	bic.w	r3, r3, #7
 800ab9e:	3308      	adds	r3, #8
 800aba0:	9303      	str	r3, [sp, #12]
 800aba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba4:	443b      	add	r3, r7
 800aba6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba8:	e76a      	b.n	800aa80 <_vfiprintf_r+0x78>
 800abaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800abae:	460c      	mov	r4, r1
 800abb0:	2001      	movs	r0, #1
 800abb2:	e7a8      	b.n	800ab06 <_vfiprintf_r+0xfe>
 800abb4:	2300      	movs	r3, #0
 800abb6:	3401      	adds	r4, #1
 800abb8:	9305      	str	r3, [sp, #20]
 800abba:	4619      	mov	r1, r3
 800abbc:	f04f 0c0a 	mov.w	ip, #10
 800abc0:	4620      	mov	r0, r4
 800abc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abc6:	3a30      	subs	r2, #48	@ 0x30
 800abc8:	2a09      	cmp	r2, #9
 800abca:	d903      	bls.n	800abd4 <_vfiprintf_r+0x1cc>
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0c6      	beq.n	800ab5e <_vfiprintf_r+0x156>
 800abd0:	9105      	str	r1, [sp, #20]
 800abd2:	e7c4      	b.n	800ab5e <_vfiprintf_r+0x156>
 800abd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800abd8:	4604      	mov	r4, r0
 800abda:	2301      	movs	r3, #1
 800abdc:	e7f0      	b.n	800abc0 <_vfiprintf_r+0x1b8>
 800abde:	ab03      	add	r3, sp, #12
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	462a      	mov	r2, r5
 800abe4:	4b12      	ldr	r3, [pc, #72]	@ (800ac30 <_vfiprintf_r+0x228>)
 800abe6:	a904      	add	r1, sp, #16
 800abe8:	4630      	mov	r0, r6
 800abea:	f7fd fbd7 	bl	800839c <_printf_float>
 800abee:	4607      	mov	r7, r0
 800abf0:	1c78      	adds	r0, r7, #1
 800abf2:	d1d6      	bne.n	800aba2 <_vfiprintf_r+0x19a>
 800abf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abf6:	07d9      	lsls	r1, r3, #31
 800abf8:	d405      	bmi.n	800ac06 <_vfiprintf_r+0x1fe>
 800abfa:	89ab      	ldrh	r3, [r5, #12]
 800abfc:	059a      	lsls	r2, r3, #22
 800abfe:	d402      	bmi.n	800ac06 <_vfiprintf_r+0x1fe>
 800ac00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac02:	f7fe f927 	bl	8008e54 <__retarget_lock_release_recursive>
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	065b      	lsls	r3, r3, #25
 800ac0a:	f53f af1f 	bmi.w	800aa4c <_vfiprintf_r+0x44>
 800ac0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac10:	e71e      	b.n	800aa50 <_vfiprintf_r+0x48>
 800ac12:	ab03      	add	r3, sp, #12
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	462a      	mov	r2, r5
 800ac18:	4b05      	ldr	r3, [pc, #20]	@ (800ac30 <_vfiprintf_r+0x228>)
 800ac1a:	a904      	add	r1, sp, #16
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7fd fe55 	bl	80088cc <_printf_i>
 800ac22:	e7e4      	b.n	800abee <_vfiprintf_r+0x1e6>
 800ac24:	0800bfa2 	.word	0x0800bfa2
 800ac28:	0800bfac 	.word	0x0800bfac
 800ac2c:	0800839d 	.word	0x0800839d
 800ac30:	0800a9e5 	.word	0x0800a9e5
 800ac34:	0800bfa8 	.word	0x0800bfa8

0800ac38 <__swbuf_r>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	460e      	mov	r6, r1
 800ac3c:	4614      	mov	r4, r2
 800ac3e:	4605      	mov	r5, r0
 800ac40:	b118      	cbz	r0, 800ac4a <__swbuf_r+0x12>
 800ac42:	6a03      	ldr	r3, [r0, #32]
 800ac44:	b90b      	cbnz	r3, 800ac4a <__swbuf_r+0x12>
 800ac46:	f7fd ffeb 	bl	8008c20 <__sinit>
 800ac4a:	69a3      	ldr	r3, [r4, #24]
 800ac4c:	60a3      	str	r3, [r4, #8]
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	071a      	lsls	r2, r3, #28
 800ac52:	d501      	bpl.n	800ac58 <__swbuf_r+0x20>
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	b943      	cbnz	r3, 800ac6a <__swbuf_r+0x32>
 800ac58:	4621      	mov	r1, r4
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f000 f82a 	bl	800acb4 <__swsetup_r>
 800ac60:	b118      	cbz	r0, 800ac6a <__swbuf_r+0x32>
 800ac62:	f04f 37ff 	mov.w	r7, #4294967295
 800ac66:	4638      	mov	r0, r7
 800ac68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	6922      	ldr	r2, [r4, #16]
 800ac6e:	1a98      	subs	r0, r3, r2
 800ac70:	6963      	ldr	r3, [r4, #20]
 800ac72:	b2f6      	uxtb	r6, r6
 800ac74:	4283      	cmp	r3, r0
 800ac76:	4637      	mov	r7, r6
 800ac78:	dc05      	bgt.n	800ac86 <__swbuf_r+0x4e>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f7ff fd99 	bl	800a7b4 <_fflush_r>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d1ed      	bne.n	800ac62 <__swbuf_r+0x2a>
 800ac86:	68a3      	ldr	r3, [r4, #8]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	60a3      	str	r3, [r4, #8]
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	1c5a      	adds	r2, r3, #1
 800ac90:	6022      	str	r2, [r4, #0]
 800ac92:	701e      	strb	r6, [r3, #0]
 800ac94:	6962      	ldr	r2, [r4, #20]
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d004      	beq.n	800aca6 <__swbuf_r+0x6e>
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	07db      	lsls	r3, r3, #31
 800aca0:	d5e1      	bpl.n	800ac66 <__swbuf_r+0x2e>
 800aca2:	2e0a      	cmp	r6, #10
 800aca4:	d1df      	bne.n	800ac66 <__swbuf_r+0x2e>
 800aca6:	4621      	mov	r1, r4
 800aca8:	4628      	mov	r0, r5
 800acaa:	f7ff fd83 	bl	800a7b4 <_fflush_r>
 800acae:	2800      	cmp	r0, #0
 800acb0:	d0d9      	beq.n	800ac66 <__swbuf_r+0x2e>
 800acb2:	e7d6      	b.n	800ac62 <__swbuf_r+0x2a>

0800acb4 <__swsetup_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4b29      	ldr	r3, [pc, #164]	@ (800ad5c <__swsetup_r+0xa8>)
 800acb8:	4605      	mov	r5, r0
 800acba:	6818      	ldr	r0, [r3, #0]
 800acbc:	460c      	mov	r4, r1
 800acbe:	b118      	cbz	r0, 800acc8 <__swsetup_r+0x14>
 800acc0:	6a03      	ldr	r3, [r0, #32]
 800acc2:	b90b      	cbnz	r3, 800acc8 <__swsetup_r+0x14>
 800acc4:	f7fd ffac 	bl	8008c20 <__sinit>
 800acc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800accc:	0719      	lsls	r1, r3, #28
 800acce:	d422      	bmi.n	800ad16 <__swsetup_r+0x62>
 800acd0:	06da      	lsls	r2, r3, #27
 800acd2:	d407      	bmi.n	800ace4 <__swsetup_r+0x30>
 800acd4:	2209      	movs	r2, #9
 800acd6:	602a      	str	r2, [r5, #0]
 800acd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	e033      	b.n	800ad4c <__swsetup_r+0x98>
 800ace4:	0758      	lsls	r0, r3, #29
 800ace6:	d512      	bpl.n	800ad0e <__swsetup_r+0x5a>
 800ace8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acea:	b141      	cbz	r1, 800acfe <__swsetup_r+0x4a>
 800acec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d002      	beq.n	800acfa <__swsetup_r+0x46>
 800acf4:	4628      	mov	r0, r5
 800acf6:	f7fe ff07 	bl	8009b08 <_free_r>
 800acfa:	2300      	movs	r3, #0
 800acfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	2300      	movs	r3, #0
 800ad08:	6063      	str	r3, [r4, #4]
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f043 0308 	orr.w	r3, r3, #8
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	b94b      	cbnz	r3, 800ad2e <__swsetup_r+0x7a>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad24:	d003      	beq.n	800ad2e <__swsetup_r+0x7a>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f883 	bl	800ae34 <__smakebuf_r>
 800ad2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad32:	f013 0201 	ands.w	r2, r3, #1
 800ad36:	d00a      	beq.n	800ad4e <__swsetup_r+0x9a>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	60a2      	str	r2, [r4, #8]
 800ad3c:	6962      	ldr	r2, [r4, #20]
 800ad3e:	4252      	negs	r2, r2
 800ad40:	61a2      	str	r2, [r4, #24]
 800ad42:	6922      	ldr	r2, [r4, #16]
 800ad44:	b942      	cbnz	r2, 800ad58 <__swsetup_r+0xa4>
 800ad46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad4a:	d1c5      	bne.n	800acd8 <__swsetup_r+0x24>
 800ad4c:	bd38      	pop	{r3, r4, r5, pc}
 800ad4e:	0799      	lsls	r1, r3, #30
 800ad50:	bf58      	it	pl
 800ad52:	6962      	ldrpl	r2, [r4, #20]
 800ad54:	60a2      	str	r2, [r4, #8]
 800ad56:	e7f4      	b.n	800ad42 <__swsetup_r+0x8e>
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e7f7      	b.n	800ad4c <__swsetup_r+0x98>
 800ad5c:	20000108 	.word	0x20000108

0800ad60 <_raise_r>:
 800ad60:	291f      	cmp	r1, #31
 800ad62:	b538      	push	{r3, r4, r5, lr}
 800ad64:	4605      	mov	r5, r0
 800ad66:	460c      	mov	r4, r1
 800ad68:	d904      	bls.n	800ad74 <_raise_r+0x14>
 800ad6a:	2316      	movs	r3, #22
 800ad6c:	6003      	str	r3, [r0, #0]
 800ad6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad76:	b112      	cbz	r2, 800ad7e <_raise_r+0x1e>
 800ad78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad7c:	b94b      	cbnz	r3, 800ad92 <_raise_r+0x32>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 f830 	bl	800ade4 <_getpid_r>
 800ad84:	4622      	mov	r2, r4
 800ad86:	4601      	mov	r1, r0
 800ad88:	4628      	mov	r0, r5
 800ad8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad8e:	f000 b817 	b.w	800adc0 <_kill_r>
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d00a      	beq.n	800adac <_raise_r+0x4c>
 800ad96:	1c59      	adds	r1, r3, #1
 800ad98:	d103      	bne.n	800ada2 <_raise_r+0x42>
 800ad9a:	2316      	movs	r3, #22
 800ad9c:	6003      	str	r3, [r0, #0]
 800ad9e:	2001      	movs	r0, #1
 800ada0:	e7e7      	b.n	800ad72 <_raise_r+0x12>
 800ada2:	2100      	movs	r1, #0
 800ada4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ada8:	4620      	mov	r0, r4
 800adaa:	4798      	blx	r3
 800adac:	2000      	movs	r0, #0
 800adae:	e7e0      	b.n	800ad72 <_raise_r+0x12>

0800adb0 <raise>:
 800adb0:	4b02      	ldr	r3, [pc, #8]	@ (800adbc <raise+0xc>)
 800adb2:	4601      	mov	r1, r0
 800adb4:	6818      	ldr	r0, [r3, #0]
 800adb6:	f7ff bfd3 	b.w	800ad60 <_raise_r>
 800adba:	bf00      	nop
 800adbc:	20000108 	.word	0x20000108

0800adc0 <_kill_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	@ (800ade0 <_kill_r+0x20>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	4611      	mov	r1, r2
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	f7f6 fb6d 	bl	80014ac <_kill>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d102      	bne.n	800addc <_kill_r+0x1c>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	b103      	cbz	r3, 800addc <_kill_r+0x1c>
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	bf00      	nop
 800ade0:	20003850 	.word	0x20003850

0800ade4 <_getpid_r>:
 800ade4:	f7f6 bb5a 	b.w	800149c <_getpid>

0800ade8 <__swhatbuf_r>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	460c      	mov	r4, r1
 800adec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf0:	2900      	cmp	r1, #0
 800adf2:	b096      	sub	sp, #88	@ 0x58
 800adf4:	4615      	mov	r5, r2
 800adf6:	461e      	mov	r6, r3
 800adf8:	da0d      	bge.n	800ae16 <__swhatbuf_r+0x2e>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae00:	f04f 0100 	mov.w	r1, #0
 800ae04:	bf14      	ite	ne
 800ae06:	2340      	movne	r3, #64	@ 0x40
 800ae08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	6031      	str	r1, [r6, #0]
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	b016      	add	sp, #88	@ 0x58
 800ae14:	bd70      	pop	{r4, r5, r6, pc}
 800ae16:	466a      	mov	r2, sp
 800ae18:	f000 f848 	bl	800aeac <_fstat_r>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	dbec      	blt.n	800adfa <__swhatbuf_r+0x12>
 800ae20:	9901      	ldr	r1, [sp, #4]
 800ae22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae2a:	4259      	negs	r1, r3
 800ae2c:	4159      	adcs	r1, r3
 800ae2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae32:	e7eb      	b.n	800ae0c <__swhatbuf_r+0x24>

0800ae34 <__smakebuf_r>:
 800ae34:	898b      	ldrh	r3, [r1, #12]
 800ae36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae38:	079d      	lsls	r5, r3, #30
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	d507      	bpl.n	800ae50 <__smakebuf_r+0x1c>
 800ae40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	6123      	str	r3, [r4, #16]
 800ae48:	2301      	movs	r3, #1
 800ae4a:	6163      	str	r3, [r4, #20]
 800ae4c:	b003      	add	sp, #12
 800ae4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae50:	ab01      	add	r3, sp, #4
 800ae52:	466a      	mov	r2, sp
 800ae54:	f7ff ffc8 	bl	800ade8 <__swhatbuf_r>
 800ae58:	9f00      	ldr	r7, [sp, #0]
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7fe fec6 	bl	8009bf0 <_malloc_r>
 800ae64:	b948      	cbnz	r0, 800ae7a <__smakebuf_r+0x46>
 800ae66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6a:	059a      	lsls	r2, r3, #22
 800ae6c:	d4ee      	bmi.n	800ae4c <__smakebuf_r+0x18>
 800ae6e:	f023 0303 	bic.w	r3, r3, #3
 800ae72:	f043 0302 	orr.w	r3, r3, #2
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	e7e2      	b.n	800ae40 <__smakebuf_r+0xc>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	6020      	str	r0, [r4, #0]
 800ae7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	9b01      	ldr	r3, [sp, #4]
 800ae86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae8a:	b15b      	cbz	r3, 800aea4 <__smakebuf_r+0x70>
 800ae8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae90:	4630      	mov	r0, r6
 800ae92:	f000 f81d 	bl	800aed0 <_isatty_r>
 800ae96:	b128      	cbz	r0, 800aea4 <__smakebuf_r+0x70>
 800ae98:	89a3      	ldrh	r3, [r4, #12]
 800ae9a:	f023 0303 	bic.w	r3, r3, #3
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	431d      	orrs	r5, r3
 800aea8:	81a5      	strh	r5, [r4, #12]
 800aeaa:	e7cf      	b.n	800ae4c <__smakebuf_r+0x18>

0800aeac <_fstat_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	@ (800aecc <_fstat_r+0x20>)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	602b      	str	r3, [r5, #0]
 800aeba:	f7f6 fb57 	bl	800156c <_fstat>
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	d102      	bne.n	800aec8 <_fstat_r+0x1c>
 800aec2:	682b      	ldr	r3, [r5, #0]
 800aec4:	b103      	cbz	r3, 800aec8 <_fstat_r+0x1c>
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	bd38      	pop	{r3, r4, r5, pc}
 800aeca:	bf00      	nop
 800aecc:	20003850 	.word	0x20003850

0800aed0 <_isatty_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d06      	ldr	r5, [pc, #24]	@ (800aeec <_isatty_r+0x1c>)
 800aed4:	2300      	movs	r3, #0
 800aed6:	4604      	mov	r4, r0
 800aed8:	4608      	mov	r0, r1
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f6 fb56 	bl	800158c <_isatty>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_isatty_r+0x1a>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_isatty_r+0x1a>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	20003850 	.word	0x20003850

0800aef0 <pow>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	ed2d 8b02 	vpush	{d8}
 800aef6:	eeb0 8a40 	vmov.f32	s16, s0
 800aefa:	eef0 8a60 	vmov.f32	s17, s1
 800aefe:	ec55 4b11 	vmov	r4, r5, d1
 800af02:	f000 f975 	bl	800b1f0 <__ieee754_pow>
 800af06:	4622      	mov	r2, r4
 800af08:	462b      	mov	r3, r5
 800af0a:	4620      	mov	r0, r4
 800af0c:	4629      	mov	r1, r5
 800af0e:	ec57 6b10 	vmov	r6, r7, d0
 800af12:	f7f5 fe13 	bl	8000b3c <__aeabi_dcmpun>
 800af16:	2800      	cmp	r0, #0
 800af18:	d13b      	bne.n	800af92 <pow+0xa2>
 800af1a:	ec51 0b18 	vmov	r0, r1, d8
 800af1e:	2200      	movs	r2, #0
 800af20:	2300      	movs	r3, #0
 800af22:	f7f5 fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 800af26:	b1b8      	cbz	r0, 800af58 <pow+0x68>
 800af28:	2200      	movs	r2, #0
 800af2a:	2300      	movs	r3, #0
 800af2c:	4620      	mov	r0, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	f7f5 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800af34:	2800      	cmp	r0, #0
 800af36:	d146      	bne.n	800afc6 <pow+0xd6>
 800af38:	ec45 4b10 	vmov	d0, r4, r5
 800af3c:	f000 f874 	bl	800b028 <finite>
 800af40:	b338      	cbz	r0, 800af92 <pow+0xa2>
 800af42:	2200      	movs	r2, #0
 800af44:	2300      	movs	r3, #0
 800af46:	4620      	mov	r0, r4
 800af48:	4629      	mov	r1, r5
 800af4a:	f7f5 fdcf 	bl	8000aec <__aeabi_dcmplt>
 800af4e:	b300      	cbz	r0, 800af92 <pow+0xa2>
 800af50:	f7fd ff54 	bl	8008dfc <__errno>
 800af54:	2322      	movs	r3, #34	@ 0x22
 800af56:	e01b      	b.n	800af90 <pow+0xa0>
 800af58:	ec47 6b10 	vmov	d0, r6, r7
 800af5c:	f000 f864 	bl	800b028 <finite>
 800af60:	b9e0      	cbnz	r0, 800af9c <pow+0xac>
 800af62:	eeb0 0a48 	vmov.f32	s0, s16
 800af66:	eef0 0a68 	vmov.f32	s1, s17
 800af6a:	f000 f85d 	bl	800b028 <finite>
 800af6e:	b1a8      	cbz	r0, 800af9c <pow+0xac>
 800af70:	ec45 4b10 	vmov	d0, r4, r5
 800af74:	f000 f858 	bl	800b028 <finite>
 800af78:	b180      	cbz	r0, 800af9c <pow+0xac>
 800af7a:	4632      	mov	r2, r6
 800af7c:	463b      	mov	r3, r7
 800af7e:	4630      	mov	r0, r6
 800af80:	4639      	mov	r1, r7
 800af82:	f7f5 fddb 	bl	8000b3c <__aeabi_dcmpun>
 800af86:	2800      	cmp	r0, #0
 800af88:	d0e2      	beq.n	800af50 <pow+0x60>
 800af8a:	f7fd ff37 	bl	8008dfc <__errno>
 800af8e:	2321      	movs	r3, #33	@ 0x21
 800af90:	6003      	str	r3, [r0, #0]
 800af92:	ecbd 8b02 	vpop	{d8}
 800af96:	ec47 6b10 	vmov	d0, r6, r7
 800af9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9c:	2200      	movs	r2, #0
 800af9e:	2300      	movs	r3, #0
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 fd98 	bl	8000ad8 <__aeabi_dcmpeq>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d0f2      	beq.n	800af92 <pow+0xa2>
 800afac:	eeb0 0a48 	vmov.f32	s0, s16
 800afb0:	eef0 0a68 	vmov.f32	s1, s17
 800afb4:	f000 f838 	bl	800b028 <finite>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d0ea      	beq.n	800af92 <pow+0xa2>
 800afbc:	ec45 4b10 	vmov	d0, r4, r5
 800afc0:	f000 f832 	bl	800b028 <finite>
 800afc4:	e7c3      	b.n	800af4e <pow+0x5e>
 800afc6:	4f01      	ldr	r7, [pc, #4]	@ (800afcc <pow+0xdc>)
 800afc8:	2600      	movs	r6, #0
 800afca:	e7e2      	b.n	800af92 <pow+0xa2>
 800afcc:	3ff00000 	.word	0x3ff00000

0800afd0 <sqrt>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	ed2d 8b02 	vpush	{d8}
 800afd6:	ec55 4b10 	vmov	r4, r5, d0
 800afda:	f000 f831 	bl	800b040 <__ieee754_sqrt>
 800afde:	4622      	mov	r2, r4
 800afe0:	462b      	mov	r3, r5
 800afe2:	4620      	mov	r0, r4
 800afe4:	4629      	mov	r1, r5
 800afe6:	eeb0 8a40 	vmov.f32	s16, s0
 800afea:	eef0 8a60 	vmov.f32	s17, s1
 800afee:	f7f5 fda5 	bl	8000b3c <__aeabi_dcmpun>
 800aff2:	b990      	cbnz	r0, 800b01a <sqrt+0x4a>
 800aff4:	2200      	movs	r2, #0
 800aff6:	2300      	movs	r3, #0
 800aff8:	4620      	mov	r0, r4
 800affa:	4629      	mov	r1, r5
 800affc:	f7f5 fd76 	bl	8000aec <__aeabi_dcmplt>
 800b000:	b158      	cbz	r0, 800b01a <sqrt+0x4a>
 800b002:	f7fd fefb 	bl	8008dfc <__errno>
 800b006:	2321      	movs	r3, #33	@ 0x21
 800b008:	6003      	str	r3, [r0, #0]
 800b00a:	2200      	movs	r2, #0
 800b00c:	2300      	movs	r3, #0
 800b00e:	4610      	mov	r0, r2
 800b010:	4619      	mov	r1, r3
 800b012:	f7f5 fc23 	bl	800085c <__aeabi_ddiv>
 800b016:	ec41 0b18 	vmov	d8, r0, r1
 800b01a:	eeb0 0a48 	vmov.f32	s0, s16
 800b01e:	eef0 0a68 	vmov.f32	s1, s17
 800b022:	ecbd 8b02 	vpop	{d8}
 800b026:	bd38      	pop	{r3, r4, r5, pc}

0800b028 <finite>:
 800b028:	b082      	sub	sp, #8
 800b02a:	ed8d 0b00 	vstr	d0, [sp]
 800b02e:	9801      	ldr	r0, [sp, #4]
 800b030:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b034:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b038:	0fc0      	lsrs	r0, r0, #31
 800b03a:	b002      	add	sp, #8
 800b03c:	4770      	bx	lr
	...

0800b040 <__ieee754_sqrt>:
 800b040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	4a66      	ldr	r2, [pc, #408]	@ (800b1e0 <__ieee754_sqrt+0x1a0>)
 800b046:	ec55 4b10 	vmov	r4, r5, d0
 800b04a:	43aa      	bics	r2, r5
 800b04c:	462b      	mov	r3, r5
 800b04e:	4621      	mov	r1, r4
 800b050:	d110      	bne.n	800b074 <__ieee754_sqrt+0x34>
 800b052:	4622      	mov	r2, r4
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 fad6 	bl	8000608 <__aeabi_dmul>
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	4620      	mov	r0, r4
 800b062:	4629      	mov	r1, r5
 800b064:	f7f5 f91a 	bl	800029c <__adddf3>
 800b068:	4604      	mov	r4, r0
 800b06a:	460d      	mov	r5, r1
 800b06c:	ec45 4b10 	vmov	d0, r4, r5
 800b070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b074:	2d00      	cmp	r5, #0
 800b076:	dc0e      	bgt.n	800b096 <__ieee754_sqrt+0x56>
 800b078:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b07c:	4322      	orrs	r2, r4
 800b07e:	d0f5      	beq.n	800b06c <__ieee754_sqrt+0x2c>
 800b080:	b19d      	cbz	r5, 800b0aa <__ieee754_sqrt+0x6a>
 800b082:	4622      	mov	r2, r4
 800b084:	4620      	mov	r0, r4
 800b086:	4629      	mov	r1, r5
 800b088:	f7f5 f906 	bl	8000298 <__aeabi_dsub>
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	f7f5 fbe4 	bl	800085c <__aeabi_ddiv>
 800b094:	e7e8      	b.n	800b068 <__ieee754_sqrt+0x28>
 800b096:	152a      	asrs	r2, r5, #20
 800b098:	d115      	bne.n	800b0c6 <__ieee754_sqrt+0x86>
 800b09a:	2000      	movs	r0, #0
 800b09c:	e009      	b.n	800b0b2 <__ieee754_sqrt+0x72>
 800b09e:	0acb      	lsrs	r3, r1, #11
 800b0a0:	3a15      	subs	r2, #21
 800b0a2:	0549      	lsls	r1, r1, #21
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0fa      	beq.n	800b09e <__ieee754_sqrt+0x5e>
 800b0a8:	e7f7      	b.n	800b09a <__ieee754_sqrt+0x5a>
 800b0aa:	462a      	mov	r2, r5
 800b0ac:	e7fa      	b.n	800b0a4 <__ieee754_sqrt+0x64>
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	02dc      	lsls	r4, r3, #11
 800b0b4:	d5fb      	bpl.n	800b0ae <__ieee754_sqrt+0x6e>
 800b0b6:	1e44      	subs	r4, r0, #1
 800b0b8:	1b12      	subs	r2, r2, r4
 800b0ba:	f1c0 0420 	rsb	r4, r0, #32
 800b0be:	fa21 f404 	lsr.w	r4, r1, r4
 800b0c2:	4323      	orrs	r3, r4
 800b0c4:	4081      	lsls	r1, r0
 800b0c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0ca:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b0ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0d2:	07d2      	lsls	r2, r2, #31
 800b0d4:	bf5c      	itt	pl
 800b0d6:	005b      	lslpl	r3, r3, #1
 800b0d8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b0dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0e0:	bf58      	it	pl
 800b0e2:	0049      	lslpl	r1, r1, #1
 800b0e4:	2600      	movs	r6, #0
 800b0e6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b0ea:	107f      	asrs	r7, r7, #1
 800b0ec:	0049      	lsls	r1, r1, #1
 800b0ee:	2016      	movs	r0, #22
 800b0f0:	4632      	mov	r2, r6
 800b0f2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b0f6:	1915      	adds	r5, r2, r4
 800b0f8:	429d      	cmp	r5, r3
 800b0fa:	bfde      	ittt	le
 800b0fc:	192a      	addle	r2, r5, r4
 800b0fe:	1b5b      	suble	r3, r3, r5
 800b100:	1936      	addle	r6, r6, r4
 800b102:	0fcd      	lsrs	r5, r1, #31
 800b104:	3801      	subs	r0, #1
 800b106:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b10a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b10e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b112:	d1f0      	bne.n	800b0f6 <__ieee754_sqrt+0xb6>
 800b114:	4605      	mov	r5, r0
 800b116:	2420      	movs	r4, #32
 800b118:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b11c:	4293      	cmp	r3, r2
 800b11e:	eb0c 0e00 	add.w	lr, ip, r0
 800b122:	dc02      	bgt.n	800b12a <__ieee754_sqrt+0xea>
 800b124:	d113      	bne.n	800b14e <__ieee754_sqrt+0x10e>
 800b126:	458e      	cmp	lr, r1
 800b128:	d811      	bhi.n	800b14e <__ieee754_sqrt+0x10e>
 800b12a:	f1be 0f00 	cmp.w	lr, #0
 800b12e:	eb0e 000c 	add.w	r0, lr, ip
 800b132:	da3f      	bge.n	800b1b4 <__ieee754_sqrt+0x174>
 800b134:	2800      	cmp	r0, #0
 800b136:	db3d      	blt.n	800b1b4 <__ieee754_sqrt+0x174>
 800b138:	f102 0801 	add.w	r8, r2, #1
 800b13c:	1a9b      	subs	r3, r3, r2
 800b13e:	458e      	cmp	lr, r1
 800b140:	bf88      	it	hi
 800b142:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b146:	eba1 010e 	sub.w	r1, r1, lr
 800b14a:	4465      	add	r5, ip
 800b14c:	4642      	mov	r2, r8
 800b14e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b152:	3c01      	subs	r4, #1
 800b154:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b158:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b15c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b160:	d1dc      	bne.n	800b11c <__ieee754_sqrt+0xdc>
 800b162:	4319      	orrs	r1, r3
 800b164:	d01b      	beq.n	800b19e <__ieee754_sqrt+0x15e>
 800b166:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800b1e4 <__ieee754_sqrt+0x1a4>
 800b16a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800b1e8 <__ieee754_sqrt+0x1a8>
 800b16e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b172:	e9db 2300 	ldrd	r2, r3, [fp]
 800b176:	f7f5 f88f 	bl	8000298 <__aeabi_dsub>
 800b17a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4640      	mov	r0, r8
 800b184:	4649      	mov	r1, r9
 800b186:	f7f5 fcbb 	bl	8000b00 <__aeabi_dcmple>
 800b18a:	b140      	cbz	r0, 800b19e <__ieee754_sqrt+0x15e>
 800b18c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b190:	e9da 0100 	ldrd	r0, r1, [sl]
 800b194:	e9db 2300 	ldrd	r2, r3, [fp]
 800b198:	d10e      	bne.n	800b1b8 <__ieee754_sqrt+0x178>
 800b19a:	3601      	adds	r6, #1
 800b19c:	4625      	mov	r5, r4
 800b19e:	1073      	asrs	r3, r6, #1
 800b1a0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800b1a4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800b1a8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800b1ac:	086b      	lsrs	r3, r5, #1
 800b1ae:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800b1b2:	e759      	b.n	800b068 <__ieee754_sqrt+0x28>
 800b1b4:	4690      	mov	r8, r2
 800b1b6:	e7c1      	b.n	800b13c <__ieee754_sqrt+0xfc>
 800b1b8:	f7f5 f870 	bl	800029c <__adddf3>
 800b1bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7f5 fc90 	bl	8000aec <__aeabi_dcmplt>
 800b1cc:	b120      	cbz	r0, 800b1d8 <__ieee754_sqrt+0x198>
 800b1ce:	1cab      	adds	r3, r5, #2
 800b1d0:	bf08      	it	eq
 800b1d2:	3601      	addeq	r6, #1
 800b1d4:	3502      	adds	r5, #2
 800b1d6:	e7e2      	b.n	800b19e <__ieee754_sqrt+0x15e>
 800b1d8:	1c6b      	adds	r3, r5, #1
 800b1da:	f023 0501 	bic.w	r5, r3, #1
 800b1de:	e7de      	b.n	800b19e <__ieee754_sqrt+0x15e>
 800b1e0:	7ff00000 	.word	0x7ff00000
 800b1e4:	0800c208 	.word	0x0800c208
 800b1e8:	0800c200 	.word	0x0800c200
 800b1ec:	00000000 	.word	0x00000000

0800b1f0 <__ieee754_pow>:
 800b1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	b091      	sub	sp, #68	@ 0x44
 800b1f6:	ed8d 1b00 	vstr	d1, [sp]
 800b1fa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b1fe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b202:	ea5a 0001 	orrs.w	r0, sl, r1
 800b206:	ec57 6b10 	vmov	r6, r7, d0
 800b20a:	d113      	bne.n	800b234 <__ieee754_pow+0x44>
 800b20c:	19b3      	adds	r3, r6, r6
 800b20e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b212:	4152      	adcs	r2, r2
 800b214:	4298      	cmp	r0, r3
 800b216:	4b9a      	ldr	r3, [pc, #616]	@ (800b480 <__ieee754_pow+0x290>)
 800b218:	4193      	sbcs	r3, r2
 800b21a:	f080 84ee 	bcs.w	800bbfa <__ieee754_pow+0xa0a>
 800b21e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b222:	4630      	mov	r0, r6
 800b224:	4639      	mov	r1, r7
 800b226:	f7f5 f839 	bl	800029c <__adddf3>
 800b22a:	ec41 0b10 	vmov	d0, r0, r1
 800b22e:	b011      	add	sp, #68	@ 0x44
 800b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b234:	4a93      	ldr	r2, [pc, #588]	@ (800b484 <__ieee754_pow+0x294>)
 800b236:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800b23a:	4295      	cmp	r5, r2
 800b23c:	46b8      	mov	r8, r7
 800b23e:	4633      	mov	r3, r6
 800b240:	d80a      	bhi.n	800b258 <__ieee754_pow+0x68>
 800b242:	d104      	bne.n	800b24e <__ieee754_pow+0x5e>
 800b244:	2e00      	cmp	r6, #0
 800b246:	d1ea      	bne.n	800b21e <__ieee754_pow+0x2e>
 800b248:	45aa      	cmp	sl, r5
 800b24a:	d8e8      	bhi.n	800b21e <__ieee754_pow+0x2e>
 800b24c:	e001      	b.n	800b252 <__ieee754_pow+0x62>
 800b24e:	4592      	cmp	sl, r2
 800b250:	d802      	bhi.n	800b258 <__ieee754_pow+0x68>
 800b252:	4592      	cmp	sl, r2
 800b254:	d10f      	bne.n	800b276 <__ieee754_pow+0x86>
 800b256:	b171      	cbz	r1, 800b276 <__ieee754_pow+0x86>
 800b258:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b25c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b260:	ea58 0803 	orrs.w	r8, r8, r3
 800b264:	d1db      	bne.n	800b21e <__ieee754_pow+0x2e>
 800b266:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b26a:	18db      	adds	r3, r3, r3
 800b26c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b270:	4152      	adcs	r2, r2
 800b272:	4598      	cmp	r8, r3
 800b274:	e7cf      	b.n	800b216 <__ieee754_pow+0x26>
 800b276:	f1b8 0f00 	cmp.w	r8, #0
 800b27a:	46ab      	mov	fp, r5
 800b27c:	da43      	bge.n	800b306 <__ieee754_pow+0x116>
 800b27e:	4a82      	ldr	r2, [pc, #520]	@ (800b488 <__ieee754_pow+0x298>)
 800b280:	4592      	cmp	sl, r2
 800b282:	d856      	bhi.n	800b332 <__ieee754_pow+0x142>
 800b284:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b288:	4592      	cmp	sl, r2
 800b28a:	f240 84c5 	bls.w	800bc18 <__ieee754_pow+0xa28>
 800b28e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b292:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b296:	2a14      	cmp	r2, #20
 800b298:	dd18      	ble.n	800b2cc <__ieee754_pow+0xdc>
 800b29a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b29e:	fa21 f402 	lsr.w	r4, r1, r2
 800b2a2:	fa04 f202 	lsl.w	r2, r4, r2
 800b2a6:	428a      	cmp	r2, r1
 800b2a8:	f040 84b6 	bne.w	800bc18 <__ieee754_pow+0xa28>
 800b2ac:	f004 0401 	and.w	r4, r4, #1
 800b2b0:	f1c4 0402 	rsb	r4, r4, #2
 800b2b4:	2900      	cmp	r1, #0
 800b2b6:	d159      	bne.n	800b36c <__ieee754_pow+0x17c>
 800b2b8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b2bc:	d148      	bne.n	800b350 <__ieee754_pow+0x160>
 800b2be:	4632      	mov	r2, r6
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 f99f 	bl	8000608 <__aeabi_dmul>
 800b2ca:	e7ae      	b.n	800b22a <__ieee754_pow+0x3a>
 800b2cc:	2900      	cmp	r1, #0
 800b2ce:	d14c      	bne.n	800b36a <__ieee754_pow+0x17a>
 800b2d0:	f1c2 0214 	rsb	r2, r2, #20
 800b2d4:	fa4a f402 	asr.w	r4, sl, r2
 800b2d8:	fa04 f202 	lsl.w	r2, r4, r2
 800b2dc:	4552      	cmp	r2, sl
 800b2de:	f040 8498 	bne.w	800bc12 <__ieee754_pow+0xa22>
 800b2e2:	f004 0401 	and.w	r4, r4, #1
 800b2e6:	f1c4 0402 	rsb	r4, r4, #2
 800b2ea:	4a68      	ldr	r2, [pc, #416]	@ (800b48c <__ieee754_pow+0x29c>)
 800b2ec:	4592      	cmp	sl, r2
 800b2ee:	d1e3      	bne.n	800b2b8 <__ieee754_pow+0xc8>
 800b2f0:	f1b9 0f00 	cmp.w	r9, #0
 800b2f4:	f280 8489 	bge.w	800bc0a <__ieee754_pow+0xa1a>
 800b2f8:	4964      	ldr	r1, [pc, #400]	@ (800b48c <__ieee754_pow+0x29c>)
 800b2fa:	4632      	mov	r2, r6
 800b2fc:	463b      	mov	r3, r7
 800b2fe:	2000      	movs	r0, #0
 800b300:	f7f5 faac 	bl	800085c <__aeabi_ddiv>
 800b304:	e791      	b.n	800b22a <__ieee754_pow+0x3a>
 800b306:	2400      	movs	r4, #0
 800b308:	bb81      	cbnz	r1, 800b36c <__ieee754_pow+0x17c>
 800b30a:	4a5e      	ldr	r2, [pc, #376]	@ (800b484 <__ieee754_pow+0x294>)
 800b30c:	4592      	cmp	sl, r2
 800b30e:	d1ec      	bne.n	800b2ea <__ieee754_pow+0xfa>
 800b310:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800b314:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b318:	431a      	orrs	r2, r3
 800b31a:	f000 846e 	beq.w	800bbfa <__ieee754_pow+0xa0a>
 800b31e:	4b5c      	ldr	r3, [pc, #368]	@ (800b490 <__ieee754_pow+0x2a0>)
 800b320:	429d      	cmp	r5, r3
 800b322:	d908      	bls.n	800b336 <__ieee754_pow+0x146>
 800b324:	f1b9 0f00 	cmp.w	r9, #0
 800b328:	f280 846b 	bge.w	800bc02 <__ieee754_pow+0xa12>
 800b32c:	2000      	movs	r0, #0
 800b32e:	2100      	movs	r1, #0
 800b330:	e77b      	b.n	800b22a <__ieee754_pow+0x3a>
 800b332:	2402      	movs	r4, #2
 800b334:	e7e8      	b.n	800b308 <__ieee754_pow+0x118>
 800b336:	f1b9 0f00 	cmp.w	r9, #0
 800b33a:	f04f 0000 	mov.w	r0, #0
 800b33e:	f04f 0100 	mov.w	r1, #0
 800b342:	f6bf af72 	bge.w	800b22a <__ieee754_pow+0x3a>
 800b346:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b34a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b34e:	e76c      	b.n	800b22a <__ieee754_pow+0x3a>
 800b350:	4a50      	ldr	r2, [pc, #320]	@ (800b494 <__ieee754_pow+0x2a4>)
 800b352:	4591      	cmp	r9, r2
 800b354:	d10a      	bne.n	800b36c <__ieee754_pow+0x17c>
 800b356:	f1b8 0f00 	cmp.w	r8, #0
 800b35a:	db07      	blt.n	800b36c <__ieee754_pow+0x17c>
 800b35c:	ec47 6b10 	vmov	d0, r6, r7
 800b360:	b011      	add	sp, #68	@ 0x44
 800b362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b366:	f7ff be6b 	b.w	800b040 <__ieee754_sqrt>
 800b36a:	2400      	movs	r4, #0
 800b36c:	ec47 6b10 	vmov	d0, r6, r7
 800b370:	9302      	str	r3, [sp, #8]
 800b372:	f000 fc87 	bl	800bc84 <fabs>
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	ec51 0b10 	vmov	r0, r1, d0
 800b37c:	bb43      	cbnz	r3, 800b3d0 <__ieee754_pow+0x1e0>
 800b37e:	4b43      	ldr	r3, [pc, #268]	@ (800b48c <__ieee754_pow+0x29c>)
 800b380:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800b384:	429a      	cmp	r2, r3
 800b386:	d000      	beq.n	800b38a <__ieee754_pow+0x19a>
 800b388:	bb15      	cbnz	r5, 800b3d0 <__ieee754_pow+0x1e0>
 800b38a:	f1b9 0f00 	cmp.w	r9, #0
 800b38e:	da05      	bge.n	800b39c <__ieee754_pow+0x1ac>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	2000      	movs	r0, #0
 800b396:	493d      	ldr	r1, [pc, #244]	@ (800b48c <__ieee754_pow+0x29c>)
 800b398:	f7f5 fa60 	bl	800085c <__aeabi_ddiv>
 800b39c:	f1b8 0f00 	cmp.w	r8, #0
 800b3a0:	f6bf af43 	bge.w	800b22a <__ieee754_pow+0x3a>
 800b3a4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b3a8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b3ac:	4325      	orrs	r5, r4
 800b3ae:	d108      	bne.n	800b3c2 <__ieee754_pow+0x1d2>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	f7f4 ff6e 	bl	8000298 <__aeabi_dsub>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	e79e      	b.n	800b300 <__ieee754_pow+0x110>
 800b3c2:	2c01      	cmp	r4, #1
 800b3c4:	f47f af31 	bne.w	800b22a <__ieee754_pow+0x3a>
 800b3c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	e72c      	b.n	800b22a <__ieee754_pow+0x3a>
 800b3d0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	ea53 0204 	orrs.w	r2, r3, r4
 800b3da:	d102      	bne.n	800b3e2 <__ieee754_pow+0x1f2>
 800b3dc:	4632      	mov	r2, r6
 800b3de:	463b      	mov	r3, r7
 800b3e0:	e7e8      	b.n	800b3b4 <__ieee754_pow+0x1c4>
 800b3e2:	3c01      	subs	r4, #1
 800b3e4:	431c      	orrs	r4, r3
 800b3e6:	d016      	beq.n	800b416 <__ieee754_pow+0x226>
 800b3e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b470 <__ieee754_pow+0x280>
 800b3ec:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b3f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3f4:	f240 8110 	bls.w	800b618 <__ieee754_pow+0x428>
 800b3f8:	4b27      	ldr	r3, [pc, #156]	@ (800b498 <__ieee754_pow+0x2a8>)
 800b3fa:	459a      	cmp	sl, r3
 800b3fc:	4b24      	ldr	r3, [pc, #144]	@ (800b490 <__ieee754_pow+0x2a0>)
 800b3fe:	d916      	bls.n	800b42e <__ieee754_pow+0x23e>
 800b400:	429d      	cmp	r5, r3
 800b402:	d80b      	bhi.n	800b41c <__ieee754_pow+0x22c>
 800b404:	f1b9 0f00 	cmp.w	r9, #0
 800b408:	da0b      	bge.n	800b422 <__ieee754_pow+0x232>
 800b40a:	2000      	movs	r0, #0
 800b40c:	b011      	add	sp, #68	@ 0x44
 800b40e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b412:	f000 bcf1 	b.w	800bdf8 <__math_oflow>
 800b416:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800b478 <__ieee754_pow+0x288>
 800b41a:	e7e7      	b.n	800b3ec <__ieee754_pow+0x1fc>
 800b41c:	f1b9 0f00 	cmp.w	r9, #0
 800b420:	dcf3      	bgt.n	800b40a <__ieee754_pow+0x21a>
 800b422:	2000      	movs	r0, #0
 800b424:	b011      	add	sp, #68	@ 0x44
 800b426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42a:	f000 bcdd 	b.w	800bde8 <__math_uflow>
 800b42e:	429d      	cmp	r5, r3
 800b430:	d20c      	bcs.n	800b44c <__ieee754_pow+0x25c>
 800b432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b436:	2200      	movs	r2, #0
 800b438:	2300      	movs	r3, #0
 800b43a:	f7f5 fb57 	bl	8000aec <__aeabi_dcmplt>
 800b43e:	3800      	subs	r0, #0
 800b440:	bf18      	it	ne
 800b442:	2001      	movne	r0, #1
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	daec      	bge.n	800b424 <__ieee754_pow+0x234>
 800b44a:	e7df      	b.n	800b40c <__ieee754_pow+0x21c>
 800b44c:	4b0f      	ldr	r3, [pc, #60]	@ (800b48c <__ieee754_pow+0x29c>)
 800b44e:	429d      	cmp	r5, r3
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	d922      	bls.n	800b49c <__ieee754_pow+0x2ac>
 800b456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b45a:	2300      	movs	r3, #0
 800b45c:	f7f5 fb46 	bl	8000aec <__aeabi_dcmplt>
 800b460:	3800      	subs	r0, #0
 800b462:	bf18      	it	ne
 800b464:	2001      	movne	r0, #1
 800b466:	f1b9 0f00 	cmp.w	r9, #0
 800b46a:	dccf      	bgt.n	800b40c <__ieee754_pow+0x21c>
 800b46c:	e7da      	b.n	800b424 <__ieee754_pow+0x234>
 800b46e:	bf00      	nop
 800b470:	00000000 	.word	0x00000000
 800b474:	3ff00000 	.word	0x3ff00000
 800b478:	00000000 	.word	0x00000000
 800b47c:	bff00000 	.word	0xbff00000
 800b480:	fff00000 	.word	0xfff00000
 800b484:	7ff00000 	.word	0x7ff00000
 800b488:	433fffff 	.word	0x433fffff
 800b48c:	3ff00000 	.word	0x3ff00000
 800b490:	3fefffff 	.word	0x3fefffff
 800b494:	3fe00000 	.word	0x3fe00000
 800b498:	43f00000 	.word	0x43f00000
 800b49c:	4b5a      	ldr	r3, [pc, #360]	@ (800b608 <__ieee754_pow+0x418>)
 800b49e:	f7f4 fefb 	bl	8000298 <__aeabi_dsub>
 800b4a2:	a351      	add	r3, pc, #324	@ (adr r3, 800b5e8 <__ieee754_pow+0x3f8>)
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	f7f5 f8ac 	bl	8000608 <__aeabi_dmul>
 800b4b0:	a34f      	add	r3, pc, #316	@ (adr r3, 800b5f0 <__ieee754_pow+0x400>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	460f      	mov	r7, r1
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f5 f8a3 	bl	8000608 <__aeabi_dmul>
 800b4c2:	4b52      	ldr	r3, [pc, #328]	@ (800b60c <__ieee754_pow+0x41c>)
 800b4c4:	4682      	mov	sl, r0
 800b4c6:	468b      	mov	fp, r1
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7f5 f89b 	bl	8000608 <__aeabi_dmul>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	a148      	add	r1, pc, #288	@ (adr r1, 800b5f8 <__ieee754_pow+0x408>)
 800b4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4dc:	f7f4 fedc 	bl	8000298 <__aeabi_dsub>
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	f7f5 f890 	bl	8000608 <__aeabi_dmul>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	4948      	ldr	r1, [pc, #288]	@ (800b610 <__ieee754_pow+0x420>)
 800b4f0:	f7f4 fed2 	bl	8000298 <__aeabi_dsub>
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	4689      	mov	r9, r1
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f5 f882 	bl	8000608 <__aeabi_dmul>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4640      	mov	r0, r8
 800b50a:	4649      	mov	r1, r9
 800b50c:	f7f5 f87c 	bl	8000608 <__aeabi_dmul>
 800b510:	a33b      	add	r3, pc, #236	@ (adr r3, 800b600 <__ieee754_pow+0x410>)
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	f7f5 f877 	bl	8000608 <__aeabi_dmul>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	4650      	mov	r0, sl
 800b520:	4659      	mov	r1, fp
 800b522:	f7f4 feb9 	bl	8000298 <__aeabi_dsub>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4680      	mov	r8, r0
 800b52c:	4689      	mov	r9, r1
 800b52e:	4630      	mov	r0, r6
 800b530:	4639      	mov	r1, r7
 800b532:	f7f4 feb3 	bl	800029c <__adddf3>
 800b536:	2400      	movs	r4, #0
 800b538:	4632      	mov	r2, r6
 800b53a:	463b      	mov	r3, r7
 800b53c:	4620      	mov	r0, r4
 800b53e:	460d      	mov	r5, r1
 800b540:	f7f4 feaa 	bl	8000298 <__aeabi_dsub>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	4640      	mov	r0, r8
 800b54a:	4649      	mov	r1, r9
 800b54c:	f7f4 fea4 	bl	8000298 <__aeabi_dsub>
 800b550:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b554:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b558:	2300      	movs	r3, #0
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b560:	4606      	mov	r6, r0
 800b562:	460f      	mov	r7, r1
 800b564:	465b      	mov	r3, fp
 800b566:	4652      	mov	r2, sl
 800b568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b56c:	f7f4 fe94 	bl	8000298 <__aeabi_dsub>
 800b570:	4622      	mov	r2, r4
 800b572:	462b      	mov	r3, r5
 800b574:	f7f5 f848 	bl	8000608 <__aeabi_dmul>
 800b578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b57c:	4680      	mov	r8, r0
 800b57e:	4689      	mov	r9, r1
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 f840 	bl	8000608 <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4640      	mov	r0, r8
 800b58e:	4649      	mov	r1, r9
 800b590:	f7f4 fe84 	bl	800029c <__adddf3>
 800b594:	465b      	mov	r3, fp
 800b596:	4606      	mov	r6, r0
 800b598:	460f      	mov	r7, r1
 800b59a:	4652      	mov	r2, sl
 800b59c:	4620      	mov	r0, r4
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f7f5 f832 	bl	8000608 <__aeabi_dmul>
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	4680      	mov	r8, r0
 800b5aa:	4689      	mov	r9, r1
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	f7f4 fe74 	bl	800029c <__adddf3>
 800b5b4:	4b17      	ldr	r3, [pc, #92]	@ (800b614 <__ieee754_pow+0x424>)
 800b5b6:	4299      	cmp	r1, r3
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	460d      	mov	r5, r1
 800b5bc:	468b      	mov	fp, r1
 800b5be:	f340 820b 	ble.w	800b9d8 <__ieee754_pow+0x7e8>
 800b5c2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b5c6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b5ca:	4303      	orrs	r3, r0
 800b5cc:	f000 81ea 	beq.w	800b9a4 <__ieee754_pow+0x7b4>
 800b5d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f7f5 fa88 	bl	8000aec <__aeabi_dcmplt>
 800b5dc:	3800      	subs	r0, #0
 800b5de:	bf18      	it	ne
 800b5e0:	2001      	movne	r0, #1
 800b5e2:	e713      	b.n	800b40c <__ieee754_pow+0x21c>
 800b5e4:	f3af 8000 	nop.w
 800b5e8:	60000000 	.word	0x60000000
 800b5ec:	3ff71547 	.word	0x3ff71547
 800b5f0:	f85ddf44 	.word	0xf85ddf44
 800b5f4:	3e54ae0b 	.word	0x3e54ae0b
 800b5f8:	55555555 	.word	0x55555555
 800b5fc:	3fd55555 	.word	0x3fd55555
 800b600:	652b82fe 	.word	0x652b82fe
 800b604:	3ff71547 	.word	0x3ff71547
 800b608:	3ff00000 	.word	0x3ff00000
 800b60c:	3fd00000 	.word	0x3fd00000
 800b610:	3fe00000 	.word	0x3fe00000
 800b614:	408fffff 	.word	0x408fffff
 800b618:	4bd5      	ldr	r3, [pc, #852]	@ (800b970 <__ieee754_pow+0x780>)
 800b61a:	ea08 0303 	and.w	r3, r8, r3
 800b61e:	2200      	movs	r2, #0
 800b620:	b92b      	cbnz	r3, 800b62e <__ieee754_pow+0x43e>
 800b622:	4bd4      	ldr	r3, [pc, #848]	@ (800b974 <__ieee754_pow+0x784>)
 800b624:	f7f4 fff0 	bl	8000608 <__aeabi_dmul>
 800b628:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b62c:	468b      	mov	fp, r1
 800b62e:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b632:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b636:	4413      	add	r3, r2
 800b638:	930a      	str	r3, [sp, #40]	@ 0x28
 800b63a:	4bcf      	ldr	r3, [pc, #828]	@ (800b978 <__ieee754_pow+0x788>)
 800b63c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b640:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b644:	459b      	cmp	fp, r3
 800b646:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b64a:	dd08      	ble.n	800b65e <__ieee754_pow+0x46e>
 800b64c:	4bcb      	ldr	r3, [pc, #812]	@ (800b97c <__ieee754_pow+0x78c>)
 800b64e:	459b      	cmp	fp, r3
 800b650:	f340 81a5 	ble.w	800b99e <__ieee754_pow+0x7ae>
 800b654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b656:	3301      	adds	r3, #1
 800b658:	930a      	str	r3, [sp, #40]	@ 0x28
 800b65a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b65e:	f04f 0a00 	mov.w	sl, #0
 800b662:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b666:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b668:	4bc5      	ldr	r3, [pc, #788]	@ (800b980 <__ieee754_pow+0x790>)
 800b66a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b66e:	ed93 7b00 	vldr	d7, [r3]
 800b672:	4629      	mov	r1, r5
 800b674:	ec53 2b17 	vmov	r2, r3, d7
 800b678:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b67c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b680:	f7f4 fe0a 	bl	8000298 <__aeabi_dsub>
 800b684:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b688:	4606      	mov	r6, r0
 800b68a:	460f      	mov	r7, r1
 800b68c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b690:	f7f4 fe04 	bl	800029c <__adddf3>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	2000      	movs	r0, #0
 800b69a:	49ba      	ldr	r1, [pc, #744]	@ (800b984 <__ieee754_pow+0x794>)
 800b69c:	f7f5 f8de 	bl	800085c <__aeabi_ddiv>
 800b6a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f7f4 ffac 	bl	8000608 <__aeabi_dmul>
 800b6b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6b4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b6b8:	106d      	asrs	r5, r5, #1
 800b6ba:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b6be:	f04f 0b00 	mov.w	fp, #0
 800b6c2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b6c6:	4661      	mov	r1, ip
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b6ce:	4658      	mov	r0, fp
 800b6d0:	46e1      	mov	r9, ip
 800b6d2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	461d      	mov	r5, r3
 800b6da:	f7f4 ff95 	bl	8000608 <__aeabi_dmul>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 fdd7 	bl	8000298 <__aeabi_dsub>
 800b6ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	f7f4 fdcf 	bl	8000298 <__aeabi_dsub>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b702:	f7f4 fdc9 	bl	8000298 <__aeabi_dsub>
 800b706:	465a      	mov	r2, fp
 800b708:	464b      	mov	r3, r9
 800b70a:	f7f4 ff7d 	bl	8000608 <__aeabi_dmul>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4630      	mov	r0, r6
 800b714:	4639      	mov	r1, r7
 800b716:	f7f4 fdbf 	bl	8000298 <__aeabi_dsub>
 800b71a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b71e:	f7f4 ff73 	bl	8000608 <__aeabi_dmul>
 800b722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b72a:	4610      	mov	r0, r2
 800b72c:	4619      	mov	r1, r3
 800b72e:	f7f4 ff6b 	bl	8000608 <__aeabi_dmul>
 800b732:	a37d      	add	r3, pc, #500	@ (adr r3, 800b928 <__ieee754_pow+0x738>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	4604      	mov	r4, r0
 800b73a:	460d      	mov	r5, r1
 800b73c:	f7f4 ff64 	bl	8000608 <__aeabi_dmul>
 800b740:	a37b      	add	r3, pc, #492	@ (adr r3, 800b930 <__ieee754_pow+0x740>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f7f4 fda9 	bl	800029c <__adddf3>
 800b74a:	4622      	mov	r2, r4
 800b74c:	462b      	mov	r3, r5
 800b74e:	f7f4 ff5b 	bl	8000608 <__aeabi_dmul>
 800b752:	a379      	add	r3, pc, #484	@ (adr r3, 800b938 <__ieee754_pow+0x748>)
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f7f4 fda0 	bl	800029c <__adddf3>
 800b75c:	4622      	mov	r2, r4
 800b75e:	462b      	mov	r3, r5
 800b760:	f7f4 ff52 	bl	8000608 <__aeabi_dmul>
 800b764:	a376      	add	r3, pc, #472	@ (adr r3, 800b940 <__ieee754_pow+0x750>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fd97 	bl	800029c <__adddf3>
 800b76e:	4622      	mov	r2, r4
 800b770:	462b      	mov	r3, r5
 800b772:	f7f4 ff49 	bl	8000608 <__aeabi_dmul>
 800b776:	a374      	add	r3, pc, #464	@ (adr r3, 800b948 <__ieee754_pow+0x758>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f7f4 fd8e 	bl	800029c <__adddf3>
 800b780:	4622      	mov	r2, r4
 800b782:	462b      	mov	r3, r5
 800b784:	f7f4 ff40 	bl	8000608 <__aeabi_dmul>
 800b788:	a371      	add	r3, pc, #452	@ (adr r3, 800b950 <__ieee754_pow+0x760>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f4 fd85 	bl	800029c <__adddf3>
 800b792:	4622      	mov	r2, r4
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	462b      	mov	r3, r5
 800b79a:	4620      	mov	r0, r4
 800b79c:	4629      	mov	r1, r5
 800b79e:	f7f4 ff33 	bl	8000608 <__aeabi_dmul>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	f7f4 ff2d 	bl	8000608 <__aeabi_dmul>
 800b7ae:	465a      	mov	r2, fp
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	464b      	mov	r3, r9
 800b7b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ba:	f7f4 fd6f 	bl	800029c <__adddf3>
 800b7be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7c2:	f7f4 ff21 	bl	8000608 <__aeabi_dmul>
 800b7c6:	4622      	mov	r2, r4
 800b7c8:	462b      	mov	r3, r5
 800b7ca:	f7f4 fd67 	bl	800029c <__adddf3>
 800b7ce:	465a      	mov	r2, fp
 800b7d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	4658      	mov	r0, fp
 800b7d8:	4649      	mov	r1, r9
 800b7da:	f7f4 ff15 	bl	8000608 <__aeabi_dmul>
 800b7de:	4b6a      	ldr	r3, [pc, #424]	@ (800b988 <__ieee754_pow+0x798>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	f7f4 fd59 	bl	800029c <__adddf3>
 800b7ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7ee:	f7f4 fd55 	bl	800029c <__adddf3>
 800b7f2:	46d8      	mov	r8, fp
 800b7f4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	465a      	mov	r2, fp
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4640      	mov	r0, r8
 800b800:	4649      	mov	r1, r9
 800b802:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b806:	f7f4 feff 	bl	8000608 <__aeabi_dmul>
 800b80a:	465c      	mov	r4, fp
 800b80c:	4680      	mov	r8, r0
 800b80e:	4689      	mov	r9, r1
 800b810:	4b5d      	ldr	r3, [pc, #372]	@ (800b988 <__ieee754_pow+0x798>)
 800b812:	2200      	movs	r2, #0
 800b814:	4620      	mov	r0, r4
 800b816:	4629      	mov	r1, r5
 800b818:	f7f4 fd3e 	bl	8000298 <__aeabi_dsub>
 800b81c:	4632      	mov	r2, r6
 800b81e:	463b      	mov	r3, r7
 800b820:	f7f4 fd3a 	bl	8000298 <__aeabi_dsub>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b82c:	f7f4 fd34 	bl	8000298 <__aeabi_dsub>
 800b830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b834:	f7f4 fee8 	bl	8000608 <__aeabi_dmul>
 800b838:	4622      	mov	r2, r4
 800b83a:	4606      	mov	r6, r0
 800b83c:	460f      	mov	r7, r1
 800b83e:	462b      	mov	r3, r5
 800b840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b844:	f7f4 fee0 	bl	8000608 <__aeabi_dmul>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4630      	mov	r0, r6
 800b84e:	4639      	mov	r1, r7
 800b850:	f7f4 fd24 	bl	800029c <__adddf3>
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4640      	mov	r0, r8
 800b85e:	4649      	mov	r1, r9
 800b860:	f7f4 fd1c 	bl	800029c <__adddf3>
 800b864:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b868:	a33b      	add	r3, pc, #236	@ (adr r3, 800b958 <__ieee754_pow+0x768>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	4658      	mov	r0, fp
 800b870:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b874:	460d      	mov	r5, r1
 800b876:	f7f4 fec7 	bl	8000608 <__aeabi_dmul>
 800b87a:	465c      	mov	r4, fp
 800b87c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b880:	4642      	mov	r2, r8
 800b882:	464b      	mov	r3, r9
 800b884:	4620      	mov	r0, r4
 800b886:	4629      	mov	r1, r5
 800b888:	f7f4 fd06 	bl	8000298 <__aeabi_dsub>
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	4630      	mov	r0, r6
 800b892:	4639      	mov	r1, r7
 800b894:	f7f4 fd00 	bl	8000298 <__aeabi_dsub>
 800b898:	a331      	add	r3, pc, #196	@ (adr r3, 800b960 <__ieee754_pow+0x770>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f7f4 feb3 	bl	8000608 <__aeabi_dmul>
 800b8a2:	a331      	add	r3, pc, #196	@ (adr r3, 800b968 <__ieee754_pow+0x778>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	460f      	mov	r7, r1
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	f7f4 feaa 	bl	8000608 <__aeabi_dmul>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f7f4 fcee 	bl	800029c <__adddf3>
 800b8c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8c2:	4b32      	ldr	r3, [pc, #200]	@ (800b98c <__ieee754_pow+0x79c>)
 800b8c4:	4413      	add	r3, r2
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f7f4 fce7 	bl	800029c <__adddf3>
 800b8ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8d4:	f7f4 fe2e 	bl	8000534 <__aeabi_i2d>
 800b8d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8da:	4b2d      	ldr	r3, [pc, #180]	@ (800b990 <__ieee754_pow+0x7a0>)
 800b8dc:	4413      	add	r3, r2
 800b8de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8ee:	f7f4 fcd5 	bl	800029c <__adddf3>
 800b8f2:	4642      	mov	r2, r8
 800b8f4:	464b      	mov	r3, r9
 800b8f6:	f7f4 fcd1 	bl	800029c <__adddf3>
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	463b      	mov	r3, r7
 800b8fe:	f7f4 fccd 	bl	800029c <__adddf3>
 800b902:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b906:	4632      	mov	r2, r6
 800b908:	463b      	mov	r3, r7
 800b90a:	4658      	mov	r0, fp
 800b90c:	460d      	mov	r5, r1
 800b90e:	f7f4 fcc3 	bl	8000298 <__aeabi_dsub>
 800b912:	4642      	mov	r2, r8
 800b914:	464b      	mov	r3, r9
 800b916:	f7f4 fcbf 	bl	8000298 <__aeabi_dsub>
 800b91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b91e:	f7f4 fcbb 	bl	8000298 <__aeabi_dsub>
 800b922:	465c      	mov	r4, fp
 800b924:	e036      	b.n	800b994 <__ieee754_pow+0x7a4>
 800b926:	bf00      	nop
 800b928:	4a454eef 	.word	0x4a454eef
 800b92c:	3fca7e28 	.word	0x3fca7e28
 800b930:	93c9db65 	.word	0x93c9db65
 800b934:	3fcd864a 	.word	0x3fcd864a
 800b938:	a91d4101 	.word	0xa91d4101
 800b93c:	3fd17460 	.word	0x3fd17460
 800b940:	518f264d 	.word	0x518f264d
 800b944:	3fd55555 	.word	0x3fd55555
 800b948:	db6fabff 	.word	0xdb6fabff
 800b94c:	3fdb6db6 	.word	0x3fdb6db6
 800b950:	33333303 	.word	0x33333303
 800b954:	3fe33333 	.word	0x3fe33333
 800b958:	e0000000 	.word	0xe0000000
 800b95c:	3feec709 	.word	0x3feec709
 800b960:	dc3a03fd 	.word	0xdc3a03fd
 800b964:	3feec709 	.word	0x3feec709
 800b968:	145b01f5 	.word	0x145b01f5
 800b96c:	be3e2fe0 	.word	0xbe3e2fe0
 800b970:	7ff00000 	.word	0x7ff00000
 800b974:	43400000 	.word	0x43400000
 800b978:	0003988e 	.word	0x0003988e
 800b97c:	000bb679 	.word	0x000bb679
 800b980:	0800c230 	.word	0x0800c230
 800b984:	3ff00000 	.word	0x3ff00000
 800b988:	40080000 	.word	0x40080000
 800b98c:	0800c210 	.word	0x0800c210
 800b990:	0800c220 	.word	0x0800c220
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b99c:	e5d6      	b.n	800b54c <__ieee754_pow+0x35c>
 800b99e:	f04f 0a01 	mov.w	sl, #1
 800b9a2:	e65e      	b.n	800b662 <__ieee754_pow+0x472>
 800b9a4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800bc7c <__ieee754_pow+0xa8c>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	f7f4 fc75 	bl	800029c <__adddf3>
 800b9b2:	4642      	mov	r2, r8
 800b9b4:	e9cd 0100 	strd	r0, r1, [sp]
 800b9b8:	464b      	mov	r3, r9
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	4629      	mov	r1, r5
 800b9be:	f7f4 fc6b 	bl	8000298 <__aeabi_dsub>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9ca:	f7f5 f8ad 	bl	8000b28 <__aeabi_dcmpgt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	f47f adfe 	bne.w	800b5d0 <__ieee754_pow+0x3e0>
 800b9d4:	4ba2      	ldr	r3, [pc, #648]	@ (800bc60 <__ieee754_pow+0xa70>)
 800b9d6:	e022      	b.n	800ba1e <__ieee754_pow+0x82e>
 800b9d8:	4ca2      	ldr	r4, [pc, #648]	@ (800bc64 <__ieee754_pow+0xa74>)
 800b9da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b9de:	42a3      	cmp	r3, r4
 800b9e0:	d919      	bls.n	800ba16 <__ieee754_pow+0x826>
 800b9e2:	4ba1      	ldr	r3, [pc, #644]	@ (800bc68 <__ieee754_pow+0xa78>)
 800b9e4:	440b      	add	r3, r1
 800b9e6:	4303      	orrs	r3, r0
 800b9e8:	d009      	beq.n	800b9fe <__ieee754_pow+0x80e>
 800b9ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f7f5 f87b 	bl	8000aec <__aeabi_dcmplt>
 800b9f6:	3800      	subs	r0, #0
 800b9f8:	bf18      	it	ne
 800b9fa:	2001      	movne	r0, #1
 800b9fc:	e512      	b.n	800b424 <__ieee754_pow+0x234>
 800b9fe:	4642      	mov	r2, r8
 800ba00:	464b      	mov	r3, r9
 800ba02:	f7f4 fc49 	bl	8000298 <__aeabi_dsub>
 800ba06:	4632      	mov	r2, r6
 800ba08:	463b      	mov	r3, r7
 800ba0a:	f7f5 f883 	bl	8000b14 <__aeabi_dcmpge>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d1eb      	bne.n	800b9ea <__ieee754_pow+0x7fa>
 800ba12:	4b96      	ldr	r3, [pc, #600]	@ (800bc6c <__ieee754_pow+0xa7c>)
 800ba14:	e003      	b.n	800ba1e <__ieee754_pow+0x82e>
 800ba16:	4a96      	ldr	r2, [pc, #600]	@ (800bc70 <__ieee754_pow+0xa80>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	f240 80e7 	bls.w	800bbec <__ieee754_pow+0x9fc>
 800ba1e:	151b      	asrs	r3, r3, #20
 800ba20:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800ba24:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800ba28:	fa4a fa03 	asr.w	sl, sl, r3
 800ba2c:	44da      	add	sl, fp
 800ba2e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ba32:	4890      	ldr	r0, [pc, #576]	@ (800bc74 <__ieee754_pow+0xa84>)
 800ba34:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ba38:	4108      	asrs	r0, r1
 800ba3a:	ea00 030a 	and.w	r3, r0, sl
 800ba3e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ba42:	f1c1 0114 	rsb	r1, r1, #20
 800ba46:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ba4a:	fa4a fa01 	asr.w	sl, sl, r1
 800ba4e:	f1bb 0f00 	cmp.w	fp, #0
 800ba52:	4640      	mov	r0, r8
 800ba54:	4649      	mov	r1, r9
 800ba56:	f04f 0200 	mov.w	r2, #0
 800ba5a:	bfb8      	it	lt
 800ba5c:	f1ca 0a00 	rsblt	sl, sl, #0
 800ba60:	f7f4 fc1a 	bl	8000298 <__aeabi_dsub>
 800ba64:	4680      	mov	r8, r0
 800ba66:	4689      	mov	r9, r1
 800ba68:	4632      	mov	r2, r6
 800ba6a:	463b      	mov	r3, r7
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	4649      	mov	r1, r9
 800ba70:	f7f4 fc14 	bl	800029c <__adddf3>
 800ba74:	2400      	movs	r4, #0
 800ba76:	a36a      	add	r3, pc, #424	@ (adr r3, 800bc20 <__ieee754_pow+0xa30>)
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	460d      	mov	r5, r1
 800ba80:	f7f4 fdc2 	bl	8000608 <__aeabi_dmul>
 800ba84:	4642      	mov	r2, r8
 800ba86:	e9cd 0100 	strd	r0, r1, [sp]
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f7f4 fc02 	bl	8000298 <__aeabi_dsub>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f7f4 fbfc 	bl	8000298 <__aeabi_dsub>
 800baa0:	a361      	add	r3, pc, #388	@ (adr r3, 800bc28 <__ieee754_pow+0xa38>)
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	f7f4 fdaf 	bl	8000608 <__aeabi_dmul>
 800baaa:	a361      	add	r3, pc, #388	@ (adr r3, 800bc30 <__ieee754_pow+0xa40>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	4680      	mov	r8, r0
 800bab2:	4689      	mov	r9, r1
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f4 fda6 	bl	8000608 <__aeabi_dmul>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	4640      	mov	r0, r8
 800bac2:	4649      	mov	r1, r9
 800bac4:	f7f4 fbea 	bl	800029c <__adddf3>
 800bac8:	4604      	mov	r4, r0
 800baca:	460d      	mov	r5, r1
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bad4:	f7f4 fbe2 	bl	800029c <__adddf3>
 800bad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800badc:	4680      	mov	r8, r0
 800bade:	4689      	mov	r9, r1
 800bae0:	f7f4 fbda 	bl	8000298 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4620      	mov	r0, r4
 800baea:	4629      	mov	r1, r5
 800baec:	f7f4 fbd4 	bl	8000298 <__aeabi_dsub>
 800baf0:	4642      	mov	r2, r8
 800baf2:	4606      	mov	r6, r0
 800baf4:	460f      	mov	r7, r1
 800baf6:	464b      	mov	r3, r9
 800baf8:	4640      	mov	r0, r8
 800bafa:	4649      	mov	r1, r9
 800bafc:	f7f4 fd84 	bl	8000608 <__aeabi_dmul>
 800bb00:	a34d      	add	r3, pc, #308	@ (adr r3, 800bc38 <__ieee754_pow+0xa48>)
 800bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb06:	4604      	mov	r4, r0
 800bb08:	460d      	mov	r5, r1
 800bb0a:	f7f4 fd7d 	bl	8000608 <__aeabi_dmul>
 800bb0e:	a34c      	add	r3, pc, #304	@ (adr r3, 800bc40 <__ieee754_pow+0xa50>)
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f7f4 fbc0 	bl	8000298 <__aeabi_dsub>
 800bb18:	4622      	mov	r2, r4
 800bb1a:	462b      	mov	r3, r5
 800bb1c:	f7f4 fd74 	bl	8000608 <__aeabi_dmul>
 800bb20:	a349      	add	r3, pc, #292	@ (adr r3, 800bc48 <__ieee754_pow+0xa58>)
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	f7f4 fbb9 	bl	800029c <__adddf3>
 800bb2a:	4622      	mov	r2, r4
 800bb2c:	462b      	mov	r3, r5
 800bb2e:	f7f4 fd6b 	bl	8000608 <__aeabi_dmul>
 800bb32:	a347      	add	r3, pc, #284	@ (adr r3, 800bc50 <__ieee754_pow+0xa60>)
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	f7f4 fbae 	bl	8000298 <__aeabi_dsub>
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	462b      	mov	r3, r5
 800bb40:	f7f4 fd62 	bl	8000608 <__aeabi_dmul>
 800bb44:	a344      	add	r3, pc, #272	@ (adr r3, 800bc58 <__ieee754_pow+0xa68>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fba7 	bl	800029c <__adddf3>
 800bb4e:	4622      	mov	r2, r4
 800bb50:	462b      	mov	r3, r5
 800bb52:	f7f4 fd59 	bl	8000608 <__aeabi_dmul>
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	f7f4 fb9b 	bl	8000298 <__aeabi_dsub>
 800bb62:	4604      	mov	r4, r0
 800bb64:	460d      	mov	r5, r1
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	f7f4 fd4b 	bl	8000608 <__aeabi_dmul>
 800bb72:	2200      	movs	r2, #0
 800bb74:	e9cd 0100 	strd	r0, r1, [sp]
 800bb78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7f4 fb8a 	bl	8000298 <__aeabi_dsub>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb8c:	f7f4 fe66 	bl	800085c <__aeabi_ddiv>
 800bb90:	4632      	mov	r2, r6
 800bb92:	4604      	mov	r4, r0
 800bb94:	460d      	mov	r5, r1
 800bb96:	463b      	mov	r3, r7
 800bb98:	4640      	mov	r0, r8
 800bb9a:	4649      	mov	r1, r9
 800bb9c:	f7f4 fd34 	bl	8000608 <__aeabi_dmul>
 800bba0:	4632      	mov	r2, r6
 800bba2:	463b      	mov	r3, r7
 800bba4:	f7f4 fb7a 	bl	800029c <__adddf3>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 fb72 	bl	8000298 <__aeabi_dsub>
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	f7f4 fb6e 	bl	8000298 <__aeabi_dsub>
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	492d      	ldr	r1, [pc, #180]	@ (800bc78 <__ieee754_pow+0xa88>)
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	f7f4 fb68 	bl	8000298 <__aeabi_dsub>
 800bbc8:	ec41 0b10 	vmov	d0, r0, r1
 800bbcc:	ee10 3a90 	vmov	r3, s1
 800bbd0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bbd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbd8:	da0b      	bge.n	800bbf2 <__ieee754_pow+0xa02>
 800bbda:	4650      	mov	r0, sl
 800bbdc:	f000 f85c 	bl	800bc98 <scalbn>
 800bbe0:	ec51 0b10 	vmov	r0, r1, d0
 800bbe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbe8:	f7ff bb6d 	b.w	800b2c6 <__ieee754_pow+0xd6>
 800bbec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bbf0:	e73a      	b.n	800ba68 <__ieee754_pow+0x878>
 800bbf2:	ec51 0b10 	vmov	r0, r1, d0
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	e7f4      	b.n	800bbe4 <__ieee754_pow+0x9f4>
 800bbfa:	491f      	ldr	r1, [pc, #124]	@ (800bc78 <__ieee754_pow+0xa88>)
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	f7ff bb14 	b.w	800b22a <__ieee754_pow+0x3a>
 800bc02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc06:	f7ff bb10 	b.w	800b22a <__ieee754_pow+0x3a>
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	f7ff bb0c 	b.w	800b22a <__ieee754_pow+0x3a>
 800bc12:	460c      	mov	r4, r1
 800bc14:	f7ff bb69 	b.w	800b2ea <__ieee754_pow+0xfa>
 800bc18:	2400      	movs	r4, #0
 800bc1a:	f7ff bb4b 	b.w	800b2b4 <__ieee754_pow+0xc4>
 800bc1e:	bf00      	nop
 800bc20:	00000000 	.word	0x00000000
 800bc24:	3fe62e43 	.word	0x3fe62e43
 800bc28:	fefa39ef 	.word	0xfefa39ef
 800bc2c:	3fe62e42 	.word	0x3fe62e42
 800bc30:	0ca86c39 	.word	0x0ca86c39
 800bc34:	be205c61 	.word	0xbe205c61
 800bc38:	72bea4d0 	.word	0x72bea4d0
 800bc3c:	3e663769 	.word	0x3e663769
 800bc40:	c5d26bf1 	.word	0xc5d26bf1
 800bc44:	3ebbbd41 	.word	0x3ebbbd41
 800bc48:	af25de2c 	.word	0xaf25de2c
 800bc4c:	3f11566a 	.word	0x3f11566a
 800bc50:	16bebd93 	.word	0x16bebd93
 800bc54:	3f66c16c 	.word	0x3f66c16c
 800bc58:	5555553e 	.word	0x5555553e
 800bc5c:	3fc55555 	.word	0x3fc55555
 800bc60:	40900000 	.word	0x40900000
 800bc64:	4090cbff 	.word	0x4090cbff
 800bc68:	3f6f3400 	.word	0x3f6f3400
 800bc6c:	4090cc00 	.word	0x4090cc00
 800bc70:	3fe00000 	.word	0x3fe00000
 800bc74:	fff00000 	.word	0xfff00000
 800bc78:	3ff00000 	.word	0x3ff00000
 800bc7c:	652b82fe 	.word	0x652b82fe
 800bc80:	3c971547 	.word	0x3c971547

0800bc84 <fabs>:
 800bc84:	ec51 0b10 	vmov	r0, r1, d0
 800bc88:	4602      	mov	r2, r0
 800bc8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bc8e:	ec43 2b10 	vmov	d0, r2, r3
 800bc92:	4770      	bx	lr
 800bc94:	0000      	movs	r0, r0
	...

0800bc98 <scalbn>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	ec55 4b10 	vmov	r4, r5, d0
 800bc9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bca2:	4606      	mov	r6, r0
 800bca4:	462b      	mov	r3, r5
 800bca6:	b991      	cbnz	r1, 800bcce <scalbn+0x36>
 800bca8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bcac:	4323      	orrs	r3, r4
 800bcae:	d03b      	beq.n	800bd28 <scalbn+0x90>
 800bcb0:	4b33      	ldr	r3, [pc, #204]	@ (800bd80 <scalbn+0xe8>)
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f7f4 fca6 	bl	8000608 <__aeabi_dmul>
 800bcbc:	4b31      	ldr	r3, [pc, #196]	@ (800bd84 <scalbn+0xec>)
 800bcbe:	429e      	cmp	r6, r3
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	460d      	mov	r5, r1
 800bcc4:	da0f      	bge.n	800bce6 <scalbn+0x4e>
 800bcc6:	a326      	add	r3, pc, #152	@ (adr r3, 800bd60 <scalbn+0xc8>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	e01e      	b.n	800bd0c <scalbn+0x74>
 800bcce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bcd2:	4291      	cmp	r1, r2
 800bcd4:	d10b      	bne.n	800bcee <scalbn+0x56>
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	4620      	mov	r0, r4
 800bcda:	4629      	mov	r1, r5
 800bcdc:	f7f4 fade 	bl	800029c <__adddf3>
 800bce0:	4604      	mov	r4, r0
 800bce2:	460d      	mov	r5, r1
 800bce4:	e020      	b.n	800bd28 <scalbn+0x90>
 800bce6:	460b      	mov	r3, r1
 800bce8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bcec:	3936      	subs	r1, #54	@ 0x36
 800bcee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bcf2:	4296      	cmp	r6, r2
 800bcf4:	dd0d      	ble.n	800bd12 <scalbn+0x7a>
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	a11b      	add	r1, pc, #108	@ (adr r1, 800bd68 <scalbn+0xd0>)
 800bcfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcfe:	da02      	bge.n	800bd06 <scalbn+0x6e>
 800bd00:	a11b      	add	r1, pc, #108	@ (adr r1, 800bd70 <scalbn+0xd8>)
 800bd02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd06:	a318      	add	r3, pc, #96	@ (adr r3, 800bd68 <scalbn+0xd0>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	f7f4 fc7c 	bl	8000608 <__aeabi_dmul>
 800bd10:	e7e6      	b.n	800bce0 <scalbn+0x48>
 800bd12:	1872      	adds	r2, r6, r1
 800bd14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bd18:	428a      	cmp	r2, r1
 800bd1a:	dcec      	bgt.n	800bcf6 <scalbn+0x5e>
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	dd06      	ble.n	800bd2e <scalbn+0x96>
 800bd20:	f36f 531e 	bfc	r3, #20, #11
 800bd24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd28:	ec45 4b10 	vmov	d0, r4, r5
 800bd2c:	bd70      	pop	{r4, r5, r6, pc}
 800bd2e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bd32:	da08      	bge.n	800bd46 <scalbn+0xae>
 800bd34:	2d00      	cmp	r5, #0
 800bd36:	a10a      	add	r1, pc, #40	@ (adr r1, 800bd60 <scalbn+0xc8>)
 800bd38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd3c:	dac3      	bge.n	800bcc6 <scalbn+0x2e>
 800bd3e:	a10e      	add	r1, pc, #56	@ (adr r1, 800bd78 <scalbn+0xe0>)
 800bd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd44:	e7bf      	b.n	800bcc6 <scalbn+0x2e>
 800bd46:	3236      	adds	r2, #54	@ 0x36
 800bd48:	f36f 531e 	bfc	r3, #20, #11
 800bd4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd50:	4620      	mov	r0, r4
 800bd52:	4b0d      	ldr	r3, [pc, #52]	@ (800bd88 <scalbn+0xf0>)
 800bd54:	4629      	mov	r1, r5
 800bd56:	2200      	movs	r2, #0
 800bd58:	e7d8      	b.n	800bd0c <scalbn+0x74>
 800bd5a:	bf00      	nop
 800bd5c:	f3af 8000 	nop.w
 800bd60:	c2f8f359 	.word	0xc2f8f359
 800bd64:	01a56e1f 	.word	0x01a56e1f
 800bd68:	8800759c 	.word	0x8800759c
 800bd6c:	7e37e43c 	.word	0x7e37e43c
 800bd70:	8800759c 	.word	0x8800759c
 800bd74:	fe37e43c 	.word	0xfe37e43c
 800bd78:	c2f8f359 	.word	0xc2f8f359
 800bd7c:	81a56e1f 	.word	0x81a56e1f
 800bd80:	43500000 	.word	0x43500000
 800bd84:	ffff3cb0 	.word	0xffff3cb0
 800bd88:	3c900000 	.word	0x3c900000

0800bd8c <with_errno>:
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	ed2d 8b02 	vpush	{d8}
 800bd92:	eeb0 8a40 	vmov.f32	s16, s0
 800bd96:	eef0 8a60 	vmov.f32	s17, s1
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	f7fd f82e 	bl	8008dfc <__errno>
 800bda0:	eeb0 0a48 	vmov.f32	s0, s16
 800bda4:	eef0 0a68 	vmov.f32	s1, s17
 800bda8:	ecbd 8b02 	vpop	{d8}
 800bdac:	6004      	str	r4, [r0, #0]
 800bdae:	bd10      	pop	{r4, pc}

0800bdb0 <xflow>:
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	b507      	push	{r0, r1, r2, lr}
 800bdb4:	ec51 0b10 	vmov	r0, r1, d0
 800bdb8:	b183      	cbz	r3, 800bddc <xflow+0x2c>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdc0:	e9cd 2300 	strd	r2, r3, [sp]
 800bdc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdc8:	f7f4 fc1e 	bl	8000608 <__aeabi_dmul>
 800bdcc:	ec41 0b10 	vmov	d0, r0, r1
 800bdd0:	2022      	movs	r0, #34	@ 0x22
 800bdd2:	b003      	add	sp, #12
 800bdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd8:	f7ff bfd8 	b.w	800bd8c <with_errno>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	e7ee      	b.n	800bdc0 <xflow+0x10>
 800bde2:	0000      	movs	r0, r0
 800bde4:	0000      	movs	r0, r0
	...

0800bde8 <__math_uflow>:
 800bde8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bdf0 <__math_uflow+0x8>
 800bdec:	f7ff bfe0 	b.w	800bdb0 <xflow>
 800bdf0:	00000000 	.word	0x00000000
 800bdf4:	10000000 	.word	0x10000000

0800bdf8 <__math_oflow>:
 800bdf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be00 <__math_oflow+0x8>
 800bdfc:	f7ff bfd8 	b.w	800bdb0 <xflow>
 800be00:	00000000 	.word	0x00000000
 800be04:	70000000 	.word	0x70000000

0800be08 <_init>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr

0800be14 <_fini>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr
